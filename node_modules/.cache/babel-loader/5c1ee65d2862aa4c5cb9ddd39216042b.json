{"ast":null,"code":"import { send, assign } from \"xstate\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/commandGrammar';\nconst gram = loadGrammar(grammar);\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n/*\nconst input = \"do be do be do\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\nconsole.log(result)\n*/\n\n\nexport const dmMachine4 = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      // name of the state\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"what\"\n      },\n      // events\n      states: {\n        // substates\n        prompt: {\n          entry: say(\"Hello, how can I help you?\")\n        }\n      }\n    },\n    what: {\n      initial: \"ask\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            const prs = parse(context.recResult.split(/\\s+/), gram);\n            const result = prs.resultsForRule(gram.$root)[0];\n            console.log(result);\n            return {\n              command: result\n            };\n          }),\n          // context.command contains the {action: \"close\", object: \"door\"}\n          target: \"replying\"\n        }\n      },\n      states: {\n        ask: {\n          // program listens to you\n          entry: listen()\n        }\n      }\n    },\n    replying: {\n      initial: \"prompt\",\n      // on: { ENDSPEECH: \"what\" }, // events\n      states: {\n        // substates\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Okily dokily, \".concat(context.order.action, \" the \").concat(context.order.object)\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","say","text","_context","type","value","listen","dmMachine4","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","what","RECOGNISED","actions","context","prs","recResult","split","result","resultsForRule","$root","console","log","command","target","ask","replying","order","action","object"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD,C,CAEA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,IAAI,GAAGH,WAAW,CAACE,OAAD,CAAxB;;AAEA,SAASE,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOP,IAAI,CAAEQ,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASI,MAAT,GAAgD;AAC5C,SAAOX,IAAI,CAAC,QAAD,CAAX;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMY,UAAoD,GAAI;AACjEC,EAAAA,OAAO,EAAE,MADwD;AAEjEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO,EAAE;AAAE;AACPL,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAFC;AAEsB;AAC3BL,MAAAA,MAAM,EAAE;AAAE;AACNM,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEf,GAAG,CAAC,4BAAD;AAAZ;AADJ;AAHH,KANL;AAaJgB,IAAAA,IAAI,EAAE;AACFT,MAAAA,OAAO,EAAE,KADP;AAEFG,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAEvB,MAAM,CAAEwB,OAAD,IAAa;AAC3C,kBAAMC,GAAG,GAAGvB,KAAK,CAACsB,OAAO,CAACE,SAAR,CAAkBC,KAAlB,CAAwB,KAAxB,CAAD,EAAiCvB,IAAjC,CAAjB;AACA,kBAAMwB,MAAM,GAAGH,GAAG,CAACI,cAAJ,CAAmBzB,IAAI,CAAC0B,KAAxB,EAA+B,CAA/B,CAAf;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,mBAAO;AAAEK,cAAAA,OAAO,EAAEL;AAAX,aAAP;AAA4B,WAJC,CADP;AAKS;AACjBM,UAAAA,MAAM,EAAE;AANA;AADZ,OAFF;AAYFrB,MAAAA,MAAM,EAAE;AACJsB,QAAAA,GAAG,EAAE;AAAE;AACHf,UAAAA,KAAK,EAAEV,MAAM;AADZ;AADD;AAZN,KAbF;AA+BN0B,IAAAA,QAAQ,EAAE;AACZxB,MAAAA,OAAO,EAAE,QADG;AAEJ;AACAC,MAAAA,MAAM,EAAE;AAAE;AACNM,QAAAA,MAAM,EAAE;AACnBC,UAAAA,KAAK,EAAErB,IAAI,CAAEyB,OAAD,KAAc;AACPhB,YAAAA,IAAI,EAAE,OADC;AAEPC,YAAAA,KAAK,0BAAmBe,OAAO,CAACa,KAAR,CAAcC,MAAjC,kBAA+Cd,OAAO,CAACa,KAAR,CAAcE,MAA7D;AAFE,WAAd,CAAD;AADQ;AADJ;AAHJ;AA/BJ;AAFyD,CAA9D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/commandGrammar'\n\nconst gram = loadGrammar(grammar)\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n/*\nconst input = \"do be do be do\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\nconsole.log(result)\n*/\n\nexport const dmMachine4: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { // name of the state\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"what\" }, // events\n            states: { // substates\n                prompt: { entry: say(\"Hello, how can I help you?\") },\n            }\n        },\n        what: {\n            initial: \"ask\",\n            on: {\n                RECOGNISED: {\n                    actions: assign((context) => { \n\t\t\t\t\t\tconst prs = parse(context.recResult.split(/\\s+/), gram)\n\t\t\t\t\t\tconst result = prs.resultsForRule(gram.$root)[0]\n\t\t\t\t\t\tconsole.log(result)\n\t\t\t\t\t\treturn { command: result } }), // context.command contains the {action: \"close\", object: \"door\"}\n                    target: \"replying\"\n                },\n            },\n            states: {\n                ask: { // program listens to you\n                    entry: listen()\n                }\n            }\n        },\n      replying: {\n\t\t  initial: \"prompt\",\n            // on: { ENDSPEECH: \"what\" }, // events\n            states: { // substates\n                prompt: { \n\t\t\t\t\tentry: send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `Okily dokily, ${context.order.action} the ${context.order.object}`\n                    }))\n            }\n\t\t  }\n        }\n\t}\n\t})"]},"metadata":{},"sourceType":"module"}