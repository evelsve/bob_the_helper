{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { say, grammar } from \"./index\"; // import { nluRequest } from './index'\n// import { Endings } from './index'\n\nconst url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  },\n  // ...\n  \"shooting\": {\n    url: \"https://www.miniclip.com/games/genre-5/shoot-em-up/en/\"\n  },\n  \"arcade\": {\n    url: \"www.miniclip.com/games/genre-517/arcade/en/\"\n  },\n  \"racing\": {\n    url: \"www.miniclip.com/games/genre-477/racing/en/\"\n  }\n}; // const openInNewTab: any(user_input: string) {\n//   window.open(url_grammar[user_input]),\n// }\n\nfunction openInNewTab(user_input) {\n  return window.open(user_input, '_blank');\n} // function openInNewTab(input_user: string) => void {\n//     // let context = url;\n//     // let newRelativeUrl = router.createUrlTree([namedRoute]);\n//     // let baseUrl = window.location.href.replace(router.url, '');\n//     window.open(baseUrl + newRelativeUrl, '_blank');\n// }\n\n\nexport const dmMachine2 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    negative: {\n      initial: \"music\",\n      states: {\n        music: {\n          // ...\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: 'ask_genre'\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: 'ask_game'\n            }, {\n              target: '.ask_again'\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"I am sorry to hear that. Would you like to listen to some music?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            ask_again: {\n              entry: say('I am sorry, I could not understand you. Please repeat.'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        ask_genre: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}),\n              // It checks if url is in grammar\n              actions: assign(context => {\n                return {\n                  url: url_grammar[context.recResult].url\n                };\n              }),\n              // The computer keeps the information in the object context\n              target: \"genre\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say('What genre would you like to listen to?'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            nomatch: {\n              entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        genre: {\n          initial: 'prompt',\n          states: {\n            prompt: {\n              entry: say(\"Loading music for you! Dance your troubles away. I hope you feel better homie.\"),\n              on: {\n                ENDSPEECH: 'play'\n              }\n            },\n            play: {\n              entry: send(context => _objectSpread({}, openInNewTab(context.url)))\n            }\n          }\n        },\n        ask_game: {\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: 'choose_game'\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: 'entertainment'\n            }, {\n              target: '.ask_again'\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Okay then. Would you like to play a game instead?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            ask_again: {\n              entry: say('I am sorry, I could not understand you. Please repeat.'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        choose_game: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}),\n              // It checks if url is in grammar\n              actions: assign(context => {\n                return {\n                  url: url_grammar[context.recResult].url\n                };\n              }),\n              // The computer keeps the information in the object context\n              target: \"type_of_game\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say('Which game would you like to play? You can choose racing, shooting or arcade games.'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            nomatch: {\n              entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        type_of_game: {\n          initial: 'prompt',\n          states: {\n            prompt: {\n              entry: send(context => ({\n                // We need to access the context that has the info. Similar to \"say\" function\n                type: \"SPEAK\",\n                value: \"OK. Loading \".concat(context.url, \" game for you. Enjoy it!\")\n              })),\n              on: {\n                ENDSPEECH: 'play'\n              }\n            },\n            play: {\n              entry: send(context => _objectSpread({}, openInNewTab(context.url)))\n            }\n          }\n        },\n        entertainment: {\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: 'provide_entertainment'\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: 'no_more_options'\n            }, {\n              target: '.ask_again'\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Okay then. I have one last option for you. Would you like to have some random entertainment instead?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            ask_again: {\n              entry: say('I am sorry, I could not understand you. Please repeat.'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        provide_entertainment: {\n          initial: 'prompt',\n          states: {\n            prompt: {\n              entry: say(\"Loading some entertainemnt for you! I hope you feel better homie.\"),\n              on: {\n                ENDSPEECH: 'load'\n              }\n            },\n            load: {\n              entry: send(context => _objectSpread({}, openInNewTab(\"https://theuselessweb.com\")))\n            }\n          }\n        },\n        no_more_options: {\n          initial: 'prompt',\n          states: {\n            prompt: {\n              entry: say(\"I do not have anymore options for you. I hope you find a way to feel better!\")\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmNegative.ts"],"names":["send","assign","say","grammar","url_grammar","url","openInNewTab","user_input","window","open","dmMachine2","initial","states","idle","negative","music","on","RECOGNISED","cond","context","recResult","undefined","approval","target","prompt","entry","ENDSPEECH","ask","ask_again","ask_genre","actions","nomatch","genre","play","ask_game","choose_game","type_of_game","type","value","entertainment","provide_entertainment","load","no_more_options"],"mappings":";AAAA,SAAwBA,IAAxB,EAA8BC,MAA9B,QAA4C,QAA5C;AACA,SAAQC,GAAR,EAAmCC,OAAnC,QAAkD,SAAlD,C,CAEA;AACA;;AAEA,MAAMC,WAAiD,GAC9C;AAAG,UAAQ;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAX;AACG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GADZ;AAEG,UAAQ;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAFX;AAGG,SAAO;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAHV;AAIG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAJZ;AAKG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GALZ;AAMG,YAAU;AAAEA,IAAAA,GAAG,EAAE;AAAP,GANb;AAOG,aAAW;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAPd;AAQG;AACA,cAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GATf;AAUG,YAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GAVb;AAWG,YAAU;AAACA,IAAAA,GAAG,EAAE;AAAN;AAXb,CADT,C,CAeA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,UAAtB,EAA8C;AAC5C,SAAQC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwB,QAAxB,CAAR;AACD,C,CAGD;AACA;AACA;AACA;AAEA;AACA;;;AAGA,OAAO,MAAMG,UAAoD,GAAI;AACnEC,EAAAA,OAAO,EAAE,MAD0D;AAEnEC,EAAAA,MAAM,EAAE;AACJ;AACAC,IAAAA,IAAI,EAAE,EAFF;AAGJC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,OAAO,EAAE,OADD;AAERC,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAE;AACP;AACIC,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE,CACR;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aADQ,EAGR;AAACL,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,KAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aAHQ,EAKR;AAACA,cAAAA,MAAM,EAAE;AAAT,aALQ;AADZ,WAFD;AAWHX,UAAAA,MAAM,EAAE;AACJY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,kEAAD,CADN;AAEJc,cAAAA,EAAE,EAAE;AAACU,gBAAAA,SAAS,EAAG;AAAb;AAFA,aADJ;AAKJC,YAAAA,GAAG,EAAE;AACDF,cAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV,aALD;AAQJ4B,YAAAA,SAAS,EAAE;AACPH,cAAAA,KAAK,EAAEvB,GAAG,CAAC,wDAAD,CADH;AAEPc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFG;AARP;AAXL,SADH;AA2BRG,QAAAA,SAAS,EAAC;AACNlB,UAAAA,OAAO,EAAE,QADH;AAENK,UAAAA,EAAE,EAAE;AACFC,YAAAA,UAAU,EAAE,CAAC;AACTC,cAAAA,IAAI,EAAGC,OAAD,IAAaf,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,KAAmCC,SAAnC,IAAgD,UAAUjB,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,IAAkC,EAA5C,CAD1D;AAC2G;AACpHU,cAAAA,OAAO,EAAE7B,MAAM,CAAEkB,OAAD,IAAa;AAAE,uBAAO;AAAEd,kBAAAA,GAAG,EAAED,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,CAA+Bf;AAAtC,iBAAP;AAAoD,eAApE,CAFN;AAE6E;AACtFkB,cAAAA,MAAM,EAAE;AAHC,aAAD,EAKZ;AAAEA,cAAAA,MAAM,EAAE;AAAV,aALY;AADV,WAFE;AAURX,UAAAA,MAAM,EAAE;AACNY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,yCAAD,CADN;AAEJc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFA,aADF;AAKNC,YAAAA,GAAG,EAAE;AACDF,cAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV,aALC;AAQN+B,YAAAA,OAAO,EAAE;AACPN,cAAAA,KAAK,EAAEvB,GAAG,CAAC,2EAAD,CADH;AAEPc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFG;AARH;AAVA,SA3BF;AAmDNM,QAAAA,KAAK,EAAE;AACLrB,UAAAA,OAAO,EAAE,QADJ;AAELC,UAAAA,MAAM,EAAE;AACNY,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,gFAAD,CADJ;AAENc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFE,aADF;AAKNO,YAAAA,IAAI,EAAE;AACJR,cAAAA,KAAK,EAAEzB,IAAI,CAAEmB,OAAD,sBACTb,YAAY,CAACa,OAAO,CAACd,GAAT,CADH,CAAD;AADP;AALA;AAFH,SAnDD;AAmER6B,QAAAA,QAAQ,EAAC;AACLlB,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE,CACR;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aADQ,EAGR;AAACL,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,KAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aAHQ,EAKR;AAACA,cAAAA,MAAM,EAAE;AAAT,aALQ;AADZ,WADC;AAULX,UAAAA,MAAM,EAAE;AACJY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,mDAAD,CADN;AAEJc,cAAAA,EAAE,EAAE;AAACU,gBAAAA,SAAS,EAAG;AAAb;AAFA,aADJ;AAKJC,YAAAA,GAAG,EAAE;AACDF,cAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV,aALD;AAQJ4B,YAAAA,SAAS,EAAE;AACPH,cAAAA,KAAK,EAAEvB,GAAG,CAAC,wDAAD,CADH;AAEPc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFG;AARP;AAVH,SAnED;AA2FRS,QAAAA,WAAW,EAAE;AACTxB,UAAAA,OAAO,EAAE,QADA;AAETK,UAAAA,EAAE,EAAE;AACFC,YAAAA,UAAU,EAAE,CAAC;AACTC,cAAAA,IAAI,EAAGC,OAAD,IAAaf,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,KAAmCC,SAAnC,IAAgD,UAAUjB,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,IAAkC,EAA5C,CAD1D;AAC2G;AACpHU,cAAAA,OAAO,EAAE7B,MAAM,CAAEkB,OAAD,IAAa;AAAE,uBAAO;AAAEd,kBAAAA,GAAG,EAAED,WAAW,CAACe,OAAO,CAACC,SAAT,CAAX,CAA+Bf;AAAtC,iBAAP;AAAoD,eAApE,CAFN;AAE6E;AACtFkB,cAAAA,MAAM,EAAE;AAHC,aAAD,EAKZ;AAAEA,cAAAA,MAAM,EAAE;AAAV,aALY;AADV,WAFK;AAUXX,UAAAA,MAAM,EAAE;AACNY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,qFAAD,CADN;AAEJc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFA,aADF;AAKNC,YAAAA,GAAG,EAAE;AACDF,cAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV,aALC;AAQN+B,YAAAA,OAAO,EAAE;AACPN,cAAAA,KAAK,EAAEvB,GAAG,CAAC,2EAAD,CADH;AAEPc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFG;AARH;AAVG,SA3FL;AAoHRU,QAAAA,YAAY,EAAE;AACVzB,UAAAA,OAAO,EAAE,QADC;AAEVC,UAAAA,MAAM,EAAE;AACNY,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAEzB,IAAI,CAAEmB,OAAD,KAAc;AAAE;AAC5BkB,gBAAAA,IAAI,EAAE,OADoB;AAE1BC,gBAAAA,KAAK,wBAAiBnB,OAAO,CAACd,GAAzB;AAFqB,eAAd,CAAD,CADL;AAKNW,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AALE,aADF;AAQNO,YAAAA,IAAI,EAAE;AACJR,cAAAA,KAAK,EAAEzB,IAAI,CAAEmB,OAAD,sBACTb,YAAY,CAACa,OAAO,CAACd,GAAT,CADH,CAAD;AADP;AARA;AAFE,SApHN;AAwIRkC,QAAAA,aAAa,EAAE;AACXvB,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE,CACR;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aADQ,EAGR;AAACL,cAAAA,IAAI,EAAGC,OAAD,IAAahB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA6ClB,OAAO,CAACgB,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAzG;AACAC,cAAAA,MAAM,EAAE;AADR,aAHQ,EAKR;AAACA,cAAAA,MAAM,EAAE;AAAT,aALQ;AADZ,WADO;AAUXX,UAAAA,MAAM,EAAE;AACJY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,sGAAD,CADN;AAEJc,cAAAA,EAAE,EAAE;AAACU,gBAAAA,SAAS,EAAG;AAAb;AAFA,aADJ;AAKJC,YAAAA,GAAG,EAAE;AACDF,cAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV,aALD;AAQJ4B,YAAAA,SAAS,EAAE;AACPH,cAAAA,KAAK,EAAEvB,GAAG,CAAC,wDAAD,CADH;AAEPc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFG;AARP;AAVG,SAxIP;AAgKRc,QAAAA,qBAAqB,EAAC;AAClB7B,UAAAA,OAAO,EAAE,QADS;AAElBC,UAAAA,MAAM,EAAE;AACNY,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,mEAAD,CADJ;AAENc,cAAAA,EAAE,EAAE;AAAEU,gBAAAA,SAAS,EAAE;AAAb;AAFE,aADF;AAKNe,YAAAA,IAAI,EAAE;AACJhB,cAAAA,KAAK,EAAEzB,IAAI,CAAEmB,OAAD,sBACTb,YAAY,CAAC,2BAAD,CADH,CAAD;AADP;AALA;AAFU,SAhKd;AAgLRoC,QAAAA,eAAe,EAAE;AACb/B,UAAAA,OAAO,EAAE,QADI;AAEbC,UAAAA,MAAM,EAAE;AACJY,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAEvB,GAAG,CAAC,8EAAD;AADN;AADJ;AAFK;AAhLT;AAFA;AAHN;AAF2D,CAA9D","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, grammar } from \"./index\";\n\n// import { nluRequest } from './index'\n// import { Endings } from './index'\n\nconst url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' },\n            // ...\n            \"shooting\": {url: \"https://www.miniclip.com/games/genre-5/shoot-em-up/en/\"},\n            \"arcade\": {url: \"www.miniclip.com/games/genre-517/arcade/en/\"},\n            \"racing\": {url: \"www.miniclip.com/games/genre-477/racing/en/\"},\n}\n\n// const openInNewTab: any(user_input: string) {\n//   window.open(url_grammar[user_input]),\n// }\n\nfunction openInNewTab(user_input: string): any{ \n  return (window.open(user_input, '_blank'))\n}\n\n\n// function openInNewTab(input_user: string) => void {\n//     // let context = url;\n//     // let newRelativeUrl = router.createUrlTree([namedRoute]);\n//     // let baseUrl = window.location.href.replace(router.url, '');\n\n//     window.open(baseUrl + newRelativeUrl, '_blank');\n// }\n\n\nexport const dmMachine2: MachineConfig<SDSContext, any, SDSEvent> = ({\n  initial: 'idle',\n  states: {\n      // ...\n      idle: {},\n      negative: {\n        initial: \"music\",\n        states: {\n            music: {\n            // ...\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === true,\n                        target: 'ask_genre'},\n                        {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === false,\n                        target: 'ask_game'},\n                        {target: '.ask_again'}\n                    ]\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"I am sorry to hear that. Would you like to listen to some music?\"),\n                        on: {ENDSPEECH : \"ask\"}\n                    },\n                    ask: {\n                        entry: send('LISTEN')\n                    },\n                    ask_again: {\n                        entry: say('I am sorry, I could not understand you. Please repeat.'),\n                        on: { ENDSPEECH: \"ask\"}\n                    }\n                },\n            \n            },\n        ask_genre:{\n            initial: \"prompt\",\n            on: {\n              RECOGNISED: [{\n                  cond: (context) => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}), // It checks if url is in grammar\n                  actions: assign((context) => { return { url: url_grammar[context.recResult].url } }), // The computer keeps the information in the object context\n                  target: \"genre\"\n              },\n              { target: \".nomatch\" }]\n          },\n          states: {\n            prompt: {\n                entry: say('What genre would you like to listen to?'),\n                on: { ENDSPEECH: \"ask\" }\n                },\n            ask: {\n                entry: send('LISTEN')\n              },\n            nomatch: {\n              entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n              on: { ENDSPEECH: \"ask\"}\n            }\n          }\n          },\n          genre: {\n            initial: 'prompt',\n            states: {\n              prompt: {\n                entry: say(\"Loading music for you! Dance your troubles away. I hope you feel better homie.\"),\n                on: { ENDSPEECH: 'play' } \n              },\n              play: {\n                entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                ...openInNewTab(context.url)\n                  // type: \"SPEAK\",\n                  // value: `OK. Do you want to listen to $(context.genre)?`\n              })),\n              }\n            }\n        },\n        ask_game:{\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === true,\n                    target: 'choose_game'},\n                    {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === false,\n                    target: 'entertainment'},\n                    {target: '.ask_again'}\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Okay then. Would you like to play a game instead?\"),\n                    on: {ENDSPEECH : \"ask\"}\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                ask_again: {\n                    entry: say('I am sorry, I could not understand you. Please repeat.'),\n                    on: { ENDSPEECH: \"ask\"}\n                }\n        }\n    },\n        choose_game: {\n            initial: \"prompt\",\n            on: {\n              RECOGNISED: [{\n                  cond: (context) => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}), // It checks if url is in grammar\n                  actions: assign((context) => { return { url: url_grammar[context.recResult].url } }), // The computer keeps the information in the object context\n                  target: \"type_of_game\"\n              },\n              { target: \".nomatch\" }]\n          },\n          states: {\n            prompt: {\n                entry: say('Which game would you like to play? You can choose racing, shooting or arcade games.'),\n                on: { ENDSPEECH: \"ask\" }\n                },\n            ask: {\n                entry: send('LISTEN')\n              },\n            nomatch: {\n              entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n              on: { ENDSPEECH: \"ask\"}\n            }\n          }\n        },\n\n        type_of_game: {\n            initial: 'prompt',\n            states: {\n              prompt: {\n                entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                type: \"SPEAK\",\n                value: `OK. Loading ${context.url} game for you. Enjoy it!`\n            })),\n                on: { ENDSPEECH: 'play' } \n              },\n              play: {\n                entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                ...openInNewTab(context.url)\n                  // type: \"SPEAK\",\n                  // value: `OK. Do you want to listen to $(context.genre)?`\n              })),\n              }\n            }\n        },\n\n        entertainment: {\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === true,\n                    target: 'provide_entertainment'},\n                    {cond: (context) => grammar[context.recResult] !== undefined &&  grammar[context.recResult].approval === true,\n                    target: 'no_more_options'},\n                    {target: '.ask_again'}\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Okay then. I have one last option for you. Would you like to have some random entertainment instead?\"),\n                    on: {ENDSPEECH : \"ask\"}\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                ask_again: {\n                    entry: say('I am sorry, I could not understand you. Please repeat.'),\n                    on: { ENDSPEECH: \"ask\"}\n                }\n        }\n    },\n        provide_entertainment:{\n            initial: 'prompt',\n            states: {\n              prompt: {\n                entry: say(\"Loading some entertainemnt for you! I hope you feel better homie.\"),\n                on: { ENDSPEECH: 'load' } \n              },\n              load: {\n                entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                ...openInNewTab(\"https://theuselessweb.com\")\n                  // type: \"SPEAK\",\n                  // value: `OK. Do you want to listen to $(context.genre)?`\n              })),\n              }\n            }\n        },\n        no_more_options: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"I do not have anymore options for you. I hope you find a way to feel better!\")\n                }\n            }\n        }\n        \n}\n        }\n      }})\n    "]},"metadata":{},"sourceType":"module"}