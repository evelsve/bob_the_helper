{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { promptAndAsk, nluRequest } from \"./index\"; // import { list } from \"./todo_list\"\n\nexport function Queries(ondone, onerror) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n_c = Queries;\nexport function Conditional(cond1, target1, cond2, target2, elses, saythis) {\n  return {\n    initial: \"prompt\",\n    on: {\n      ENDSPEECH: [{\n        cond: context => context.option === cond1,\n        target: target1\n      }, {\n        cond: context => context.option === cond2,\n        target: target2\n      }, {\n        target: elses\n      }]\n    },\n    states: {\n      prompt: {\n        entry: send({\n          type: \"SPEAK\",\n          value: saythis\n        })\n      }\n    }\n  };\n}\n_c2 = Conditional;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query1',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Then what would you like to do?\")) // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n\n      }\n    },\n    query1: _objectSpread({}, Queries('conditional1', \"#root.initial_welcome.help\")),\n    conditional1: _objectSpread({}, Conditional('agreement', \"create_do\", 'disagreement', \"if_ideas\", \"others\", \"Cool.\")),\n    // {\n    //     initial: \"prompt\",\n    //     on: {\n    //         ENDSPEECH: [\n    //                 {cond: (context) => context.option === 'agreement', target: \"create_do\"},\n    //                 {cond: (context) => context.option === 'disagreement', target: \"if_ideas\"},\n    //                 { target: \"others\" }] \n    //         },\n    //     states: {\n    //         prompt: {\n    //             entry: send(({type: \"SPEAK\", value: `Cool.`})),\n    //         }\n    //     }\n    // },\n    // ....\n    query3: _objectSpread({}, Queries('distributor', \"#root.initial_welcome.help\")),\n    distributor: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'games',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'music',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'enterntain_me',\n          target: \"leftovers\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ok.\"\n          })\n        }\n      }\n    },\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ummm, you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest1'\n          }\n        }\n      }\n    },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"to_do\",\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    query2: _objectSpread({}, Queries('conditional2', \"#root.initial_welcome.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", \"Ok.\")),\n    // conditional2: {\n    //     initial: \"prompt\",\n    //     on: {\n    //         ENDSPEECH: [\n    //                 {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n    //                 {cond: (context) => context.option === 'disagreement', target: \"#root.dm1.positive.quest2\"},\n    //                 { target: \"others\" }] \n    //         },\n    //     states: {\n    //         prompt: {\n    //             entry: send(({type: \"SPEAK\", value: `Ok.`})),\n    //         }\n    //     }\n    // },\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Congratulations on your accomplishment! Here's a reward\"\n          })),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']\n          }\n        }\n      }\n    },\n    leftovers: {}\n  }\n}; // const fs = require('fs');\n// let writeStream = fs.createWriteStream('todo_list.txt');\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n// // close the stream\n// writeStream.end();\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Queries\");\n$RefreshReg$(_c2, \"Conditional\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","promptAndAsk","nluRequest","Queries","ondone","onerror","invoke","id","src","context","event","option","onDone","actions","data","intent","name","console","log","target","onError","Conditional","cond1","target1","cond2","target2","elses","saythis","initial","on","ENDSPEECH","cond","states","prompt","entry","type","value","dmMachine1","idle","positive","quest1","RECOGNISED","recResult","quest2","query1","conditional1","query3","distributor","others","create_do","task","to_do","if_ideas","query2","conditional2","create_ideas","idea","done","leftovers"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\n// import { list } from \"./todo_list\"\n\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n}})}\n\nexport function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === cond1, target: target1},\n                            {cond: (context) => context.option === cond2, target: target2},\n                            { target: elses }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: saythis})),\n                    }\n                }\n})}\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query1',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    },\n                    quest2: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query3',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Then what would you like to do?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    }\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n             }},\n            query1: {...Queries('conditional1', \"#root.initial_welcome.help\")},\n            conditional1: {...Conditional('agreement', \"create_do\", 'disagreement', \"if_ideas\", \"others\", `Cool.`)},\n            // {\n            //     initial: \"prompt\",\n            //     on: {\n            //         ENDSPEECH: [\n            //                 {cond: (context) => context.option === 'agreement', target: \"create_do\"},\n            //                 {cond: (context) => context.option === 'disagreement', target: \"if_ideas\"},\n            //                 { target: \"others\" }] \n                        \n            //         },\n            //     states: {\n            //         prompt: {\n            //             entry: send(({type: \"SPEAK\", value: `Cool.`})),\n            //         }\n            //     }\n            // },\n            // ....\n            query3: {...Queries('distributor', \"#root.initial_welcome.help\")},\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'games', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'music', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'enterntain_me', target: \"leftovers\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"Ummm, you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n                            }\n                        }\n            },\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"to_do\",\n                        actions: assign((context) => { return { task: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                             on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n            //             {cond: (context) => context.option === 'disagreement', target: \"quest2\"},\n            //             // { target: \"others\" }] \n            //         ]\n            //             // target: \"#root.dm1.query1\",\n            //             // actions: assign((context) => { return { option: context.recResult } }),\n            //         }},\n            //     ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            query2: {...Queries('conditional2',\"#root.initial_welcome.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", `Ok.`)},\n            // conditional2: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         ENDSPEECH: [\n            //                 {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n            //                 {cond: (context) => context.option === 'disagreement', target: \"#root.dm1.positive.quest2\"},\n            //                 { target: \"others\" }] \n                        \n            //         },\n            //     states: {\n            //         prompt: {\n            //             entry: send(({type: \"SPEAK\", value: `Ok.`})),\n            //         }\n            //     }\n            // },\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:\"Congratulations on your accomplishment! Here's a reward\" })),\n                             on: { ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']}\n                    }\n                }\n            },\n            leftovers: {}\n}})\n\n\n// const fs = require('fs');\n\n// let writeStream = fs.createWriteStream('todo_list.txt');\n\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n\n// // close the stream\n// writeStream.end();\n\n\n"]},"metadata":{},"sourceType":"module"}