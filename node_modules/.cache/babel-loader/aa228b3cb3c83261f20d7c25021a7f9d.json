{"ast":null,"code":"import _objectSpread from\"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign}from\"xstate\";import{Queries,Conditional,promptAndAsk,say,grammar}from\"./index\";export const url_grammar={\"rock\":{url:'https://www.youtube.com/watch?v=A0QkGThnKNQ'},\"metal\":{url:'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'},\"punk\":{url:'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'},\"rap\":{url:'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'},\"lo-fi\":{url:'https://www.youtube.com/watch?v=5qap5aO4i9A'},\"house\":{url:'https://www.youtube.com/watch?v=cna6C24AJkU'},\"techno\":{url:'https://www.youtube.com/watch?v=bC9_OKu6nBQ'},\"country\":{url:'https://www.youtube.com/watch?v=kI24NNjz2j8'}// ...          \n};const help_commands=[\"help\",\"I don't know\",\"help me\",\"I need help\",\"what does this mean\",\"wait what\",\"what do you mean\"];export function Prompt_Nomatch_Timeout(prompt,no_match,timeout=5000){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:[send('LISTEN'),send('MAXSPEECH',{delay:timeout,id:'timeout'})]},nomatch:{entry:say(no_match),on:{ENDSPEECH:\"prompt\"}}}};}export const gram={\"finished\":{finished:true},\"done\":{finished:true},\"I've done the task\":{finished:true}// ...          \n};let num=0;export const dmMachine1={// NOTE: regarding the queries:\n// There are more efficient ways to implement them, however, \n// Yet we decided to have a grammar as well as querying in order to see\n// which implementation will yield better results\ninitial:'idle',states:{// ...\nidle:{},// ...\npositive:{initial:\"quest1\",states:{// .... // ...\nquest1:_objectSpread({on:{RECOGNISED:[{cond:context=>grammar[context.recResult]!==undefined&&grammar[context.recResult].approval===true,target:\"#root.dm1.create_do\"},{cond:context=>grammar[context.recResult]!==undefined&&grammar[context.recResult].approval===false,target:\"#root.dm1.if_ideas\"},{target:'#root.dm1.others'}]}},promptAndAsk(\"I suppose you could do something productive. Do you agree?\")),// .... // ...\nquest2:_objectSpread({on:{RECOGNISED:{target:'#root.dm1.query3',actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"So what would you like to do?\"))}},// ....\nquery1:_objectSpread({},Queries('conditional1',\"#root.init.help\")),// ....\nconditional1:_objectSpread({},Conditional('agree',\"create_do\",'disagree',\"#root.dm1.if_ideas\",\"#root.dm1.others\",'#root.dm2.idle',\"Ok.\")),// ....\nquery3:_objectSpread({},Queries(\"#root.init.distributor\",\"#root.init.help\")),//...\ncreate_do:_objectSpread({initial:\"prompt\",on:{RECOGNISED:{actions:assign(context=>{return{task:context.recResult};}),target:\"to_do\"}}},promptAndAsk(\"Tell me the things you have to accomplish.\")),// ...\nto_do:{initial:\"prompt\",states:{prompt:{entry:send(context=>({delay:12000,type:\"SPEAK\",value:\"Now go and complete the following tasks: \".concat(context.task)})),on:{ENDSPEECH:'#root.dm1.wait'}}}},// ...\nif_ideas:_objectSpread({on:{RECOGNISED:{target:'#root.dm1.query2',actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"Then how about working on your ideas?\")),// ....\nquery2:_objectSpread({},Queries('conditional2',\"#root.init.help\")),// ....\nconditional2:_objectSpread({},Conditional('agree',\"create_ideas\",'disagree',\"#root.dm1.positive.quest2\",\"#root.dm1.others\",'#root.dm2.idle',\"Cool.\")),// ...\ncreate_ideas:_objectSpread({initial:\"prompt\",on:{RECOGNISED:{target:\"idea\",actions:assign(context=>{return{idea:context.recResult};})}}},promptAndAsk(\"Tell me your idea.\")),// ...\nidea:{initial:\"prompt\",// on: {ENDSPEECH: ['#root.dm1.idle']},\nstates:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"You should work on your idea of \".concat(context.idea,\".\")})),on:{ENDSPEECH:'#root.dm1.wait'}}}},// ...\nwait:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>gram[context.recResult]!==undefined&&gram[context.recResult].finished===true,target:\"done\"},{cond:context=>gram[context.recResult]!==undefined&&gram[context.recResult].finished===false,target:\"wait\"},{target:'wait'}]}},promptAndAsk(\"Say 'finished', when you're done\")),// ...\ndone:{initial:\"prompt\",states:{prompt:{entry:say(\"Good job.\"),on:{ENDSPEECH:{target:'#root.init.goodbye'}}}}},// ...\nothers:{initial:\"prompt\",// on: {ENDSPEECH: '#root.goodbbye'},\nstates:{prompt:{entry:say(\"mmm, you said something strange\"),on:{ENDSPEECH:'#root.dm1.positive.quest2'}}}}}};// ONLY DRAFTS\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n// annoy:{\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//             target: \"done\"},\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//             target: \".wait\"}],\n//         // WAIT: '.wait'\n//         }\n//     },\n// ...\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n//             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n//             {target: \".wait\"}], \n//         WAIT: '.prompt'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Have you done your task yet?\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n//         },\n//         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n//         wait: {\n//             entry: [\n//                 say('Hm.')\n//             ],\n//             on: {\n//                 ENDSPEECH: [\n//                     {cond: () => (num++) <= 2, target: 'prompt'},\n//                     {target: '#root.dm1.done'}\n//                 ]\n//             }\n//         }\n//     }\n// },\n// ----\n// quest1: {\n//     on: {\n//         RECOGNISED: [\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//                 actions: assign((context) => { return { approval: true } }),\n//                 target: \"#root.dm1.create_do\"},\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//                 actions: assign((context) => { return { approval: false} }),\n//                 target: \"#root.dm1.if_ideas\"},\n//                 {target: \"#root.dm1.done.others\"}\n//                 // {cond: (context) => context.option === 'help', target: '.help'}\n//                 ]\n//         },\n//         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n//         },\\\n// ------\n// done: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n//                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n//         }, \n//             others: {\n//                 entry: say(\"Ummm, you said something strange\"),\n//                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n//                 }\n//         }\n//     }   \n// ------\n// idea: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: send((context) => ({\n//                     type: \"SPEAK\",\n//                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n//                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n//             // },\n//     //         elevator: {\n//     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n//     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n//                 }\n//     }\n// }\n// ------\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: {\n//             target: \"conditional3\",\n//             actions: assign((context) => { return { option: context.recResult } }),\n//         },\n//         WAIT: 'wait'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Let me know when you're done.\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [\n//                 send('LISTEN'),\n//                 send('WAIT', {delay: 10000})\n//             ]\n//         }\n//     }\n// },\n// ...\n// wait: {\n//     entry: [say('Have you done your task yet?')],\n//     on: {\n//         ENDSPEECH: [\n//             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n//             {target: '#root.dm1.idea_wait'}\n//         ]\n//     }\n// },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n// -----\n// ...\n// full_annoy:{\n//     initial: 'annoy',\n//     on: { \n//         // RECOGNISED: {\n//         //         cond: (context) => help_commands.includes(context.recResult),\n//         //         target: '#root.init.help'\n//         //             },\n//         MAXSPEECH: [\n//             { \n//                 cond: (context) => context.count < 5,\n//                 target: '#root.dm1.idea_wait'},\n//                 {cond: (context) => context.count == null,\n//                 actions: assign((context)=>{return {count: Number(0)}}),\n//                 target: '#root.dm1.maxspeech'}],\n//             },\n//     states:{\n//         hist:{type: 'history'},\n//         // .... // ...\n//         annoy: {\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n//                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n//                     target: \"#root.dm1.done\"}]\n//                 // },\n//                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n//                 //     target: \".nomatch\" }]\n//             },\n//             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n//         }\n// },\n// // ....\n// },\n// // ... \n// maxspeech:{\n//     initial: 'prompt',\n//     on: {\n//         ENDSPEECH: {\n//             actions: assign((context)=> {return {count: context.count+1 }}),\n//             target: 'full_annoy.hist'\n//                 }\n//             },\n//             // target: 'fill_appointment_info.hist'\n//         states: {\n//             prompt: {entry: say('I AM A STUPID BOT ')}\n//     }\n// },\n// ...\n// ..\n//     wait: {\n//         initial: 'prompt',\n//         on: { ENDSPEECH: '#root.dm1.annoy'},\n//         states: {\n//             prompt: {\n//                 entry: say(\"M.\"),\n//                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n//             },\n//             // ask: {\n//             //     entry: [\n//             //         send('LISTEN'),\n//             //         send('WAIT', {delay: 10000})\n//             //     ]}\n//             }\n// },\n//     // ...\n//     annoy: {\n//         initial: \"prompt\",\n//         on: {\n//             RECOGNISED: {\n//                 target: \"conditional3\",\n//                 actions: assign((context) => { return { option: context.recResult } }),\n//             },\n//             WAIT: 'wait'\n//         },\n//         states: {\n//             prompt: {\n//                 entry: say(\"Have you finished your task?\"),\n//                 on: { ENDSPEECH: \"ask\" }\n//             },\n//             ask: {\n//                 entry: [\n//                     send('LISTEN'),\n//                     send('WAIT', {delay: 10000})\n//                 ]\n//             }\n//         }\n//     },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","promptAndAsk","say","grammar","url_grammar","url","help_commands","Prompt_Nomatch_Timeout","prompt","no_match","timeout","initial","states","entry","on","ENDSPEECH","ask","delay","id","nomatch","gram","finished","num","dmMachine1","idle","positive","quest1","RECOGNISED","cond","context","recResult","undefined","approval","target","quest2","actions","option","query1","conditional1","query3","create_do","task","to_do","type","value","if_ideas","query2","conditional2","create_ideas","idea","wait","done","others"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, promptAndAsk, Endings, promptHelpBye, say, grammar } from \"./index\";\n\n\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n            // ...          \n}\n\nconst help_commands = [\"help\", \"I don't know\", \"help me\", \"I need help\", \"what does this mean\", \"wait what\", \"what do you mean\"]\n\nexport function Prompt_Nomatch_Timeout(prompt: string, no_match:string, timeout=5000): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: timeout , id: 'timeout'})]\n            },\n            nomatch: {\n                entry: say(no_match),\n                on: { ENDSPEECH: \"prompt\" }\n            }}})\n}\n\nexport const gram: { [index: string]: {finished?:  boolean } } = \n         {  \"finished\": { finished: true },\n            \"done\": { finished: true },\n            \"I've done the task\": { finished: true }\n            // ...          \n}\n\nlet num = 0\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    // NOTE: regarding the queries:\n    // There are more efficient ways to implement them, however, \n    // Yet we decided to have a grammar as well as querying in order to see\n    // which implementation will yield better results\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                // .... // ...\n                quest1: {\n                    on: {\n                        RECOGNISED: \n                            [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"#root.dm1.create_do\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"#root.dm1.if_ideas\"},\n\n                            {target:'#root.dm1.others'}\n                            ]\n                        },\n                    ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                },\n                // .... // ...\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            // ....\n            query1: {...Queries('conditional1',\"#root.init.help\")},\n            // ....\n            conditional1: {...Conditional('agree', \"create_do\", 'disagree', \"#root.dm1.if_ideas\", \"#root.dm1.others\", '#root.dm2.idle', `Ok.`)},\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({delay:12000,\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'},  \n                        }\n                    }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ....\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            // ....\n            conditional2: {...Conditional('agree', \"create_ideas\", 'disagree', \"#root.dm1.positive.quest2\", \"#root.dm1.others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}.` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'}\n                            }\n                }\n            },\n            // ...\n            wait: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => gram[context.recResult] !== undefined && gram[context.recResult].finished === true,\n                        target: \"done\"},\n\n                        {cond: (context) => gram[context.recResult] !== undefined && gram[context.recResult].finished === false,\n                        target: \"wait\"},\n                        {target: 'wait'}]  \n                },\n            ...promptAndAsk(\"Say 'finished', when you're done\")\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: say(\"Good job.\"),\n                            on: { ENDSPEECH: {target: '#root.init.goodbye'}},\n                        }\n                    }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: '#root.goodbbye'},\n                    states: {\n                        prompt: {\n                            entry: say(\"mmm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'},\n                        }\n                    }\n            }\n    }}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ONLY DRAFTS\n\n\n\n\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n\n          // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n\n            //             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n                        \n            //             {target: \".wait\"}], \n\n            //         WAIT: '.prompt'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Have you done your task yet?\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n            //         },\n            //         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n            //         wait: {\n            //             entry: [\n            //                 say('Hm.')\n            //             ],\n            //             on: {\n            //                 ENDSPEECH: [\n            //                     {cond: () => (num++) <= 2, target: 'prompt'},\n            //                     {target: '#root.dm1.done'}\n            //                 ]\n            //             }\n            //         }\n            //     }\n            // },\n\n\n            // ----\n\n            // quest1: {\n                //     on: {\n                //         RECOGNISED: [\n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                //                 actions: assign((context) => { return { approval: true } }),\n                //                 target: \"#root.dm1.create_do\"},\n            \n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                //                 actions: assign((context) => { return { approval: false} }),\n                //                 target: \"#root.dm1.if_ideas\"},\n\n                //                 {target: \"#root.dm1.done.others\"}\n\n                //                 // {cond: (context) => context.option === 'help', target: '.help'}\n                //                 ]\n                //         },\n                //         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n                //         },\\\n\n\n\n                // ------\n\n                // done: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                //                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                //         }, \n                //             others: {\n                //                 entry: say(\"Ummm, you said something strange\"),\n                //                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                //                 }\n                //         }\n                //     }   \n\n\n                // ------\n\n\n                // idea: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: send((context) => ({\n                //                     type: \"SPEAK\",\n                //                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n                //                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n                //             // },\n                //     //         elevator: {\n                //     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n                //     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n                //                 }\n                //     }\n                // }\n\n                // ------\n\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: {\n            //             target: \"conditional3\",\n            //             actions: assign((context) => { return { option: context.recResult } }),\n            //         },\n            //         WAIT: 'wait'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Let me know when you're done.\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [\n            //                 send('LISTEN'),\n            //                 send('WAIT', {delay: 10000})\n            //             ]\n            //         }\n            //     }\n            // },\n            // ...\n            // wait: {\n                \n            //     entry: [say('Have you done your task yet?')],\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n            //             {target: '#root.dm1.idea_wait'}\n            //         ]\n            //     }\n            // },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n\n\n            // -----\n\n                // ...\n                // full_annoy:{\n                //     initial: 'annoy',\n                //     on: { \n                //         // RECOGNISED: {\n                //         //         cond: (context) => help_commands.includes(context.recResult),\n                //         //         target: '#root.init.help'\n                //         //             },\n    \n                //         MAXSPEECH: [\n                //             { \n                //                 cond: (context) => context.count < 5,\n                //                 target: '#root.dm1.idea_wait'},\n    \n                //                 {cond: (context) => context.count == null,\n                //                 actions: assign((context)=>{return {count: Number(0)}}),\n                //                 target: '#root.dm1.maxspeech'}],\n                //             },\n                //     states:{\n                //         hist:{type: 'history'},\n                //         // .... // ...\n                //         annoy: {\n                //             on: {\n                //                 RECOGNISED: [{\n                //                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n                //                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n                //                     target: \"#root.dm1.done\"}]\n        \n                //                 // },\n                //                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n                //                 //     target: \".nomatch\" }]\n                //             },\n                //             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n                //         }\n                // },\n                // // ....\n                // },\n                // // ... \n                // maxspeech:{\n                //     initial: 'prompt',\n                //     on: {\n                //         ENDSPEECH: {\n                //             actions: assign((context)=> {return {count: context.count+1 }}),\n                //             target: 'full_annoy.hist'\n                //                 }\n                //             },\n                //             // target: 'fill_appointment_info.hist'\n                //         states: {\n                //             prompt: {entry: say('I AM A STUPID BOT ')}\n                //     }\n                // },\n\n                // ...\n\n                            // ..\n        //     wait: {\n        //         initial: 'prompt',\n        //         on: { ENDSPEECH: '#root.dm1.annoy'},\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"M.\"),\n        //                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n        //             },\n        //             // ask: {\n        //             //     entry: [\n        //             //         send('LISTEN'),\n        //             //         send('WAIT', {delay: 10000})\n        //             //     ]}\n        //             }\n        // },\n        //     // ...\n        //     annoy: {\n        //         initial: \"prompt\",\n        //         on: {\n        //             RECOGNISED: {\n        //                 target: \"conditional3\",\n        //                 actions: assign((context) => { return { option: context.recResult } }),\n        //             },\n        //             WAIT: 'wait'\n        //         },\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"Have you finished your task?\"),\n        //                 on: { ENDSPEECH: \"ask\" }\n        //             },\n        //             ask: {\n        //                 entry: [\n        //                     send('LISTEN'),\n        //                     send('WAIT', {delay: 10000})\n        //                 ]\n        //             }\n        //         }\n        //     },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},"]},"metadata":{},"sourceType":"module"}