{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk } from \"./index\";\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"#root.dm1.create_do\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"#root.dm1.if_ideas\"\n            }]\n          }\n        }, promptAndAsk(\"I suppose you could do something productive. Do you agree?\")),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Then what would you like to do?\"))\n      }\n    },\n    // ....\n    query3: _objectSpread({}, Queries('distributor', \"#root.initial_welcome.help\")),\n    distributor: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'games',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'music',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'enterntain_me',\n          target: \"leftovers\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Understood.\"\n          })\n        }\n      }\n    },\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ummm, you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest1'\n          }\n        }\n      }\n    },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"to_do\",\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    query2: _objectSpread({}, Queries('conditional2', \"#root.initial_welcome.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", \"Cool.\")),\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You should work on your idea of \".concat(context.idea, \". Let me play some music while you are at it.\")\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Congratulations on your accomplishment! Here's a reward\"\n          })),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']\n          }\n        }\n      }\n    },\n    leftovers: {}\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","grammar","promptAndAsk","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","recResult","undefined","approval","actions","target","quest2","option","query3","distributor","ENDSPEECH","prompt","entry","type","value","others","create_do","task","to_do","if_ideas","query2","conditional2","create_ideas","idea","done","leftovers"],"mappings":";AAAA,SAAwBA,IAAxB,EAA8BC,MAA9B,QAA4C,QAA5C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,YAAxC,QAAuF,SAAvF;AAEA,OAAO,MAAMC,UAAoD,GAAI;AACjEC,EAAAA,OAAO,EAAE,MADwD;AAEjEC,EAAAA,MAAM,EAAE;AACJ;AACAC,IAAAA,IAAI,EAAE,EAFF;AAGJ;AACAC,IAAAA,QAAQ,EAAE;AACNH,MAAAA,OAAO,EAAE,QADH;AAENC,MAAAA,MAAM,EAAE;AACJG,QAAAA,MAAM;AACEC,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EACN,CACI;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAaX,OAAO,CAACW,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA4Cb,OAAO,CAACW,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAxG;AACAC,cAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,uBAAO;AAAEG,kBAAAA,QAAQ,EAAE;AAAZ,iBAAP;AAA2B,eAA3C,CADf;AAEAE,cAAAA,MAAM,EAAE;AAFR,aADJ,EAKI;AAACN,cAAAA,IAAI,EAAGC,OAAD,IAAaX,OAAO,CAACW,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA4Cb,OAAO,CAACW,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,KAAxG;AACAC,cAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,uBAAO;AAAEG,kBAAAA,QAAQ,EAAE;AAAZ,iBAAP;AAA2B,eAA3C,CADf;AAEAE,cAAAA,MAAM,EAAE;AAFR,aALJ;AAFJ;AADN,WAaKf,YAAY,CAAC,4DAAD,CAbjB,CADF;AAgBAgB,QAAAA,MAAM;AACFT,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE;AACRO,cAAAA,MAAM,EAAE,kBADA;AAERD,cAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,uBAAO;AAAEO,kBAAAA,MAAM,EAAEP,OAAO,CAACC;AAAlB,iBAAP;AAAsC,eAAtD;AAFP;AADZ;AADF,WAMCX,YAAY,CAAC,iCAAD,CANb;AAhBN;AAFF,KAJN;AA+BA;AACAkB,IAAAA,MAAM,oBAAMrB,OAAO,CAAC,aAAD,EAAgB,4BAAhB,CAAb,CAhCN;AAiCAsB,IAAAA,WAAW,EAAE;AACTjB,MAAAA,OAAO,EAAE,QADA;AAETK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CACH;AAACX,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,OAAvC;AAAgDF,UAAAA,MAAM,EAAE;AAAxD,SADG,EAEH;AAACN,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,OAAvC;AAAgDF,UAAAA,MAAM,EAAE;AAAxD,SAFG,EAGH;AAACN,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,eAAvC;AAAwDF,UAAAA,MAAM,EAAE;AAAhE,SAHG,EAIH;AAAEA,UAAAA,MAAM,EAAE;AAAV,SAJG;AADX,OAFK;AASTZ,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE3B,IAAI,CAAE;AAAC4B,YAAAA,IAAI,EAAE,OAAP;AAAgBC,YAAAA,KAAK;AAArB,WAAF;AADP;AADJ;AATC,KAjCb;AAgDA;AACAC,IAAAA,MAAM,EAAE;AACJvB,MAAAA,OAAO,EAAE,QADL;AAEJK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CACP,gBADO;AADX,OAFA;AAMAjB,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE3B,IAAI,CAAE;AACT4B,YAAAA,IAAI,EAAE,OADG;AAETC,YAAAA,KAAK,EAAC;AAFG,WAAF,CADP;AAIHjB,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAJD;AADJ;AANR,KAjDR;AAgEA;AACAM,IAAAA,SAAS;AACLxB,MAAAA,OAAO,EAAE,QADJ;AAELK,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRO,UAAAA,MAAM,EAAE,OADA;AAERD,UAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,mBAAO;AAAEiB,cAAAA,IAAI,EAAEjB,OAAO,CAACC;AAAhB,aAAP;AAAoC,WAApD;AAFP;AADZ;AAFC,OAOEX,YAAY,CAAC,4CAAD,CAPd,CAjET;AA0EA;AACA4B,IAAAA,KAAK,EAAE;AACH1B,MAAAA,OAAO,EAAE,QADN;AAEHK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CAAC,gBAAD;AADX,OAFD;AAKCjB,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE3B,IAAI,CAAEe,OAAD,KAAc;AACtBa,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,qDAA6Cd,OAAO,CAACiB,IAArD;AAFiB,WAAd,CAAD,CADP;AAIHpB,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAJD;AADJ;AALT,KA3EP;AAyFA;AACAS,IAAAA,QAAQ;AACJtB,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRO,UAAAA,MAAM,EAAE,kBADA;AAERD,UAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,mBAAO;AAAEO,cAAAA,MAAM,EAAEP,OAAO,CAACC;AAAlB,aAAP;AAAsC,WAAtD;AAFP;AADZ;AADA,OAMDX,YAAY,CAAC,uCAAD,CANX,CA1FR;AAkGA8B,IAAAA,MAAM,oBAAMjC,OAAO,CAAC,cAAD,EAAgB,4BAAhB,CAAb,CAlGN;AAmGAkC,IAAAA,YAAY,oBAAMjC,WAAW,CAAC,WAAD,EAAc,cAAd,EAA8B,cAA9B,EAA8C,2BAA9C,EAA2E,QAA3E,UAAjB,CAnGZ;AAoGA;AACAkC,IAAAA,YAAY;AACR9B,MAAAA,OAAO,EAAE,QADD;AAERK,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRO,UAAAA,MAAM,EAAE,MADA;AAERD,UAAAA,OAAO,EAAElB,MAAM,CAAEc,OAAD,IAAa;AAAE,mBAAO;AAAEuB,cAAAA,IAAI,EAAEvB,OAAO,CAACC;AAAhB,aAAP;AAAoC,WAApD;AAFP;AADZ;AAFI,OAODX,YAAY,CAAC,oBAAD,CAPX,CArGZ;AA8GA;AACAiC,IAAAA,IAAI,EAAE;AACF/B,MAAAA,OAAO,EAAE,QADP;AAEFK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CAAC,gBAAD;AADX,OAFF;AAKEjB,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE3B,IAAI,CAAEe,OAAD,KAAc;AACtBa,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,4CAAoCd,OAAO,CAACuB,IAA5C;AAFiB,WAAd,CAAD,CADP;AAIJ1B,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAJA;AADJ;AALV,KA/GN;AA6HA;AACAc,IAAAA,IAAI,EAAE;AACFhC,MAAAA,OAAO,EAAE,QADP;AAEFK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CAAC,gBAAD;AADX,OAFF;AAKEjB,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE3B,IAAI,CAAEe,OAAD,KAAc;AACtBa,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,EAAC;AAFgB,WAAd,CAAD,CADP;AAIHjB,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,+BAAnB;AAAb;AAJD;AADJ;AALV,KA9HN;AA4IAe,IAAAA,SAAS,EAAE;AA5IX;AAFyD,CAA9D","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                        on: {\n                            RECOGNISED: \n                                [\n                                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                    actions: assign((context) => { return { approval: true } }),\n                                    target: \"#root.dm1.create_do\"},\n                \n                                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                    actions: assign((context) => { return { approval: false} }),\n                                    target: \"#root.dm1.if_ideas\"}\n                                ]\n                            },\n                        ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                    },\n                    quest2: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query3',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Then what would you like to do?\")\n                    }\n             }},\n            // ....\n            query3: {...Queries('distributor', \"#root.initial_welcome.help\")},\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'games', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'music', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'enterntain_me', target: \"leftovers\"},\n                            { target: \"others\" }] \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Understood.`})),\n                    }\n                }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"Ummm, you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n                            }\n                        }\n            },\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"to_do\",\n                        actions: assign((context) => { return { task: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                             on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            query2: {...Queries('conditional2',\"#root.initial_welcome.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}. Let me play some music while you are at it.` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:\"Congratulations on your accomplishment! Here's a reward\" })),\n                             on: { ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']}\n                    }\n                }\n            },\n            leftovers: {}\n}})\n\n\n\n"]},"metadata":{},"sourceType":"module"}