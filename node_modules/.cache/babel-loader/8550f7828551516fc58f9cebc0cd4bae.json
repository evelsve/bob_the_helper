{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, promptAndAsk, promptHelpBye, say } from \"./index\";\nimport { openInNewTab } from \"./dmNegative\";\nexport const url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  } // ...\n\n};\nlet num = 0;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'positive',\n              target: [\"#root.dm1.positive\", \"idle\"]\n            }, {\n              cond: context => context.option === 'negative',\n              target: [\"#root.dm2.negative\", \"idle\"]\n            }, {\n              cond: context => context.option === 'choose_todo',\n              target: [\"#root.dm1.create_do\", \"idle\"]\n            }, {\n              cond: context => context.option === 'choose_ideas',\n              target: [\"#root.dm1.create_ideas\", \"idle\"]\n            }, // {cond: (context) => context.option === 'negative', target: [\"#root.dm2.denial\", \"idle\"]},\n            {\n              cond: context => context.option === 'help',\n              target: \"help\"\n            }, {\n              target: \".goodbye\"\n            }]\n          }\n        }, promptHelpBye(\"I suppose you could do something productive. Do you agree?\", '#root.dm2.idle')),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"So what would you like to do?\"))\n      }\n    },\n    query1: _objectSpread({}, Queries('conditional2', \"#root.init.help\")),\n    conditional1: _objectSpread({}, Conditional('agreement', \"create_do\", 'disagreement', \"#root.dm1.if_ideas\", \"#root.dm1.done.others\", '#root.dm2.idle', \"Ok.\")),\n    // ...\n    query2: _objectSpread({}, Queries('conditional2', \"#root.init.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"#root.dm1.done.others\", '#root.dm2.idle', \"Cool.\")),\n    // ....\n    query3: _objectSpread({}, Queries(\"#root.init.distributor\", \"#root.init.help\")),\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: \"to_do\"\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            delay: 12000,\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.annoy'\n          }\n        }\n      }\n    },\n    // ...\n    annoy: {},\n    wait: {},\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You should work on your idea of \".concat(context.idea, \". Let me play some music while you are at it. Say 'finished', when you're done\")\n          })),\n          on: {\n            ENDSPEECH: ['#root.dm2.done', '#root.dm1.done']\n          }\n        },\n        elevator: {\n          entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest2'\n          }\n        }\n      }\n    },\n    idea_wait: {},\n    // ...\n    done: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']\n          }\n        },\n        others: {\n          entry: say(\"Ummm, you said something strange\"),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest2'\n          }\n        }\n      }\n    }\n  }\n}; // annoy:{\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//             target: \"done\"},\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//             target: \".wait\"}],\n//         // WAIT: '.wait'\n//         }\n//     },\n// ...\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n//             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n//             {target: \".wait\"}], \n//         WAIT: '.prompt'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Have you done your task yet?\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n//         },\n//         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n//         wait: {\n//             entry: [\n//                 say('Hm.')\n//             ],\n//             on: {\n//                 ENDSPEECH: [\n//                     {cond: () => (num++) <= 2, target: 'prompt'},\n//                     {target: '#root.dm1.done'}\n//                 ]\n//             }\n//         }\n//     }\n// },\n// ----\n// quest1: {\n//     on: {\n//         RECOGNISED: [\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//                 actions: assign((context) => { return { approval: true } }),\n//                 target: \"#root.dm1.create_do\"},\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//                 actions: assign((context) => { return { approval: false} }),\n//                 target: \"#root.dm1.if_ideas\"},\n//                 {target: \"#root.dm1.done.others\"}\n//                 // {cond: (context) => context.option === 'help', target: '.help'}\n//                 ]\n//         },\n//         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n//         },\\\n// ------\n// done: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n//                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n//         }, \n//             others: {\n//                 entry: say(\"Ummm, you said something strange\"),\n//                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n//                 }\n//         }\n//     }","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","promptAndAsk","promptHelpBye","say","openInNewTab","url_grammar","url","num","dmMachine1","initial","states","idle","positive","quest1","on","ENDSPEECH","cond","context","option","target","quest2","RECOGNISED","actions","recResult","query1","conditional1","query2","conditional2","query3","create_do","task","to_do","prompt","entry","delay","type","value","annoy","wait","if_ideas","create_ideas","idea","elevator","idea_wait","done","others"],"mappings":";AAAA,SAAwBA,IAAxB,EAA8BC,MAA9B,QAA4C,QAA5C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,YAA/B,EAA6CC,aAA7C,EAA4DC,GAA5D,QAAuE,SAAvE;AACA,SAASC,YAAT,QAA6B,cAA7B;AAIA,OAAO,MAAMC,WAAiD,GACrD;AAAG,UAAQ;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAX;AACG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GADZ;AAEG,UAAQ;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAFX;AAGG,SAAO;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAHV;AAIG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAJZ;AAKG,WAAS;AAAEA,IAAAA,GAAG,EAAE;AAAP,GALZ;AAMG,YAAU;AAAEA,IAAAA,GAAG,EAAE;AAAP,GANb;AAOG,aAAW;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAPd,CAQG;;AARH,CADF;AAaP,IAAIC,GAAG,GAAG,CAAV;AAEA,OAAO,MAAMC,UAAoD,GAAI;AACjEC,EAAAA,OAAO,EAAE,MADwD;AAEjEC,EAAAA,MAAM,EAAE;AACJ;AACAC,IAAAA,IAAI,EAAE,EAFF;AAGJ;AACAC,IAAAA,QAAQ,EAAE;AACNH,MAAAA,OAAO,EAAE,QADH;AAENC,MAAAA,MAAM,EAAE;AACJG,QAAAA,MAAM;AACFC,UAAAA,EAAE,EAAE;AACAC,YAAAA,SAAS,EAAE,CACP;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,UAAvC;AAAmDC,cAAAA,MAAM,EAAE,CAAC,oBAAD,EAAuB,MAAvB;AAA3D,aADO,EAEP;AAACH,cAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,UAAvC;AAAmDC,cAAAA,MAAM,EAAE,CAAC,oBAAD,EAAuB,MAAvB;AAA3D,aAFO,EAGP;AAACH,cAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,aAAvC;AAAsDC,cAAAA,MAAM,EAAE,CAAC,qBAAD,EAAwB,MAAxB;AAA9D,aAHO,EAIP;AAACH,cAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,cAAvC;AAAuDC,cAAAA,MAAM,EAAE,CAAC,wBAAD,EAA2B,MAA3B;AAA/D,aAJO,EAKP;AACA;AAACH,cAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,MAAvC;AAA+CC,cAAAA,MAAM,EAAE;AAAvD,aANO,EAQP;AAACA,cAAAA,MAAM,EAAE;AAAT,aARO;AADX;AADF,WAYKjB,aAAa,CAAC,4DAAD,EAA+D,gBAA/D,CAZlB,CADF;AAeJkB,QAAAA,MAAM;AACFN,UAAAA,EAAE,EAAE;AACAO,YAAAA,UAAU,EAAE;AACRF,cAAAA,MAAM,EAAE,kBADA;AAERG,cAAAA,OAAO,EAAExB,MAAM,CAAEmB,OAAD,IAAa;AAAE,uBAAO;AAAEC,kBAAAA,MAAM,EAAED,OAAO,CAACM;AAAlB,iBAAP;AAAsC,eAAtD;AAFP;AADZ;AADF,WAMKtB,YAAY,CAAC,+BAAD,CANjB;AAfF;AAFF,KAJN;AA+BAuB,IAAAA,MAAM,oBAAMzB,OAAO,CAAC,cAAD,EAAgB,iBAAhB,CAAb,CA/BN;AAgCA0B,IAAAA,YAAY,oBAAMzB,WAAW,CAAC,WAAD,EAAc,WAAd,EAA2B,cAA3B,EAA2C,oBAA3C,EAAiE,uBAAjE,EAA0F,gBAA1F,QAAjB,CAhCZ;AAiCA;AACA0B,IAAAA,MAAM,oBAAM3B,OAAO,CAAC,cAAD,EAAgB,iBAAhB,CAAb,CAlCN;AAmCA4B,IAAAA,YAAY,oBAAM3B,WAAW,CAAC,WAAD,EAAc,cAAd,EAA8B,cAA9B,EAA8C,2BAA9C,EAA2E,uBAA3E,EAAoG,gBAApG,UAAjB,CAnCZ;AAoCA;AACA4B,IAAAA,MAAM,oBAAM7B,OAAO,CAAC,wBAAD,EAA2B,iBAA3B,CAAb,CArCN;AAsCA;AACA8B,IAAAA,SAAS;AACLpB,MAAAA,OAAO,EAAE,QADJ;AAELK,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAExB,MAAM,CAAEmB,OAAD,IAAa;AAAE,mBAAO;AAAEa,cAAAA,IAAI,EAAEb,OAAO,CAACM;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERJ,UAAAA,MAAM,EAAE;AAFA;AADZ;AAFC,OAOElB,YAAY,CAAC,4CAAD,CAPd,CAvCT;AAgDA;AACA8B,IAAAA,KAAK,EAAE;AACHtB,MAAAA,OAAO,EAAE,QADN;AAEHC,MAAAA,MAAM,EAAE;AACJsB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpC,IAAI,CAAEoB,OAAD,KAAc;AAACiB,YAAAA,KAAK,EAAC,KAAP;AACtBC,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,qDAA6CnB,OAAO,CAACa,IAArD;AAFiB,WAAd,CAAD,CADP;AAIAhB,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAJJ;AADJ;AAFL,KAjDP;AA4DA;AACAsB,IAAAA,KAAK,EAAE,EA7DP;AAkEAC,IAAAA,IAAI,EAAE,EAlEN;AAoEA;AACAC,IAAAA,QAAQ;AACJzB,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACRF,UAAAA,MAAM,EAAE,kBADA;AAERG,UAAAA,OAAO,EAAExB,MAAM,CAAEmB,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,MAAM,EAAED,OAAO,CAACM;AAAlB,aAAP;AAAsC,WAAtD;AAFP;AADZ;AADA,OAMDtB,YAAY,CAAC,uCAAD,CANX,CArER;AA6EA;AACAuC,IAAAA,YAAY;AACR/B,MAAAA,OAAO,EAAE,QADD;AAERK,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACRF,UAAAA,MAAM,EAAE,MADA;AAERG,UAAAA,OAAO,EAAExB,MAAM,CAAEmB,OAAD,IAAa;AAAE,mBAAO;AAAEwB,cAAAA,IAAI,EAAExB,OAAO,CAACM;AAAhB,aAAP;AAAoC,WAApD;AAFP;AADZ;AAFI,OAODtB,YAAY,CAAC,oBAAD,CAPX,CA9EZ;AAuFA;AACAwC,IAAAA,IAAI,EAAE;AACFhC,MAAAA,OAAO,EAAE,QADP;AAEF;AACIC,MAAAA,MAAM,EAAE;AACJsB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpC,IAAI,CAAEoB,OAAD,KAAc;AACtBkB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,4CAAoCnB,OAAO,CAACwB,IAA5C;AAFiB,WAAd,CAAD,CADP;AAIJ3B,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,gBAAnB;AAAb;AAJA,SADJ;AAOJ2B,QAAAA,QAAQ,EAAE;AACNT,UAAAA,KAAK,EAAEpC,IAAI,CAACO,YAAY,CAAC,sEAAD,CAAb,CADL;AAENU,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAFE;AAPN;AAHV,KAxFN;AAwGA4B,IAAAA,SAAS,EAAE,EAxGX;AA0GA;AACAC,IAAAA,IAAI,EAAE;AACFnC,MAAAA,OAAO,EAAE,QADP;AAEF;AACIC,MAAAA,MAAM,EAAE;AACJsB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE9B,GAAG,CAAC,yDAAD,CADN;AAEJW,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,yBAAnB;AAAb;AAFA,SADJ;AAKJ8B,QAAAA,MAAM,EAAE;AACJZ,UAAAA,KAAK,EAAE9B,GAAG,CAAC,kCAAD,CADN;AAEJW,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAFA;AALJ;AAHV;AA3GN;AAFyD,CAA9D,C,CA+HG;AACE;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEC;AACD;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, promptAndAsk, promptHelpBye, say } from \"./index\";\nimport { openInNewTab } from \"./dmNegative\";\nimport { mapContext } from \"xstate/lib/utils\";\n\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n            // ...\n            \n}\n\nlet num = 0\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                    on: {\n                        ENDSPEECH: [\n                            {cond: (context) => context.option === 'positive', target: [\"#root.dm1.positive\", \"idle\"]},\n                            {cond: (context) => context.option === 'negative', target: [\"#root.dm2.negative\", \"idle\"]},\n                            {cond: (context) => context.option === 'choose_todo', target: [\"#root.dm1.create_do\", \"idle\"]},\n                            {cond: (context) => context.option === 'choose_ideas', target: [\"#root.dm1.create_ideas\", \"idle\"]},\n                            // {cond: (context) => context.option === 'negative', target: [\"#root.dm2.denial\", \"idle\"]},\n                            {cond: (context) => context.option === 'help', target: \"help\"},\n\n                            {target: \".goodbye\"} ]\n                        },\n                        ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\", '#root.dm2.idle')\n                        },\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            query1: {...Queries('conditional2',\"#root.init.help\")},\n            conditional1: {...Conditional('agreement', \"create_do\", 'disagreement', \"#root.dm1.if_ideas\", \"#root.dm1.done.others\", '#root.dm2.idle', `Ok.`)},\n            // ...\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"#root.dm1.done.others\", '#root.dm2.idle', `Cool.`)},\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({delay:12000,\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.annoy'},  \n                        }\n                    }\n            },\n            // ...\n            annoy: {\n\n\n\n            },\n            wait: {},\n\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}. Let me play some music while you are at it. Say 'finished', when you're done` })),\n                            on: { ENDSPEECH: ['#root.dm2.done', '#root.dm1.done']}\n                        },\n                        elevator: {\n                            entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                            }\n                }\n            },\n            idea_wait: {},\n\n            // ...\n            done: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                            on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                    }, \n                        others: {\n                            entry: say(\"Ummm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                            }\n                    }\n                }         \n}})\n\n\n\n          // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n\n            //             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n                        \n            //             {target: \".wait\"}], \n\n            //         WAIT: '.prompt'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Have you done your task yet?\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n            //         },\n            //         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n            //         wait: {\n            //             entry: [\n            //                 say('Hm.')\n            //             ],\n            //             on: {\n            //                 ENDSPEECH: [\n            //                     {cond: () => (num++) <= 2, target: 'prompt'},\n            //                     {target: '#root.dm1.done'}\n            //                 ]\n            //             }\n            //         }\n            //     }\n            // },\n\n\n            // ----\n\n            // quest1: {\n                //     on: {\n                //         RECOGNISED: [\n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                //                 actions: assign((context) => { return { approval: true } }),\n                //                 target: \"#root.dm1.create_do\"},\n            \n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                //                 actions: assign((context) => { return { approval: false} }),\n                //                 target: \"#root.dm1.if_ideas\"},\n\n                //                 {target: \"#root.dm1.done.others\"}\n\n                //                 // {cond: (context) => context.option === 'help', target: '.help'}\n                //                 ]\n                //         },\n                //         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n                //         },\\\n\n\n\n                // ------\n\n                // done: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                //                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                //         }, \n                //             others: {\n                //                 entry: say(\"Ummm, you said something strange\"),\n                //                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                //                 }\n                //         }\n                //     }   "]},"metadata":{},"sourceType":"module"}