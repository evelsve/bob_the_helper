{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"hairdresser\": {\n    person: \"hairdresser\"\n  },\n  \"doctor\": {\n    person: \"doctor\"\n  },\n  \"dentist\": {\n    person: \"dentist\"\n  },\n  \"lawyer\": {\n    person: \"lawyer\"\n  },\n  \"psychotherapist\": {\n    person: \"psychotherapist\"\n  },\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Peter\": {\n    person: \"Peter Horter\"\n  },\n  \"Jack\": {\n    person: \"Jack Tomerson\"\n  },\n  \"Tom\": {\n    person: \"Tom Peterson\"\n  },\n  \"Jill\": {\n    person: \"Jill Panele\"\n  },\n  \"Jane\": {\n    person: \"Jane Mayer\"\n  },\n  \"Anna\": {\n    person: \"Anna Pana\"\n  },\n  \"Lora\": {\n    person: \"Lora Cat\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday next week\": {\n    day: \"Monday next week\"\n  },\n  \"on Tuesday next week\": {\n    day: \"Tuesday next week\"\n  },\n  \"on Wednesday next week\": {\n    day: \"Wednesday next week\"\n  },\n  \"on Thursday next week\": {\n    day: \"Thursday next week\"\n  },\n  \"on Friday next week\": {\n    day: \"Friday next week\"\n  },\n  \"on Saturday next week\": {\n    day: \"Saturday next week\"\n  },\n  \"on Sunday next week\": {\n    day: \"Sunday next week\"\n  },\n  \"8\": {\n    time: \"eight\"\n  },\n  \"9\": {\n    time: \"nine\"\n  },\n  \"10\": {\n    time: \"ten\"\n  },\n  \"11\": {\n    time: \"eleven\"\n  },\n  \"at noon\": {\n    time: \"twelve\"\n  },\n  \"12\": {\n    time: \"twelve\"\n  },\n  \"1\": {\n    time: \"thirteen\"\n  },\n  \"2\": {\n    time: \"fourteen\"\n  },\n  \"3\": {\n    time: \"fifteen\"\n  },\n  \"4\": {\n    time: \"sixteen\"\n  },\n  \"5\": {\n    time: \"seventeen\"\n  },\n  \"6\": {\n    time: \"six\"\n  },\n  \"7\": {\n    time: \"seven\"\n  },\n  \"8 15\": {\n    time: \"eight fifteen\"\n  },\n  \"9 15\": {\n    time: \"nine fifteen\"\n  },\n  \"10 15\": {\n    time: \"ten fifteen\"\n  },\n  \"11 15\": {\n    time: \"eleven fifteen\"\n  },\n  \"12 15\": {\n    time: \"twelve fifteen\"\n  },\n  \"1 15\": {\n    time: \"one fifteen\"\n  },\n  \"2 15\": {\n    time: \"two fifteen\"\n  },\n  \"3 15\": {\n    time: \"three fifteen\"\n  },\n  \"4 15\": {\n    time: \"four fifteen\"\n  },\n  \"5 15\": {\n    time: \"five fifteen\"\n  },\n  \"6 15\": {\n    time: \"six fifteen\"\n  },\n  \"7 15\": {\n    time: \"seven fifteen\"\n  },\n  \"8 30\": {\n    time: \"half past eight\"\n  },\n  \"9 30\": {\n    time: \"half past nine\"\n  },\n  \"10 30\": {\n    time: \"half past ten\"\n  },\n  \"11 30\": {\n    time: \"half past eleven\"\n  },\n  \"half past twelve\": {\n    time: \"half past twelve\"\n  },\n  \"12 30 \": {\n    time: \"half past twlve\"\n  },\n  \"1 30\": {\n    time: \"half past one\"\n  },\n  \"2 30\": {\n    time: \"half past two\"\n  },\n  \"3 30\": {\n    time: \"half past three\"\n  },\n  \"4 30\": {\n    time: \"half past four\"\n  },\n  \"5 30\": {\n    time: \"half past five\"\n  },\n  \"6 30\": {\n    time: \"half past six\"\n  },\n  \"7 30\": {\n    time: \"half past seven\"\n  },\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n};\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    idle: {},\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Ok. Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"approval\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" it is. On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    approval: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"summary_whole\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Great. \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"summary_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What time is your meeting?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    summary_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    summary_whole: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    created: {\n      initial: \"prompt\",\n      states: {\n        idle: {},\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appoinment has been created. Have a nice day!\"\n          })),\n          on: {\n            ENDSPEECH: \"idle\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","approval","dmMachine1","initial","states","idle","welcome","on","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","undefined","summary_time","summary_whole","created"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { \n    [index: string]: {\n        appointment?: string,\n        to_do?: string,\n        timer?: string,\n        person?: string,\n        day?: string,\n        time?: string,\n        approval?:  boolean,\n    }\n         } = \n         {\n            \"hairdresser\": { person: \"hairdresser\" },\n            \"doctor\": { person: \"doctor\" },\n            \"dentist\": { person: \"dentist\" },\n            \"lawyer\": { person: \"lawyer\" },\n            \"psychotherapist\": { person: \"psychotherapist\" },\n            \"John\": { person: \"John Appleseed\" },\n            \"Peter\": { person: \"Peter Horter\" },\n            \"Jack\": { person: \"Jack Tomerson\" },\n            \"Tom\": { person: \"Tom Peterson\" },\n            \"Jill\": { person: \"Jill Panele\" },\n            \"Jane\": { person: \"Jane Mayer\" },\n            \"Anna\": { person: \"Anna Pana\" },\n            \"Lora\": { person: \"Lora Cat\" },\n            \"on Monday\": { day: \"Monday\" },\n            \"on Tuesday\": { day: \"Tuesday\" },\n            \"on Wednesday\": { day: \"Wednesday\" },\n            \"on Thursday\": { day: \"Thursday\" },\n            \"on Friday\": { day: \"Friday\" },\n            \"on Saturday\": { day: \"Saturday\" },\n            \"on Sunday\": { day: \"Sunday\" },\n            \"on Monday next week\": { day: \"Monday next week\" },\n            \"on Tuesday next week\": { day: \"Tuesday next week\" },\n            \"on Wednesday next week\": { day: \"Wednesday next week\" },\n            \"on Thursday next week\": { day: \"Thursday next week\" },\n            \"on Friday next week\": { day: \"Friday next week\" },\n            \"on Saturday next week\": { day: \"Saturday next week\" },\n            \"on Sunday next week\": { day: \"Sunday next week\" },\n            \"8\": { time: \"eight\" },\n            \"9\": { time: \"nine\" },\n            \"10\": { time: \"ten\" },\n            \"11\": { time: \"eleven\" },\n            \"at noon\": { time: \"twelve\" },\n            \"12\": { time: \"twelve\" },\n            \"1\": { time: \"thirteen\" },\n            \"2\": { time: \"fourteen\" },\n            \"3\": { time: \"fifteen\" },\n            \"4\": { time: \"sixteen\" },\n            \"5\": { time: \"seventeen\" },\n            \"6\": { time: \"six\" },\n            \"7\": { time: \"seven\" },\n            \"8 15\": { time: \"eight fifteen\" },\n            \"9 15\": { time: \"nine fifteen\" },\n            \"10 15\": { time: \"ten fifteen\" },\n            \"11 15\": { time: \"eleven fifteen\" },\n            \"12 15\": { time: \"twelve fifteen\" },\n            \"1 15\": { time: \"one fifteen\" },\n            \"2 15\": { time: \"two fifteen\" },\n            \"3 15\": { time: \"three fifteen\" },\n            \"4 15\": { time: \"four fifteen\" },\n            \"5 15\": { time: \"five fifteen\" },\n            \"6 15\": { time: \"six fifteen\" },\n            \"7 15\": { time: \"seven fifteen\" },\n            \"8 30\": { time: \"half past eight\" },\n            \"9 30\": { time: \"half past nine\" },\n            \"10 30\": { time: \"half past ten\" },\n            \"11 30\": { time: \"half past eleven\" },\n            \"half past twelve\": { time: \"half past twelve\" },\n            \"12 30 \": { time: \"half past twlve\" },\n            \"1 30\": { time: \"half past one\" },\n            \"2 30\": { time: \"half past two\" },\n            \"3 30\": { time: \"half past three\" },\n            \"4 30\": { time: \"half past four\" },\n            \"5 30\": { time: \"half past five\" },\n            \"6 30\": { time: \"half past six\" },\n            \"7 30\": { time: \"half past seven\" },\n            \"of course\": { approval: true },\n            \"yes\": { approval: true },\n            \"yeah\": { approval: true },\n            \"yup\": { approval: true },\n            \"sure\": { approval: true },\n            \"no\": { approval: false },\n            \"nah\": { approval: false },\n            \"nope\": { approval: false },\n         }\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {},\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Ok. Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                        target: \"approval\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} it is. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        approval: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        actions: assign((context) => { return { approval: true } }),\n                        target: \"summary_whole\"\n                    },\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        actions: assign((context) => { return { approval: false} }),\n                        target: \"time\"\n                    },\n                    { target: \".nomatch\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Great. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                        target: \"summary_time\"\n                    },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        summary_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        actions: assign((context) => { return { approval: true } }),\n                        target: \"created\"\n                    },\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        actions: assign((context) => { return { approval: false } }),\n                        target: \"who\"\n                    },\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        summary_whole: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        actions: assign((context) => { return { approval: true } }),\n                        target: \"created\"\n                    },\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        actions: assign((context) => { return { approval: false } }),\n                        target: \"who\"\n                    },\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }    \n        },\n        created: {\n            initial: \"prompt\",\n            states: {\n                idle: {},\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appoinment has been created. Have a nice day!`\n                    })),\n                     on: { ENDSPEECH: \"idle\" }\n                    },\n                }    \n            },\n    }   \n})\n"]},"metadata":{},"sourceType":"module"}