{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { nluRequest, misUnderstood } from \"./index\";\nconst grammar = {\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n};\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    start_pos: {\n      initial: \"chore_idea\",\n      states: {\n        chore_idea: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: \"query\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: \"#root.initial_welcome.goodbye\"\n            }, {\n              cond: context => context.recResult === \"help\",\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, misUnderstood(\"Would you like to do a chore?\", [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])),\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (context, event) => console.log(event.data)],\n              target: \"#root.initial_welcome.distributor\"\n            },\n            onError: {\n              target: '#root.initial_welcome.goodbye',\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'create_ideas',\n              target: \"ideas\"\n            }, {\n              cond: context => context.option === 'create_todo',\n              target: \"to_do\"\n            }, {\n              target: \"others\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Understood.\"\n              }))\n            }\n          }\n        },\n        others: {},\n        to_do: {},\n        ideas: {}\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","nluRequest","misUnderstood","grammar","approval","dmMachine1","initial","states","idle","start_pos","chore_idea","on","RECOGNISED","cond","context","recResult","undefined","target","query","invoke","id","src","event","option","onDone","actions","data","intent","name","console","log","onError","distributor","ENDSPEECH","prompt","entry","type","value","others","to_do","ideas"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\nimport { list } from \"./todo_list\"\n\n\nconst grammar: { [index: string]: {\n    approval?:  boolean,\n}} = {\n\"of course\": { approval: true },\n\"yes\": { approval: true },\n\"yeah\": { approval: true },\n\"yup\": { approval: true },\n\"sure\": { approval: true },\n\"no\": { approval: false },\n\"nah\": { approval: false },\n\"nope\": { approval: false }}\n\n\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        start_pos: {\n            initial: \"chore_idea\",\n            states: {\n                chore_idea: {\n                         on: {\n                            RECOGNISED: [\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                target: \"query\"},\n\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                target: \"#root.initial_welcome.goodbye\"},\n\n                                {cond: (context) => context.recResult === \"help\", target: \".help\"},\n\n                                { target: \".nomatch\" }]},\n\n            ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n            },\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.option),\n                    onDone: {\n                        actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                        (context: SDSContext, event: any) => console.log(event.data)],\n                        target: \"#root.initial_welcome.distributor\"\n                    },\n                    onError: {\n                        target: '#root.initial_welcome.goodbye',\n                        actions: (context, event) => console.log(event.data)}\n                }\n            },\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        {cond: (context) => context.option === 'create_ideas', target: \"ideas\"},\n                    \n                        {cond: (context) => context.option === 'create_todo', target: \"to_do\"},\n                        \n                        { target: \"others\" }]\n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({type: \"SPEAK\", value: `Understood.`})),\n                    }\n                }\n            },\n            others: {\n\n            },\n            to_do: {\n            },\n            ideas: {}\n\n\n\n }}}})\n"]},"metadata":{},"sourceType":"module"}