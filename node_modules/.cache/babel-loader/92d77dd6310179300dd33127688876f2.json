{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { say, listen } from \"./index\";\n// >= 4.6.0\n// FOR ABSTRACTING\nexport function misUnderstood(saythis, on_help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: send(_context => ({\n          type: \"SPEAK\",\n          value: saythis\n        })),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"Sorry, I do not understand.\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(\"We may be miscommunicating. Let's take a step back\"),\n        on: {\n          ENDSPEECH: on_help\n        }\n      }\n    }\n  };\n}\nexport function Endings(saythis, on_end) {\n  return {\n    initial: \"prompt\",\n    states: {\n      idle: {},\n      prompt: {\n        entry: send(context => ({\n          type: \"SPEAK\",\n          value: saythis\n        })),\n        on: {\n          ENDSPEECH: on_end\n        }\n      }\n    }\n  };\n} // GRAMMAR\n\n_c = Endings;\nconst grammar = {\n  // ___________________________________________\n  \"hairdresser\": {\n    person: \"hairdresser\"\n  },\n  \"doctor\": {\n    person: \"doctor\"\n  },\n  \"dentist\": {\n    person: \"dentist\"\n  },\n  \"lawyer\": {\n    person: \"lawyer\"\n  },\n  \"psychotherapist\": {\n    person: \"psychotherapist\"\n  },\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Peter\": {\n    person: \"Peter Horter\"\n  },\n  \"Jack\": {\n    person: \"Jack Tomerson\"\n  },\n  \"Tom\": {\n    person: \"Tom Peterson\"\n  },\n  \"Jill\": {\n    person: \"Jill Panele\"\n  },\n  \"Jane\": {\n    person: \"Jane Mayer\"\n  },\n  \"Anna\": {\n    person: \"Anna Pana\"\n  },\n  \"Lora\": {\n    person: \"Lora Cat\"\n  },\n  // ___________________________________________\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday next week\": {\n    day: \"Monday next week\"\n  },\n  \"on Tuesday next week\": {\n    day: \"Tuesday next week\"\n  },\n  \"on Wednesday next week\": {\n    day: \"Wednesday next week\"\n  },\n  \"on Thursday next week\": {\n    day: \"Thursday next week\"\n  },\n  \"on Friday next week\": {\n    day: \"Friday next week\"\n  },\n  \"on Saturday next week\": {\n    day: \"Saturday next week\"\n  },\n  \"on Sunday next week\": {\n    day: \"Sunday next week\"\n  },\n  // ___________________________________________\n  \"8\": {\n    time: \"eight\"\n  },\n  \"9\": {\n    time: \"nine\"\n  },\n  \"10\": {\n    time: \"ten\"\n  },\n  \"11\": {\n    time: \"eleven\"\n  },\n  \"at noon\": {\n    time: \"twelve\"\n  },\n  \"12\": {\n    time: \"twelve\"\n  },\n  \"1\": {\n    time: \"thirteen\"\n  },\n  \"2\": {\n    time: \"fourteen\"\n  },\n  \"3\": {\n    time: \"fifteen\"\n  },\n  \"4\": {\n    time: \"sixteen\"\n  },\n  \"5\": {\n    time: \"seventeen\"\n  },\n  \"6\": {\n    time: \"six\"\n  },\n  \"7\": {\n    time: \"seven\"\n  },\n  \"8 15\": {\n    time: \"eight fifteen\"\n  },\n  \"9 15\": {\n    time: \"nine fifteen\"\n  },\n  \"10 15\": {\n    time: \"ten fifteen\"\n  },\n  \"11 15\": {\n    time: \"eleven fifteen\"\n  },\n  \"12 15\": {\n    time: \"twelve fifteen\"\n  },\n  \"1 15\": {\n    time: \"one fifteen\"\n  },\n  \"2 15\": {\n    time: \"two fifteen\"\n  },\n  \"3 15\": {\n    time: \"three fifteen\"\n  },\n  \"4 15\": {\n    time: \"four fifteen\"\n  },\n  \"5 15\": {\n    time: \"five fifteen\"\n  },\n  \"6 15\": {\n    time: \"six fifteen\"\n  },\n  \"7 15\": {\n    time: \"seven fifteen\"\n  },\n  \"8 30\": {\n    time: \"half past eight\"\n  },\n  \"9 30\": {\n    time: \"half past nine\"\n  },\n  \"10 30\": {\n    time: \"half past ten\"\n  },\n  \"11 30\": {\n    time: \"half past eleven\"\n  },\n  \"half past twelve\": {\n    time: \"half past twelve\"\n  },\n  \"12 30 \": {\n    time: \"half past twlve\"\n  },\n  \"1 30\": {\n    time: \"half past one\"\n  },\n  \"2 30\": {\n    time: \"half past two\"\n  },\n  \"3 30\": {\n    time: \"half past three\"\n  },\n  \"4 30\": {\n    time: \"half past four\"\n  },\n  \"5 30\": {\n    time: \"half past five\"\n  },\n  \"6 30\": {\n    time: \"half past six\"\n  },\n  \"7 30\": {\n    time: \"half past seven\"\n  },\n  // ___________________________________________\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n}; // TIMING \n// -----\n\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    who: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, misUnderstood(\"Who are you meeting with?\", \"#root.initial_welcome.help\")),\n    // ...\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"approval\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, // {cond: (context) => ,\n        // target: \".prompt\" },\n        {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" it is. On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.who\"\n          }\n        }\n      } // ...misUnderstood(`OK. ${context.person} it is. On which day is your meeting?`, \"#root.dm1.who\"),\n\n    },\n    // ...\n    approval: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"summary_whole\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"time\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      // ...misUnderstood(`Ok, meeting on ${context.day}. Will it take the whole day?`, \"#root.dm1.day\")},\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Ok, meeting on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.day\"\n          }\n        }\n      }\n    },\n    // ...\n    time: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"summary_time\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, misUnderstood(\"What time is your meeting?\", \"#root.dm1.approval\")),\n    // ...\n    summary_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.approval\"\n          }\n        }\n      }\n    },\n    // ...\n    summary_whole: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          cond: context => context.recResult === \"help\",\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.approval\"\n          }\n        }\n      }\n    },\n    created: _objectSpread(_objectSpread({}, Endings(\"Your appoinment has been created\", \"#root.initial_welcome.goodbye\")), {}, {\n      always: \"idle\"\n    })\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Endings\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmAppointment.ts"],"names":["send","assign","say","listen","misUnderstood","saythis","on_help","initial","states","prompt","entry","_context","type","value","on","ENDSPEECH","ask","nomatch","help","Endings","on_end","idle","context","grammar","person","day","time","approval","dmMachine1","who","RECOGNISED","cond","recResult","actions","target","undefined","summary_time","summary_whole","created","always"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign, interpret } from \"xstate\";\nimport {say, listen} from \"./index\";\nimport { SimulatedClock } from 'xstate/lib/SimulatedClock'; // >= 4.6.0\n\n\n// FOR ABSTRACTING\n\nexport function misUnderstood(saythis: string, on_help:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n        prompt: {\n            entry: send((_context) => ({\n                type: \"SPEAK\",\n                value: (saythis)\n            })),\n            on: { ENDSPEECH: \"ask\" }\n        },\n        ask: {\n            entry: listen()\n        },\n        nomatch: {\n            entry: say(\"Sorry, I do not understand.\"),\n            on: { ENDSPEECH: \"prompt\" }\n        },\n        help: {\n            entry: say(\"We may be miscommunicating. Let's take a step back\"),\n            on: { ENDSPEECH: on_help }\n        }\n    }}\n)}\n\nexport function Endings(saythis: string, on_end:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({        \n        initial: \"prompt\",\n        states: {\n            idle: {},\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: saythis})),\n                 on: { ENDSPEECH: on_end }\n                }\n            }    \n        })}\n\n// GRAMMAR\n\nconst grammar: { \n    [index: string]: {\n        appointment?: string,\n        to_do?: string,\n        timer?: string,\n        person?: string,\n        day?: string,\n        time?: string,\n        approval?:  boolean,\n    }} =  {\n            // ___________________________________________\n            \"hairdresser\": { person: \"hairdresser\" },\n            \"doctor\": { person: \"doctor\" },\n            \"dentist\": { person: \"dentist\" },\n            \"lawyer\": { person: \"lawyer\" },\n            \"psychotherapist\": { person: \"psychotherapist\" },\n            \"John\": { person: \"John Appleseed\" },\n            \"Peter\": { person: \"Peter Horter\" },\n            \"Jack\": { person: \"Jack Tomerson\" },\n            \"Tom\": { person: \"Tom Peterson\" },\n            \"Jill\": { person: \"Jill Panele\" },\n            \"Jane\": { person: \"Jane Mayer\" },\n            \"Anna\": { person: \"Anna Pana\" },\n            \"Lora\": { person: \"Lora Cat\" },\n            // ___________________________________________\n            \"on Monday\": { day: \"Monday\" },\n            \"on Tuesday\": { day: \"Tuesday\" },\n            \"on Wednesday\": { day: \"Wednesday\" },\n            \"on Thursday\": { day: \"Thursday\" },\n            \"on Friday\": { day: \"Friday\" },\n            \"on Saturday\": { day: \"Saturday\" },\n            \"on Sunday\": { day: \"Sunday\" },\n            \"on Monday next week\": { day: \"Monday next week\" },\n            \"on Tuesday next week\": { day: \"Tuesday next week\" },\n            \"on Wednesday next week\": { day: \"Wednesday next week\" },\n            \"on Thursday next week\": { day: \"Thursday next week\" },\n            \"on Friday next week\": { day: \"Friday next week\" },\n            \"on Saturday next week\": { day: \"Saturday next week\" },\n            \"on Sunday next week\": { day: \"Sunday next week\" },\n            // ___________________________________________\n            \"8\": { time: \"eight\" },\n            \"9\": { time: \"nine\" },\n            \"10\": { time: \"ten\" },\n            \"11\": { time: \"eleven\" },\n            \"at noon\": { time: \"twelve\" },\n            \"12\": { time: \"twelve\" },\n            \"1\": { time: \"thirteen\" },\n            \"2\": { time: \"fourteen\" },\n            \"3\": { time: \"fifteen\" },\n            \"4\": { time: \"sixteen\" },\n            \"5\": { time: \"seventeen\" },\n            \"6\": { time: \"six\" },\n            \"7\": { time: \"seven\" },\n            \"8 15\": { time: \"eight fifteen\" },\n            \"9 15\": { time: \"nine fifteen\" },\n            \"10 15\": { time: \"ten fifteen\" },\n            \"11 15\": { time: \"eleven fifteen\" },\n            \"12 15\": { time: \"twelve fifteen\" },\n            \"1 15\": { time: \"one fifteen\" },\n            \"2 15\": { time: \"two fifteen\" },\n            \"3 15\": { time: \"three fifteen\" },\n            \"4 15\": { time: \"four fifteen\" },\n            \"5 15\": { time: \"five fifteen\" },\n            \"6 15\": { time: \"six fifteen\" },\n            \"7 15\": { time: \"seven fifteen\" },\n            \"8 30\": { time: \"half past eight\" },\n            \"9 30\": { time: \"half past nine\" },\n            \"10 30\": { time: \"half past ten\" },\n            \"11 30\": { time: \"half past eleven\" },\n            \"half past twelve\": { time: \"half past twelve\" },\n            \"12 30 \": { time: \"half past twlve\" },\n            \"1 30\": { time: \"half past one\" },\n            \"2 30\": { time: \"half past two\" },\n            \"3 30\": { time: \"half past three\" },\n            \"4 30\": { time: \"half past four\" },\n            \"5 30\": { time: \"half past five\" },\n            \"6 30\": { time: \"half past six\" },\n            \"7 30\": { time: \"half past seven\" },\n            // ___________________________________________\n            \"of course\": { approval: true },\n            \"yes\": { approval: true },\n            \"yeah\": { approval: true },\n            \"yup\": { approval: true },\n            \"sure\": { approval: true },\n            \"no\": { approval: false },\n            \"nah\": { approval: false },\n            \"nope\": { approval: false }}\n\n\n// TIMING \n\n\n\n\n\n\n\n\n// -----\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"},\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }],\n            },\n            ...misUnderstood(`Who are you meeting with?`, \"#root.initial_welcome.help\"),\n        },\n        // ...\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"approval\" },\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                    // {cond: (context) => ,\n                    // target: \".prompt\" },\n\n                    { target: \".nomatch\" } \n                ]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} it is. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.who\" }\n                }\n            },\n            // ...misUnderstood(`OK. ${context.person} it is. On which day is your meeting?`, \"#root.dm1.who\"),\n        },\n        // ...\n        approval: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"summary_whole\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false} }),\n                    target: \"time\"},\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }\n                ]\n                },\n                // ...misUnderstood(`Ok, meeting on ${context.day}. Will it take the whole day?`, \"#root.dm1.day\")},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, meeting on ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.day\" }\n                }\n            }\n        },\n        // ...\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"summary_time\"},\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }]\n            },\n        ...misUnderstood(`What time is your meeting?`, \"#root.dm1.approval\")},\n        // ...\n        summary_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"created\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false } }),\n                    target: \"who\"},\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.approval\" }\n                }\n            }\n        },\n        // ...\n        summary_whole: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"created\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false } }),\n                    target: \"who\"},\n\n                    {cond: (context) => context.recResult === \"help\",\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.approval\" }\n                }\n            }    \n        },\n        created: {...Endings(\"Your appoinment has been created\",\"#root.initial_welcome.goodbye\"), \n        always: \"idle\"\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}