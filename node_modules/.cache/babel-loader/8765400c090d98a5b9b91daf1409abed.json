{"ast":null,"code":"import _objectSpread from\"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign}from\"xstate\";import{Queries,bye,Conditional,promptAndAsk,finished,promptHelpBye,say,grammar}from\"./index\";// export function promptHelpBye(prompt: string, idled: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: say(prompt),\n//                 on: { ENDSPEECH: 'ask' }\n//             },\n//             ask: {entry: send('LISTEN')\n//             },\n//             help: {\n//                 entry: say(\"We may be miscommunicating.\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.help\"] }\n//             },\n//             goodbye:{\n//                 entry: say(\"\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.goodbye\" ] }\n//             }\n//     }}\n// )}\nlet num=0;export const dmMachine1={// NOTE: regarding the queries:\n// There are more efficient ways to implement them, however, \n// Yet we decided to have a grammar as well as querying in order to see\n// which implementation will yield better results\ninitial:'idle',states:{// ...\nidle:{},// ...\npositive:{initial:\"quest1\",states:{// .... // ...\nquest1:_objectSpread({on:{RECOGNISED:[{cond:context=>grammar[context.recResult]!==undefined&&grammar[context.recResult].approval===true,target:\"#root.dm1.create_do\"},{cond:context=>grammar[context.recResult]!==undefined&&grammar[context.recResult].approval===false,target:\"#root.dm1.if_ideas\"},{cond:context=>bye[context.recResult]!==undefined&&bye[context.recResult].bye===false,target:\"#root.dm1.if_ideas\"},// {cond: (context) => context.option === 'help', target: \".help\"},\n// {cond: (context) => context.option === 'bye', target: \".goodbye\"},\n{target:'#root.dm1.others'}]}},promptAndAsk(\"I suppose you could do something productive. Do you agree?\")),// .... // ...\nquest2:_objectSpread({on:{RECOGNISED:{target:'#root.dm1.query3',actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"So what would you like to do?\"))}},// ....\nquery1:_objectSpread({},Queries('conditional1',\"#root.init.help\")),// ....\nconditional1:_objectSpread({},Conditional('agree',\"create_do\",'disagree',\"#root.dm1.if_ideas\",\"#root.dm1.others\",'#root.dm1.idle',\"Ok.\")),// ....\nquery3:_objectSpread({},Queries(\"#root.init.distributor\",\"#root.init.help\")),//...\ncreate_do:_objectSpread({initial:\"prompt\",on:{RECOGNISED:{actions:assign(context=>{return{task:context.recResult};}),target:\"to_do\"}}},promptHelpBye(\"Tell me the things you have to accomplish.\",'#root.dm1.idle')),// ...\nto_do:{initial:\"prompt\",states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Now go and complete the following tasks: \".concat(context.task)})),on:{ENDSPEECH:'#root.dm1.wait'}}}},// ...\nif_ideas:_objectSpread({// Note to self: help/bye implemented (uses conditional)\non:{RECOGNISED:[{target:'#root.dm1.query2',actions:assign(context=>{return{option:context.recResult};})},{target:'#root.dm1.others'}]}},promptAndAsk(\"Then how about working on your ideas?\")),// ....\nquery2:_objectSpread({},Queries('conditional2',\"#root.init.help\")),// ....\nconditional2:_objectSpread({},Conditional('agree',\"create_ideas\",'disagree',\"#root.dm1.positive.quest2\",\"#root.dm1.others\",'#root.dm2.idle',\"Cool.\")),// ...\ncreate_ideas:_objectSpread({initial:\"prompt\",on:{RECOGNISED:{target:\"idea\",actions:assign(context=>{return{idea:context.recResult};})}}},promptAndAsk(\"Tell me your idea.\")),// ...\nidea:{initial:\"prompt\",// on: {ENDSPEECH: ['#root.dm1.idle']},\nstates:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"You should work on your idea of \".concat(context.idea,\".\")})),on:{ENDSPEECH:'#root.dm1.wait'}}}},// ...\nwait:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>finished[context.recResult]!==undefined&&finished[context.recResult].finished===true,target:\"done\"},{cond:context=>finished[context.recResult]!==undefined&&finished[context.recResult].finished===false,target:\"wait\"},{target:'wait'}]}},promptAndAsk(\"Say 'finished', when you're done\")),// ...\ndone:{initial:\"prompt\",states:{prompt:{entry:say(\"Good job. Time to relax.\"),on:{ENDSPEECH:{target:'#root.dm1.positive.quest2'}}}}},// ...\nothers:{initial:\"prompt\",// on: {ENDSPEECH: '#root.goodbbye'},\nstates:{prompt:{entry:say(\"Umm, you said something strange\"),on:{ENDSPEECH:'#root.dm1.positive.quest2'}}}}}};// ONLY DRAFTS\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n// annoy:{\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//             target: \"done\"},\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//             target: \".wait\"}],\n//         // WAIT: '.wait'\n//         }\n//     },\n// ...\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n//             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n//             {target: \".wait\"}], \n//         WAIT: '.prompt'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Have you done your task yet?\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n//         },\n//         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n//         wait: {\n//             entry: [\n//                 say('Hm.')\n//             ],\n//             on: {\n//                 ENDSPEECH: [\n//                     {cond: () => (num++) <= 2, target: 'prompt'},\n//                     {target: '#root.dm1.done'}\n//                 ]\n//             }\n//         }\n//     }\n// },\n// ----\n// quest1: {\n//     on: {\n//         RECOGNISED: [\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//                 actions: assign((context) => { return { approval: true } }),\n//                 target: \"#root.dm1.create_do\"},\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//                 actions: assign((context) => { return { approval: false} }),\n//                 target: \"#root.dm1.if_ideas\"},\n//                 {target: \"#root.dm1.done.others\"}\n//                 // {cond: (context) => context.option === 'help', target: '.help'}\n//                 ]\n//         },\n//         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n//         },\\\n// ------\n// done: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n//                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n//         }, \n//             others: {\n//                 entry: say(\"Ummm, you said something strange\"),\n//                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n//                 }\n//         }\n//     }   \n// ------\n// idea: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: send((context) => ({\n//                     type: \"SPEAK\",\n//                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n//                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n//             // },\n//     //         elevator: {\n//     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n//     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n//                 }\n//     }\n// }\n// ------\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: {\n//             target: \"conditional3\",\n//             actions: assign((context) => { return { option: context.recResult } }),\n//         },\n//         WAIT: 'wait'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Let me know when you're done.\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [\n//                 send('LISTEN'),\n//                 send('WAIT', {delay: 10000})\n//             ]\n//         }\n//     }\n// },\n// ...\n// wait: {\n//     entry: [say('Have you done your task yet?')],\n//     on: {\n//         ENDSPEECH: [\n//             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n//             {target: '#root.dm1.idea_wait'}\n//         ]\n//     }\n// },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n// -----\n// ...\n// full_annoy:{\n//     initial: 'annoy',\n//     on: { \n//         // RECOGNISED: {\n//         //         cond: (context) => help_commands.includes(context.recResult),\n//         //         target: '#root.init.help'\n//         //             },\n//         MAXSPEECH: [\n//             { \n//                 cond: (context) => context.count < 5,\n//                 target: '#root.dm1.idea_wait'},\n//                 {cond: (context) => context.count == null,\n//                 actions: assign((context)=>{return {count: Number(0)}}),\n//                 target: '#root.dm1.maxspeech'}],\n//             },\n//     states:{\n//         hist:{type: 'history'},\n//         // .... // ...\n//         annoy: {\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n//                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n//                     target: \"#root.dm1.done\"}]\n//                 // },\n//                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n//                 //     target: \".nomatch\" }]\n//             },\n//             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n//         }\n// },\n// // ....\n// },\n// // ... \n// maxspeech:{\n//     initial: 'prompt',\n//     on: {\n//         ENDSPEECH: {\n//             actions: assign((context)=> {return {count: context.count+1 }}),\n//             target: 'full_annoy.hist'\n//                 }\n//             },\n//             // target: 'fill_appointment_info.hist'\n//         states: {\n//             prompt: {entry: say('I AM A STUPID BOT ')}\n//     }\n// },\n// ...\n// ..\n//     wait: {\n//         initial: 'prompt',\n//         on: { ENDSPEECH: '#root.dm1.annoy'},\n//         states: {\n//             prompt: {\n//                 entry: say(\"M.\"),\n//                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n//             },\n//             // ask: {\n//             //     entry: [\n//             //         send('LISTEN'),\n//             //         send('WAIT', {delay: 10000})\n//             //     ]}\n//             }\n// },\n//     // ...\n//     annoy: {\n//         initial: \"prompt\",\n//         on: {\n//             RECOGNISED: {\n//                 target: \"conditional3\",\n//                 actions: assign((context) => { return { option: context.recResult } }),\n//             },\n//             WAIT: 'wait'\n//         },\n//         states: {\n//             prompt: {\n//                 entry: say(\"Have you finished your task?\"),\n//                 on: { ENDSPEECH: \"ask\" }\n//             },\n//             ask: {\n//                 entry: [\n//                     send('LISTEN'),\n//                     send('WAIT', {delay: 10000})\n//                 ]\n//             }\n//         }\n//     },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","bye","Conditional","promptAndAsk","finished","promptHelpBye","say","grammar","num","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","recResult","undefined","approval","target","quest2","actions","option","query1","conditional1","query3","create_do","task","to_do","prompt","entry","type","value","ENDSPEECH","if_ideas","query2","conditional2","create_ideas","idea","wait","done","others"],"mappings":"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AAO,CAAE,QADP,CAEEC,MAAM,CAAE,CACJqB,MAAM,CAAE,CACJC,KAAK,CAAE3B,GAAG,CAAC,0BAAD,CADN,CAEJS,EAAE,CAAE,CAAEqB,SAAS,CAAE,CAACd,MAAM,CAAE,2BAAT,CAAb,CAFA,CADJ,CAFV,CAzHN,CAkIA;AACAsB,MAAM,CAAE,CACJlC,OAAO,CAAE,QADL,CAEJ;AACIC,MAAM,CAAE,CACJqB,MAAM,CAAE,CACJC,KAAK,CAAE3B,GAAG,CAAC,iCAAD,CADN,CAEJS,EAAE,CAAE,CAAEqB,SAAS,CAAE,2BAAb,CAFA,CADJ,CAHR,CAnIR,CANyD,CAA9D,CAqKP;AAKA;AAEU;AACE;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEC;AACD;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, bye, Conditional, promptAndAsk, finished, promptHelpBye, say, grammar } from \"./index\";\n\n\n\n\n\n\n// export function promptHelpBye(prompt: string, idled: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: say(prompt),\n//                 on: { ENDSPEECH: 'ask' }\n//             },\n//             ask: {entry: send('LISTEN')\n//             },\n//             help: {\n//                 entry: say(\"We may be miscommunicating.\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.help\"] }\n//             },\n//             goodbye:{\n//                 entry: say(\"\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.goodbye\" ] }\n//             }\n//     }}\n// )}\n\n\n\n\n\nlet num = 0\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    // NOTE: regarding the queries:\n    // There are more efficient ways to implement them, however, \n    // Yet we decided to have a grammar as well as querying in order to see\n    // which implementation will yield better results\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                // .... // ...\n                quest1: {\n                    on: {\n                        RECOGNISED: \n                            [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"#root.dm1.create_do\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"#root.dm1.if_ideas\"},\n\n                            {cond: (context) => bye[context.recResult] !== undefined && bye[context.recResult].bye === false,\n                            target: \"#root.dm1.if_ideas\"},\n\n                            // {cond: (context) => context.option === 'help', target: \".help\"},\n                            // {cond: (context) => context.option === 'bye', target: \".goodbye\"},\n                            {target:'#root.dm1.others'}\n                            ]\n                        },\n                    ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                },\n                // .... // ...\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            // ....\n            query1: {...Queries('conditional1',\"#root.init.help\")},\n            // ....\n            conditional1: {...Conditional('agree', \"create_do\", 'disagree', \"#root.dm1.if_ideas\", \"#root.dm1.others\", '#root.dm1.idle', `Ok.`)},\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: \n                        {actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptHelpBye(\"Tell me the things you have to accomplish.\", '#root.dm1.idle')\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'},  \n                        }\n                    }\n            },\n            // ...\n            if_ideas: {\n                // Note to self: help/bye implemented (uses conditional)\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } })},\n                        \n                        {target:'#root.dm1.others'}\n                    ]},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ....\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            // ....\n            conditional2: {...Conditional('agree', \"create_ideas\", 'disagree', \"#root.dm1.positive.quest2\", \"#root.dm1.others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}.` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'}\n                            }\n                }\n            },\n            // ...\n            wait: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => finished[context.recResult] !== undefined && finished[context.recResult].finished === true,\n                        target: \"done\"},\n\n                        {cond: (context) => finished[context.recResult] !== undefined && finished[context.recResult].finished === false,\n                        target: \"wait\"},\n                        {target: 'wait'}]  \n                },\n            ...promptAndAsk(\"Say 'finished', when you're done\")\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: say(\"Good job. Time to relax.\"),\n                            on: { ENDSPEECH: {target: '#root.dm1.positive.quest2'}},\n                        }\n                    }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: '#root.goodbbye'},\n                    states: {\n                        prompt: {\n                            entry: say(\"Umm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'},\n                        }\n                    }\n            }\n    }}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ONLY DRAFTS\n\n\n\n\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n\n          // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n\n            //             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n                        \n            //             {target: \".wait\"}], \n\n            //         WAIT: '.prompt'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Have you done your task yet?\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n            //         },\n            //         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n            //         wait: {\n            //             entry: [\n            //                 say('Hm.')\n            //             ],\n            //             on: {\n            //                 ENDSPEECH: [\n            //                     {cond: () => (num++) <= 2, target: 'prompt'},\n            //                     {target: '#root.dm1.done'}\n            //                 ]\n            //             }\n            //         }\n            //     }\n            // },\n\n\n            // ----\n\n            // quest1: {\n                //     on: {\n                //         RECOGNISED: [\n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                //                 actions: assign((context) => { return { approval: true } }),\n                //                 target: \"#root.dm1.create_do\"},\n            \n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                //                 actions: assign((context) => { return { approval: false} }),\n                //                 target: \"#root.dm1.if_ideas\"},\n\n                //                 {target: \"#root.dm1.done.others\"}\n\n                //                 // {cond: (context) => context.option === 'help', target: '.help'}\n                //                 ]\n                //         },\n                //         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n                //         },\\\n\n\n\n                // ------\n\n                // done: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                //                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                //         }, \n                //             others: {\n                //                 entry: say(\"Ummm, you said something strange\"),\n                //                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                //                 }\n                //         }\n                //     }   \n\n\n                // ------\n\n\n                // idea: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: send((context) => ({\n                //                     type: \"SPEAK\",\n                //                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n                //                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n                //             // },\n                //     //         elevator: {\n                //     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n                //     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n                //                 }\n                //     }\n                // }\n\n                // ------\n\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: {\n            //             target: \"conditional3\",\n            //             actions: assign((context) => { return { option: context.recResult } }),\n            //         },\n            //         WAIT: 'wait'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Let me know when you're done.\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [\n            //                 send('LISTEN'),\n            //                 send('WAIT', {delay: 10000})\n            //             ]\n            //         }\n            //     }\n            // },\n            // ...\n            // wait: {\n                \n            //     entry: [say('Have you done your task yet?')],\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n            //             {target: '#root.dm1.idea_wait'}\n            //         ]\n            //     }\n            // },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n\n\n            // -----\n\n                // ...\n                // full_annoy:{\n                //     initial: 'annoy',\n                //     on: { \n                //         // RECOGNISED: {\n                //         //         cond: (context) => help_commands.includes(context.recResult),\n                //         //         target: '#root.init.help'\n                //         //             },\n    \n                //         MAXSPEECH: [\n                //             { \n                //                 cond: (context) => context.count < 5,\n                //                 target: '#root.dm1.idea_wait'},\n    \n                //                 {cond: (context) => context.count == null,\n                //                 actions: assign((context)=>{return {count: Number(0)}}),\n                //                 target: '#root.dm1.maxspeech'}],\n                //             },\n                //     states:{\n                //         hist:{type: 'history'},\n                //         // .... // ...\n                //         annoy: {\n                //             on: {\n                //                 RECOGNISED: [{\n                //                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n                //                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n                //                     target: \"#root.dm1.done\"}]\n        \n                //                 // },\n                //                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n                //                 //     target: \".nomatch\" }]\n                //             },\n                //             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n                //         }\n                // },\n                // // ....\n                // },\n                // // ... \n                // maxspeech:{\n                //     initial: 'prompt',\n                //     on: {\n                //         ENDSPEECH: {\n                //             actions: assign((context)=> {return {count: context.count+1 }}),\n                //             target: 'full_annoy.hist'\n                //                 }\n                //             },\n                //             // target: 'fill_appointment_info.hist'\n                //         states: {\n                //             prompt: {entry: say('I AM A STUPID BOT ')}\n                //     }\n                // },\n\n                // ...\n\n                            // ..\n        //     wait: {\n        //         initial: 'prompt',\n        //         on: { ENDSPEECH: '#root.dm1.annoy'},\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"M.\"),\n        //                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n        //             },\n        //             // ask: {\n        //             //     entry: [\n        //             //         send('LISTEN'),\n        //             //         send('WAIT', {delay: 10000})\n        //             //     ]}\n        //             }\n        // },\n        //     // ...\n        //     annoy: {\n        //         initial: \"prompt\",\n        //         on: {\n        //             RECOGNISED: {\n        //                 target: \"conditional3\",\n        //                 actions: assign((context) => { return { option: context.recResult } }),\n        //             },\n        //             WAIT: 'wait'\n        //         },\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"Have you finished your task?\"),\n        //                 on: { ENDSPEECH: \"ask\" }\n        //             },\n        //             ask: {\n        //                 entry: [\n        //                     send('LISTEN'),\n        //                     send('WAIT', {delay: 10000})\n        //                 ]\n        //             }\n        //         }\n        //     },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},"]},"metadata":{},"sourceType":"module"}