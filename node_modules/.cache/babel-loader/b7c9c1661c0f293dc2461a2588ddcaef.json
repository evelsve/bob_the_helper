{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { say, listen } from \"./index\"; // import { grammar } from  \"./choices\";\n// export function misunderstood(_context: SDSContext, saythis: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//         prompt: {\n//             entry: send((context) => ({\n//                 type: \"SPEAK\",\n//                 value: (saythis)\n//             })),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: listen()\n//         },\n//         nomatch: {\n//             entry: say(\"Sorry, I do not understand.\"),\n//             on: { ENDSPEECH: \"prompt\" }\n//         },\n//         help: {\n//             entry: say(\"We may be miscommunicating. Let's take a step back\"),\n//             on: { ENDSPEECH: \"who\" }\n//         }\n//     }\n// })}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Peter\": {\n    person: \"Peter Horter\"\n  },\n  \"Jack\": {\n    person: \"Jack Tomerson\"\n  },\n  \"Tom\": {\n    person: \"Tom Peterson\"\n  },\n  \"Jill\": {\n    person: \"Jill Panele\"\n  },\n  \"Jane\": {\n    person: \"Jane Mayer\"\n  },\n  \"Anna\": {\n    person: \"Anna Pana\"\n  },\n  \"Lora\": {\n    person: \"Lora Cat\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"8\": {\n    time: \"eight\"\n  },\n  \"9\": {\n    time: \"nine\"\n  },\n  \"10\": {\n    time: \"ten\"\n  },\n  \"11\": {\n    time: \"eleven\"\n  },\n  \"at noon\": {\n    time: \"twelve\"\n  },\n  \"12\": {\n    time: \"twelve\"\n  },\n  \"1\": {\n    time: \"thirteen\"\n  },\n  \"2\": {\n    time: \"fourteen\"\n  },\n  \"3\": {\n    time: \"fifteen\"\n  },\n  \"4\": {\n    time: \"sixteen\"\n  },\n  \"5\": {\n    time: \"seventeen\"\n  },\n  \"6\": {\n    time: \"six\"\n  },\n  \"7\": {\n    time: \"seven\"\n  },\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n};\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          cond: context => context.option === 'help_on',\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.initial_welcome.help\"\n          }\n        }\n      }\n    },\n    // ...\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"approval\"\n        }, {\n          cond: context => context.option === 'help_on',\n          target: \".help\"\n        } // { target: \".nomatch\" }\n        ]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" it is. On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        // nomatch: {\n        //     entry: say(\"Sorry, I do not understand\"),\n        //     on: { ENDSPEECH: \"prompt\" }\n        // },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.who\"\n          }\n        }\n      }\n    },\n    // ...\n    approval: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"summary_whole\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"time\"\n        }, {\n          cond: context => context.option === 'help_on',\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \".help\"\n        } // { target: \".nomatch\" }\n        ]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Ok, meeting on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.who\"\n          }\n        } // ...misunderstood(\"who\")\n\n      }\n    },\n    // ...\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"summary_time\"\n        }, {\n          cond: context => context.option === 'help_on',\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What time is your meeting?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.approval\"\n          }\n        }\n      }\n    },\n    // ...\n    summary_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          cond: context => context.option === 'help_on',\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.approval\"\n          }\n        }\n      }\n    },\n    // ...\n    summary_whole: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          cond: context => context.option === 'help_on',\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: {\n          entry: say(\"We may be miscommunicating. Let's take a step back\"),\n          on: {\n            ENDSPEECH: \"#root.dm1.approval\"\n          }\n        }\n      }\n    },\n    // ...\n    created: {\n      initial: \"prompt\",\n      states: {\n        idle: {},\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appoinment has been created.\"\n          })),\n          on: {\n            ENDSPEECH: \"#root.initial_welcome.help\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","listen","grammar","person","day","time","approval","dmMachine1","initial","states","idle","who","on","RECOGNISED","cond","context","recResult","actions","target","option","prompt","entry","ENDSPEECH","ask","nomatch","help","type","value","undefined","summary_time","summary_whole","created"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen} from \"./index\";\n// import { grammar } from  \"./choices\";\n\n\n\n// export function misunderstood(_context: SDSContext, saythis: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//         prompt: {\n//             entry: send((context) => ({\n//                 type: \"SPEAK\",\n//                 value: (saythis)\n//             })),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: listen()\n//         },\n//         nomatch: {\n//             entry: say(\"Sorry, I do not understand.\"),\n//             on: { ENDSPEECH: \"prompt\" }\n//         },\n//         help: {\n//             entry: say(\"We may be miscommunicating. Let's take a step back\"),\n//             on: { ENDSPEECH: \"who\" }\n//         }\n//     }\n// })}\n\n\nconst grammar: { \n    [index: string]: {\n        appointment?: string,\n        to_do?: string,\n        timer?: string,\n        person?: string,\n        day?: string,\n        time?: string,\n        approval?:  boolean,\n    }} =  {\n            \"John\": { person: \"John Appleseed\" },\n            \"Peter\": { person: \"Peter Horter\" },\n            \"Jack\": { person: \"Jack Tomerson\" },\n            \"Tom\": { person: \"Tom Peterson\" },\n            \"Jill\": { person: \"Jill Panele\" },\n            \"Jane\": { person: \"Jane Mayer\" },\n            \"Anna\": { person: \"Anna Pana\" },\n            \"Lora\": { person: \"Lora Cat\" },\n\n            \"Monday\": { day: \"Monday\" },\n            \"Tuesday\": { day: \"Tuesday\" },\n            \"Wednesday\": { day: \"Wednesday\" },\n            \"Thursday\": { day: \"Thursday\" },\n            \"Friday\": { day: \"Friday\" },\n            \"Saturday\": { day: \"Saturday\" },\n            \"Sunday\": { day: \"Sunday\" },\n\n            \"8\": { time: \"eight\" },\n            \"9\": { time: \"nine\" },\n            \"10\": { time: \"ten\" },\n            \"11\": { time: \"eleven\" },\n            \"at noon\": { time: \"twelve\" },\n            \"12\": { time: \"twelve\" },\n            \"1\": { time: \"thirteen\" },\n            \"2\": { time: \"fourteen\" },\n            \"3\": { time: \"fifteen\" },\n            \"4\": { time: \"sixteen\" },\n            \"5\": { time: \"seventeen\" },\n            \"6\": { time: \"six\" },\n            \"7\": { time: \"seven\" },\n\n            \"of course\": { approval: true },\n            \"yes\": { approval: true },\n            \"yeah\": { approval: true },\n            \"yup\": { approval: true },\n            \"sure\": { approval: true },\n            \"no\": { approval: false },\n            \"nah\": { approval: false },\n            \"nope\": { approval: false }}\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"},\n\n                    {cond: (context) => context.option === 'help_on',\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.initial_welcome.help\" }\n                }\n            }\n        },\n        // ...\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"approval\" },\n\n                    {cond: (context) => context.option === 'help_on',\n                    target: \".help\" },\n\n                    // { target: \".nomatch\" }\n                ]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} it is. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                // nomatch: {\n                //     entry: say(\"Sorry, I do not understand\"),\n                //     on: { ENDSPEECH: \"prompt\" }\n                // },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.who\" }\n                }\n            \n            }\n        },\n        // ...\n        approval: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"summary_whole\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false} }),\n                    target: \"time\"},\n\n                    {cond: (context) => context.option === 'help_on',\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \".help\" },\n\n                    // { target: \".nomatch\" }\n                ]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, meeting on ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.who\" }\n                },\n                // ...misunderstood(\"who\")\n            }\n        },\n        // ...\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"summary_time\"},\n\n                    {cond: (context) => context.option === 'help_on',\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.approval\" }\n                }\n            }\n        },\n        // ...\n        summary_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"created\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false } }),\n                    target: \"who\"},\n\n                    {cond: (context) => context.option === 'help_on',\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \".help\" },\n\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.approval\" }\n                }\n            }\n        },\n        // ...\n        summary_whole: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"created\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false } }),\n                    target: \"who\"},\n\n                    {cond: (context) => context.option === 'help_on',\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \".help\" },\n\n                    { target: \".nomatch\" }]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                help: {\n                    entry: say(\"We may be miscommunicating. Let's take a step back\"),\n                    on: { ENDSPEECH: \"#root.dm1.approval\" }\n                }\n            }    \n        },\n        // ...\n        created: {\n            initial: \"prompt\",\n            states: {\n                idle: {},\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appoinment has been created.`})),\n                     on: { ENDSPEECH: \"#root.initial_welcome.help\" }\n                    }\n                }    \n            }\n    }   \n})\n"]},"metadata":{},"sourceType":"module"}