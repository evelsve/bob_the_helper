{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/mood-admin/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, send, assign } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\"; // auto-open this asshole: https://cors-anywhere.herokuapp.com/corsdemo\n\nimport { dmMachine1 } from \"./dmPositive\";\nimport { dmMachine2 } from \"./dmNegative\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const grammar = {\n  \"of course\": {\n    approval: true\n  },\n  \"yes of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  // --\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  },\n  \"no way\": {\n    approval: false\n  },\n  \"not sure\": {\n    approval: false\n  },\n  \"of course not\": {\n    approval: false\n  }\n};\nwindow.open(\"https://cors-anywhere.herokuapp.com/corsdemo\"); // window.open(\"https://statecharts.io/inspect\")\n\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nexport function promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\nexport function Queries(ondone, onerror) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n_c = Queries;\nexport function Conditional(cond1, target1, cond2, target2, elses, saythis) {\n  return {\n    initial: \"prompt\",\n    on: {\n      ENDSPEECH: [{\n        cond: context => context.option === cond1,\n        target: target1\n      }, {\n        cond: context => context.option === cond2,\n        target: target2\n      }, {\n        target: elses\n      }]\n    },\n    states: {\n      prompt: {\n        entry: send({\n          type: \"SPEAK\",\n          value: saythis\n        })\n      }\n    }\n  };\n}\n_c2 = Conditional;\nexport function misUnderstood(saythis, on_help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(saythis),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"Sorry, I do not understand.\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(\"We may be miscommunicating. Let's take a step back\"),\n        on: {\n          ENDSPEECH: on_help\n        }\n      }\n    }\n  };\n}\nexport function Endings(saythis, on_end) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: send({\n          type: \"SPEAK\",\n          value: saythis\n        }),\n        on: {\n          ENDSPEECH: on_end\n        }\n      }\n    }\n  };\n} // export function Query(id: string, target1:string, target2:string): MachineConfig<SDSContext, any, SDSEvent> {\n//             return ({   \n//                 // initial: 'query',\n//                 // states: {     \n//                 query: {\n//                     invoke: {\n//                         id: id,\n//                         src: (context, event) => nluRequest(context.option),\n//                         onDone: {\n//                             actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n//                             (context: SDSContext, event: any) => console.log(event.data)],\n//                             target: target1\n//                         },\n//                         onError: {\n//                             target: target2,\n//                             actions: (context, event) => console.log(event.data)}\n//                     }\n//                 } \n// }})}\n\n_c3 = Endings;\nconst saySnippet = send(context => ({\n  type: \"SPEAK\",\n  value: \"\".concat(context.snippet)\n}));\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    initial_welcome: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        // ...\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Good morning. How are you?\")),\n        // ...\n        // ...Query('rasa',\"distributor\", 'welcome'),\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (context, event) => console.log(event.data)],\n              target: \"distributor\"\n            },\n            onError: {\n              target: 'welcome',\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'positive',\n              target: [\"#root.dm1.positive\", \"idle\"]\n            }, {\n              cond: context => context.option === 'negative',\n              target: [\"#root.dm2.denial\", \"idle\"]\n            }, {\n              cond: context => context.option === 'choose_todo',\n              target: [\"#root.dm1.create_do\", \"idle\"]\n            }, {\n              cond: context => context.option === 'choose_ideas',\n              target: [\"#root.dm1.create_ideas\", \"idle\"]\n            }, {\n              cond: context => context.option === 'music',\n              target: [\"#root.dm1.leftovers\", \"idle\"]\n            }, {\n              cond: context => context.option === 'games',\n              target: [\"#root.dm1.leftovers\", \"idle\"]\n            }, // {cond: (context) => context.option === 'negative', target: [\"#root.dm2.denial\", \"idle\"]},\n            {\n              cond: context => context.option === 'help',\n              target: \"help\"\n            }, {\n              target: \"other\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Ok.\"\n              }))\n            }\n          }\n        },\n        // ...\n        help: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: \"welcome\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: \"goodbye\"\n            }]\n          }\n        }, promptAndAsk(\"Would you like to start over?\")),\n        // ...\n        other: _objectSpread({}, Endings(\"This function has not been developed\", \"#root.initial_welcome.help\")),\n        // ...\n        goodbye: _objectSpread({}, Endings(\"Happy to help out. See you later.\", \"#root.initial_welcome\"))\n      }\n    },\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click on me\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c4 = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c5 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mood-admin.herokuapp.com/model/parse';\nexport const nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 399,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Queries\");\n$RefreshReg$(_c2, \"Conditional\");\n$RefreshReg$(_c3, \"Endings\");\n$RefreshReg$(_c4, \"ReactiveButton\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/index.tsx"],"names":["React","ReactDOM","Machine","send","assign","useMachine","asEffect","useSpeechSynthesis","useSpeechRecognition","inspect","dmMachine1","dmMachine2","grammar","approval","window","open","url","iframe","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","Queries","ondone","onerror","invoke","id","src","context","event","nluRequest","option","onDone","actions","data","intent","name","console","log","target","onError","Conditional","cond1","target1","cond2","target2","elses","saythis","cond","misUnderstood","on_help","nomatch","help","Endings","on_end","saySnippet","snippet","machine","initial_welcome","idle","CLICK","welcome","RECOGNISED","recResult","query","distributor","undefined","other","goodbye","dm1","dm2","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","rootElement","document","getElementById","render"],"mappings":";;;;;;AAAA,OAAO,eAAP;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAAwBC,OAAxB,EAAiCC,IAAjC,EAA+CC,MAA/C,QAAoE,QAApE;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,QAAyD,kBAAzD;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CAEA;;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,OAAO,MAAMC,OAAoD,GACzD;AAAG,eAAa;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAhB;AACA,mBAAiB;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GADjB;AAEA,SAAO;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAFP;AAGA,UAAQ;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAHR;AAIA,SAAO;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAJP;AAKA,UAAQ;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GALR;AAMA;AACA,QAAM;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAPN;AAQA,SAAO;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GARP;AASA,UAAQ;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GATR;AAUA,YAAU;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAVV;AAWA,cAAY;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAXZ;AAYA,mBAAiB;AAAEA,IAAAA,QAAQ,EAAE;AAAZ;AAZjB,CADD;AAkBPC,MAAM,CAACC,IAAP,CAAY,8CAAZ,E,CACA;;AAEAN,OAAO,CAAC;AACJO,EAAAA,GAAG,EAAE,gCADD;AAEJC,EAAAA,MAAM,EAAE;AAFJ,CAAD,CAAP;AAMA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAyD;AAC5D,SAAOhB,IAAI,CAAEiB,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;AAED,OAAO,SAASI,MAAT,GAAgD;AACnD,SAAOpB,IAAI,CAAC,QAAD,CAAX;AACH;AAGD,OAAO,SAASqB,YAAT,CAAsBC,MAAtB,EAAgF;AACnF,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAEV,GAAG,CAACO,MAAD,CADN;AAEJI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJC,MAAAA,GAAG,EAAE;AAACH,QAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AAAZ;AALD;AAFJ,GAAR;AAUH;AAED,OAAO,SAAS6B,OAAT,CAAiBC,MAAjB,EAAiCC,OAAjC,EAA2F;AAC9F,SAAQ;AACAC,IAAAA,MAAM,EAAE;AACJC,MAAAA,EAAE,EAAE,MADA;AAEJC,MAAAA,GAAG,EAAE,CAACC,OAAD,EAAUC,KAAV,KAAoBC,UAAU,CAACF,OAAO,CAACG,MAAT,CAF/B;AAGJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE,CAACvC,MAAM,CAAC,CAACkC,OAAD,EAAUC,KAAV,KAAoB;AAAE,iBAAQ;AAACE,YAAAA,MAAM,EAAEF,KAAK,CAACK,IAAN,CAAWC,MAAX,CAAkBC;AAA3B,WAAR;AAA0C,SAAjE,CAAP,EACT,CAACR,OAAD,EAAsBC,KAAtB,KAAqCQ,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACK,IAAlB,CAD5B,CADL;AAGJK,QAAAA,MAAM,EAAEhB;AAHJ,OAHJ;AAQJiB,MAAAA,OAAO,EAAE;AACLD,QAAAA,MAAM,EAAEf,OADH;AAELS,QAAAA,OAAO,EAAE,CAACL,OAAD,EAAUC,KAAV,KAAoBQ,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACK,IAAlB;AAFxB;AARL;AADR,GAAR;AAYA;KAbYZ,O;AAehB,OAAO,SAASmB,WAAT,CAAqBC,KAArB,EAAoCC,OAApC,EAAqDC,KAArD,EAAoEC,OAApE,EAAqFC,KAArF,EAAoGC,OAApG,EAAgK;AACnK,SAAQ;AACJ/B,IAAAA,OAAO,EAAE,QADL;AAEIG,IAAAA,EAAE,EAAE;AACAC,MAAAA,SAAS,EAAE,CACH;AAAC4B,QAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmBW,KAAvC;AAA8CH,QAAAA,MAAM,EAAEI;AAAtD,OADG,EAEH;AAACK,QAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmBa,KAAvC;AAA8CL,QAAAA,MAAM,EAAEM;AAAtD,OAFG,EAGH;AAAEN,QAAAA,MAAM,EAAEO;AAAV,OAHG;AADX,KAFR;AASI7B,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAEzB,IAAI,CAAE;AAACkB,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,KAAK,EAAEmC;AAAvB,SAAF;AADP;AADJ;AATZ,GAAR;AAcD;MAfaN,W;AAiBhB,OAAO,SAASQ,aAAT,CAAuBF,OAAvB,EAAqCG,OAArC,EAA6F;AAChG,SAAQ;AACJlC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACRF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAEV,GAAG,CAACuC,OAAD,CADN;AAEJ5B,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADA;AAKRC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAEL,MAAM;AADZ,OALG;AAQRsC,MAAAA,OAAO,EAAE;AACLjC,QAAAA,KAAK,EAAEV,GAAG,CAAC,6BAAD,CADL;AAELW,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFC,OARD;AAYRgC,MAAAA,IAAI,EAAE;AACFlC,QAAAA,KAAK,EAAEV,GAAG,CAAC,oDAAD,CADR;AAEFW,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE8B;AAAb;AAFF;AAZE;AAFJ,GAAR;AAkBA;AAEJ,OAAO,SAASG,OAAT,CAAiBN,OAAjB,EAAkCO,MAAlC,EAA2F;AAC9F,SAAQ;AACJtC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAEzB,IAAI,CAAE;AACTkB,UAAAA,IAAI,EAAE,OADG;AAETC,UAAAA,KAAK,EAAEmC;AAFE,SAAF,CADP;AAIH5B,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAEkC;AAAb;AAJD;AADJ;AAFJ,GAAR;AAUO,C,CAGX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAhCgBD,O;AAkChB,MAAME,UAAwC,GAAG9D,IAAI,CAAEmC,OAAD,KAA0B;AAC5EjB,EAAAA,IAAI,EAAE,OADsE;AAC7DC,EAAAA,KAAK,YAAKgB,OAAO,CAAC4B,OAAb;AADwD,CAA1B,CAAD,CAArD;AAKA,MAAMC,OAAO,GAAGjE,OAAO,CAA4B;AAC/CkC,EAAAA,EAAE,EAAE,MAD2C;AAE/Cf,EAAAA,IAAI,EAAE,UAFyC;AAG/CM,EAAAA,MAAM,EAAE;AACJ;AACAyC,IAAAA,eAAe,EAAE;AACb1C,MAAAA,OAAO,EAAE,MADI;AAEbC,MAAAA,MAAM,EAAE;AACJ;AACA0C,QAAAA,IAAI,EAAE;AAACxC,UAAAA,EAAE,EAAE;AAACyC,YAAAA,KAAK,EAAE;AAAR;AAAL,SAFF;AAGJ;AACAC,QAAAA,OAAO;AACH1C,UAAAA,EAAE,EAAE;AACA2C,YAAAA,UAAU,EAAE;AACRvB,cAAAA,MAAM,EAAE,OADA;AAERN,cAAAA,OAAO,EAAEvC,MAAM,CAAEkC,OAAD,IAAa;AAAE,uBAAO;AAAEG,kBAAAA,MAAM,EAAEH,OAAO,CAACmC;AAAlB,iBAAP;AAAsC,eAAtD;AAFP;AADZ;AADD,WAMAjD,YAAY,CAAC,4BAAD,CANZ,CAJH;AAYJ;AACA;AACAkD,QAAAA,KAAK,EAAE;AACHvC,UAAAA,MAAM,EAAE;AACJC,YAAAA,EAAE,EAAE,MADA;AAEJC,YAAAA,GAAG,EAAE,CAACC,OAAD,EAAUC,KAAV,KAAoBC,UAAU,CAACF,OAAO,CAACG,MAAT,CAF/B;AAGJC,YAAAA,MAAM,EAAE;AACJC,cAAAA,OAAO,EAAE,CAACvC,MAAM,CAAC,CAACkC,OAAD,EAAUC,KAAV,KAAoB;AAAE,uBAAQ;AAACE,kBAAAA,MAAM,EAAEF,KAAK,CAACK,IAAN,CAAWC,MAAX,CAAkBC;AAA3B,iBAAR;AAA0C,eAAjE,CAAP,EACT,CAACR,OAAD,EAAsBC,KAAtB,KAAqCQ,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACK,IAAlB,CAD5B,CADL;AAGJK,cAAAA,MAAM,EAAE;AAHJ,aAHJ;AAQJC,YAAAA,OAAO,EAAE;AACLD,cAAAA,MAAM,EAAE,SADH;AAELN,cAAAA,OAAO,EAAE,CAACL,OAAD,EAAUC,KAAV,KAAoBQ,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACK,IAAlB;AAFxB;AARL;AADL,SAdH;AA4BJ;AACA+B,QAAAA,WAAW,EAAE;AACTjD,UAAAA,OAAO,EAAE,QADA;AAETG,UAAAA,EAAE,EAAE;AACAC,YAAAA,SAAS,EAAE,CACP;AAAC4B,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,UAAvC;AAAmDQ,cAAAA,MAAM,EAAE,CAAC,oBAAD,EAAuB,MAAvB;AAA3D,aADO,EAGP;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,UAAvC;AAAmDQ,cAAAA,MAAM,EAAE,CAAC,kBAAD,EAAqB,MAArB;AAA3D,aAHO,EAKP;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,aAAvC;AAAsDQ,cAAAA,MAAM,EAAE,CAAC,qBAAD,EAAwB,MAAxB;AAA9D,aALO,EAOP;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,cAAvC;AAAuDQ,cAAAA,MAAM,EAAE,CAAC,wBAAD,EAA2B,MAA3B;AAA/D,aAPO,EASP;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,OAAvC;AAAgDQ,cAAAA,MAAM,EAAE,CAAC,qBAAD,EAAwB,MAAxB;AAAxD,aATO,EAWP;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,OAAvC;AAAgDQ,cAAAA,MAAM,EAAE,CAAC,qBAAD,EAAwB,MAAxB;AAAxD,aAXO,EAaP;AAEA;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAaA,OAAO,CAACG,MAAR,KAAmB,MAAvC;AAA+CQ,cAAAA,MAAM,EAAE;AAAvD,aAfO,EAiBP;AAACA,cAAAA,MAAM,EAAE;AAAT,aAjBO;AADX,WAFK;AAsBTtB,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AACJG,cAAAA,KAAK,EAAEzB,IAAI,CAAEmC,OAAD,KAAc;AAACjB,gBAAAA,IAAI,EAAE,OAAP;AAAgBC,gBAAAA,KAAK;AAArB,eAAd,CAAD;AADP;AADJ;AAtBC,SA7BT;AAyDJ;AACAwC,QAAAA,IAAI;AACAjC,UAAAA,EAAE,EAAE;AAEA2C,YAAAA,UAAU,EAAE,CACR;AAACd,cAAAA,IAAI,EAAGpB,OAAD,IAAa1B,OAAO,CAAC0B,OAAO,CAACmC,SAAT,CAAP,KAA+BG,SAA/B,IAA4ChE,OAAO,CAAC0B,OAAO,CAACmC,SAAT,CAAP,CAA2B5D,QAA3B,KAAwC,IAAxG;AACAoC,cAAAA,MAAM,EAAE;AADR,aADQ,EAIR;AAACS,cAAAA,IAAI,EAAGpB,OAAD,IAAa1B,OAAO,CAAC0B,OAAO,CAACmC,SAAT,CAAP,KAA+BG,SAA/B,IAA4ChE,OAAO,CAAC0B,OAAO,CAACmC,SAAT,CAAP,CAA2B5D,QAA3B,KAAwC,KAAxG;AACAoC,cAAAA,MAAM,EAAE;AADR,aAJQ;AAFZ;AADJ,WAUDzB,YAAY,CAAC,+BAAD,CAVX,CA1DA;AAsEJ;AACAqD,QAAAA,KAAK,oBAAMd,OAAO,CAAC,sCAAD,EAAyC,4BAAzC,CAAb,CAvED;AAyEJ;AACAe,QAAAA,OAAO,oBAAMf,OAAO,CAAC,mCAAD,EAAqC,uBAArC,CAAb;AA1EH;AAFK,KAFb;AAiFJ;AACAgB,IAAAA,GAAG,oBACArE,UADA,CAlFC;AAqFJ;AACAsE,IAAAA,GAAG,oBACArE,UADA,CAtFC;AAyFJ;AACAsE,IAAAA,MAAM,EAAE;AACJvD,MAAAA,OAAO,EAAE,MADL;AAEJC,MAAAA,MAAM,EAAE;AACJ;AACA0C,QAAAA,IAAI,EAAE;AACFxC,UAAAA,EAAE,EAAE;AACAqD,YAAAA,MAAM,EAAE,aADR;AAEAC,YAAAA,KAAK,EAAE;AACHlC,cAAAA,MAAM,EAAE,UADL;AAEHN,cAAAA,OAAO,EAAEvC,MAAM,CAAC,CAACgB,QAAD,EAAWmB,KAAX,KAAqB;AAAE,uBAAO;AAAE6C,kBAAAA,SAAS,EAAE7C,KAAK,CAACjB;AAAnB,iBAAP;AAAmC,eAA3D;AAFZ;AAFP;AADF,SAFF;AAWJ;AACA+D,QAAAA,WAAW,EAAE;AACf3D,UAAAA,OAAO,EAAE,UADM;AAETE,UAAAA,KAAK,EAAE,UAFE;AAGT0D,UAAAA,IAAI,EAAE,SAHG;AAITzD,UAAAA,EAAE,EAAE;AACA0D,YAAAA,SAAS,EAAE;AACP5C,cAAAA,OAAO,EAAE,CAAC,cAAD,EACLvC,MAAM,CAAC,CAACgB,QAAD,EAAWmB,KAAX,KAAqB;AAAE,uBAAO;AAAEkC,kBAAAA,SAAS,EAAElC,KAAK,CAACjB;AAAnB,iBAAP;AAAmC,eAA3D,CADD,CADF;AAGP2B,cAAAA,MAAM,EAAE;AAHD,aADX;AAMAuB,YAAAA,UAAU,EAAE;AANZ,WAJK;AAYT7C,UAAAA,MAAM,EAAE;AACb6D,YAAAA,QAAQ,EAAE,EADG;AAGJC,YAAAA,KAAK,EAAE;AACH7D,cAAAA,KAAK,EAAEzB,IAAI,CAAC,YAAD;AADR;AAHH;AAZC,SAZT;AAgCJ;AACAuF,QAAAA,QAAQ,EAAE;AACN9D,UAAAA,KAAK,EAAE,UADD;AAENC,UAAAA,EAAE,EAAE;AACAC,YAAAA,SAAS,EAAE;AADX;AAFE;AAjCN;AAFJ;AA1FJ;AAHuC,CAA5B,EA0InB;AACIa,EAAAA,OAAO,EAAE;AACLgD,IAAAA,YAAY,EAAGrD,OAAD,IAAyB;AACnC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaV,OAAO,CAACmC,SAAjC;AACH,KAJI;AAKLmB,IAAAA,IAAI,EAAE,MAAM;AACR7C,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,KAPI;AAQL6C,IAAAA,SAAS,EAAGvD,OAAD,IAAyB;AAChC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBV,OAAO,CAACwD,OAAR,CAAgBjD,MAAhB,CAAuBC,IAAvD;AACH;AAXI;AADb,CA1ImB,CAAvB;;AAgKA,MAAMiD,cAAc,GAAIC,KAAD,IAA+B;AAClD,UAAQ,IAAR;AACI,SAAKA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB;AAAEjB,MAAAA,MAAM,EAAE;AAAV,KAApB,CAAL;AACI,0BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,eAAhC;AACI,QAAA,KAAK,EAAE;AAAEkB,UAAAA,SAAS,EAAE;AAAb;AADX,SACoDH,KADpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;;AAMJ,SAAKA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB;AAAEjB,MAAAA,MAAM,EAAE;AAAV,KAApB,CAAL;AACI,0BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,eAAhC;AACI,QAAA,KAAK,EAAE;AAAEkB,UAAAA,SAAS,EAAE;AAAb;AADX,SACuDH,KADvD;AAAA;AAAA;AAAA;AAAA,cADJ;;AAMJ;AACI,0BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC;AAAhC,SAAoDA,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAhBR;AAsBH,CAvBD;;MAAMD,c;;AAyBN,SAASK,GAAT,GAAe;AAAA;;AAAA,8BACyB7F,kBAAkB,CAAC;AACnD8F,IAAAA,KAAK,EAAE,MAAM;AACTlG,MAAAA,IAAI,CAAC,WAAD,CAAJ;AACH;AAHkD,GAAD,CAD3C;AAAA,QACHmG,KADG,uBACHA,KADG;AAAA,QACIC,MADJ,uBACIA,MADJ;AAAA,QACYb,QADZ,uBACYA,QADZ;;AAAA,gCAMyBlF,oBAAoB,CAAC;AACrDgG,IAAAA,QAAQ,EAAGC,MAAD,IAAiB;AACvBtG,MAAAA,IAAI,CAAC;AAAEkB,QAAAA,IAAI,EAAE,WAAR;AAAqBC,QAAAA,KAAK,EAAEmF;AAA5B,OAAD,CAAJ;AACH;AAHoD,GAAD,CAN7C;AAAA,QAMHlF,MANG,yBAMHA,MANG;AAAA,QAMKmF,SANL,yBAMKA,SANL;AAAA,QAMgBC,IANhB,yBAMgBA,IANhB;;AAAA,sBAWsBtG,UAAU,CAAC8D,OAAD,EAAU;AACjDyC,IAAAA,QAAQ,EAAE,IADuC;AAEjDjE,IAAAA,OAAO,EAAE;AACLkE,MAAAA,QAAQ,EAAEvG,QAAQ,CAAC,MAAM;AACrByC,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAzB,QAAAA,MAAM,CAAC;AACHuF,UAAAA,cAAc,EAAE,KADb;AAEHC,UAAAA,UAAU,EAAE;AAFT,SAAD,CAAN;AAIH,OANiB,CADb;AAQLC,MAAAA,OAAO,EAAE1G,QAAQ,CAAC,MAAM;AACpByC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA2D,QAAAA,IAAI;AACP,OAHgB,CARZ;AAYLM,MAAAA,QAAQ,EAAE3G,QAAQ,CAAC,CAACgC,OAAD,EAAU4E,MAAV,KAAqB;AACpCnE,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAsD,QAAAA,KAAK,CAAC;AAAEnF,UAAAA,IAAI,EAAEmB,OAAO,CAAC8C;AAAhB,SAAD,CAAL;AACH,OAHiB,CAZb;AAgBL+B,MAAAA,SAAS,EAAE7G,QAAQ,CAAC,CAACgC,OAAD,EAAU4E,MAAV,KAAqB;AACrCnE,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAuD,QAAAA,MAAM;AACT,OAHkB;AAhBd;AAFwC,GAAV,CAXhC;AAAA;AAAA,QAWJa,OAXI;AAAA,QAWKjH,IAXL;AAAA,QAWWkH,OAXX;;AAqCX,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAED,OAAvB;AAAgC,MAAA,OAAO,EAAE,MAAMjH,IAAI,CAAC,OAAD;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA1CQiG,G;UAC+B7F,kB,EAKAC,oB,EAKHH,U;;;MAX5B+F,G;AA0CR;AAGD;AACA;;AACA,MAAMkB,QAAQ,GAAG,sCAAjB;AACA,MAAMC,OAAO,GAAG,8CAAhB;AACA,OAAO,MAAM/E,UAAU,GAAIrB,IAAD,IACtBqG,KAAK,CAAC,IAAIC,OAAJ,CAAYH,QAAQ,GAAGC,OAAvB,EAAgC;AAClCG,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,OAAO,EAAE;AAAE,cAAU;AAAZ,GAFyB;AAGlCC,EAAAA,IAAI,yBAAezG,IAAf;AAH8B,CAAhC,CAAD,CAAL,CAKK0G,IALL,CAKUjF,IAAI,IAAIA,IAAI,CAACkF,IAAL,EALlB,CADG;AAQP,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAhI,QAAQ,CAACiI,MAAT,eACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIH,WAFJ","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\";\n\n// auto-open this asshole: https://cors-anywhere.herokuapp.com/corsdemo\n\nimport { dmMachine1 } from \"./dmPositive\";\nimport { dmMachine2 } from \"./dmNegative\";\n\nexport const grammar: { [index: string]: {approval?:  boolean } } = \n        {  \"of course\": { approval: true },\n        \"yes of course\": { approval: true },\n        \"yes\": { approval: true },\n        \"yeah\": { approval: true },\n        \"yup\": { approval: true },\n        \"sure\": { approval: true },\n        // --\n        \"no\": { approval: false },\n        \"nah\": { approval: false },\n        \"nope\": { approval: false },\n        \"no way\": { approval: false },\n        \"not sure\": { approval: false },\n        \"of course not\": { approval: false}\n\n        }\n\n\nwindow.open(\"https://cors-anywhere.herokuapp.com/corsdemo\")\n// window.open(\"https://statecharts.io/inspect\")\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')}\n        }\n    })\n}\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n}})}\n\nexport function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === cond1, target: target1},\n                            {cond: (context) => context.option === cond2, target: target2},\n                            { target: elses }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: saythis})),\n                    }\n                }\n})}\n\nexport function misUnderstood(saythis: any, on_help: any): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n        prompt: {\n            entry: say(saythis),\n            on: { ENDSPEECH: \"ask\" }\n        },\n        ask: { \n            entry: listen()\n        },\n        nomatch: {\n            entry: say(\"Sorry, I do not understand.\"),\n            on: { ENDSPEECH: \"prompt\" }\n        },\n        help: {\n            entry: say(\"We may be miscommunicating. Let's take a step back\"),\n            on: { ENDSPEECH: on_help }\n        }\n}})}\n\nexport function Endings(saythis: string, on_end:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({        \n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: send(({\n                    type: \"SPEAK\",\n                    value: saythis})),\n                 on: { ENDSPEECH: on_end }\n                }\n            }    \n        })}\n\n\n// export function Query(id: string, target1:string, target2:string): MachineConfig<SDSContext, any, SDSEvent> {\n//             return ({   \n//                 // initial: 'query',\n//                 // states: {     \n//                 query: {\n//                     invoke: {\n//                         id: id,\n//                         src: (context, event) => nluRequest(context.option),\n//                         onDone: {\n//                             actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n//                             (context: SDSContext, event: any) => console.log(event.data)],\n//                             target: target1\n//                         },\n//                         onError: {\n//                             target: target2,\n//                             actions: (context, event) => console.log(event.data)}\n//                     }\n//                 } \n// }})}\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n        initial_welcome: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {on: {CLICK: 'welcome'}},\n                // ...\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"Good morning. How are you?\")\n                },\n                // ...\n                // ...Query('rasa',\"distributor\", 'welcome'),\n                query: {\n                    invoke: {\n                        id: 'rasa',\n                        src: (context, event) => nluRequest(context.option),\n                        onDone: {\n                            actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                            (context: SDSContext, event: any) => console.log(event.data)],\n                            target: \"distributor\"\n                        },\n                        onError: {\n                            target: 'welcome',\n                            actions: (context, event) => console.log(event.data)}\n                    }\n                },\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n                            {cond: (context) => context.option === 'positive', target: [\"#root.dm1.positive\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'negative', target: [\"#root.dm2.denial\", \"idle\"]},\n                            \n                            {cond: (context) => context.option === 'choose_todo', target: [\"#root.dm1.create_do\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'choose_ideas', target: [\"#root.dm1.create_ideas\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'music', target: [\"#root.dm1.leftovers\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'games', target: [\"#root.dm1.leftovers\", \"idle\"]},\n\n                            // {cond: (context) => context.option === 'negative', target: [\"#root.dm2.denial\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'help', target: \"help\"},\n\n                            {target: \"other\"} ]\n                        },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({type: \"SPEAK\", value: `Ok.`})),\n                        }\n                    }\n                },\n                // ...\n                help: {\n                    on: {\n              \n                        RECOGNISED: [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"welcome\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"goodbye\"},]  \n                    },\n                ...promptAndAsk(\"Would you like to start over?\")\n                },\n                // ...\n                other: {...Endings(\"This function has not been developed\", \"#root.initial_welcome.help\")\n                },\n                // ...\n                goodbye: {...Endings(\"Happy to help out. See you later.\",\"#root.initial_welcome\")}\n            },\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        }\n    }\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n    });\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    ...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    \n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click on me\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mood-admin.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}