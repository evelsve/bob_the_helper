{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, send, assign } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1, grammar } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\nimport { dmMachine4 } from \"./dmSmartHome\"; // import { grammar } from  \"./dmAppointment\";\n\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nexport function promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\nconst saySnippet = send(context => ({\n  type: \"SPEAK\",\n  value: \"\".concat(context.snippet)\n}));\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    initial_welcome: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        // ...\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"What would you like to do?\")),\n        // ...\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (context, event) => console.log(event.data)],\n              target: \"distributor\"\n            },\n            onError: {\n              target: 'welcome',\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'todo_on' || context.option === 'timer_on',\n              target: [\"#root.dm3.denial\", \"idle\"]\n            }, {\n              cond: context => context.option === 'timer_on' || context.option === 'timer_off',\n              target: [\"#root.dm2.denial\", \"idle\"]\n            }, {\n              cond: context => context.option === 'appointment_on',\n              target: [\"#root.dm1.who\", \"idle\"]\n            }, {\n              cond: context => context.option === 'smart_on',\n              target: [\"#root.dm4.welcome\", \"idle\"]\n            }, {\n              cond: context => context.option === 'help_on',\n              target: \"help\"\n            }, {\n              cond: context => context.option === 'appointment_off',\n              target: \"other\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Understood.\"\n              }))\n            }\n          }\n        },\n        // ...\n        help: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"welcome\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"goodbye\"\n            }]\n          }\n        }, promptAndAsk(\"Would you like to start over?\")),\n        // ...\n        other: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"help\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"You chose a function which has not been developed.\")),\n        goodbye: {\n          states: {\n            prompt: {\n              entry: say(\"Goodbye.\")\n            }\n          }\n        }\n      }\n    },\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    dm3: _objectSpread({}, dmMachine3),\n    // ____________\n    dm4: _objectSpread({}, dmMachine4),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://ap-ti-do.herokuapp.com/model/parse';\nexport const nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 335,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","send","assign","useMachine","asEffect","inspect","dmMachine1","grammar","dmMachine2","dmMachine3","dmMachine4","url","iframe","useSpeechSynthesis","useSpeechRecognition","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","saySnippet","context","snippet","machine","id","initial_welcome","idle","CLICK","welcome","RECOGNISED","target","actions","option","recResult","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","distributor","cond","help","undefined","approval","other","goodbye","dm1","dm2","dm3","dm4","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1, grammar } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\nimport { dmMachine4 } from \"./dmSmartHome\";\n// import { grammar } from  \"./dmAppointment\";\n\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n        initial_welcome: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        CLICK: 'welcome'\n                    }\n                },\n                // ...\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }    \n                    },\n                            ...promptAndAsk(\"What would you like to do?\")\n                },\n                // ...\n                query: {\n                    invoke: {\n                        id: 'rasa',\n                        src: (context, event) => nluRequest(context.option),\n                        onDone: {\n                            actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                            (context: SDSContext, event: any) => console.log(event.data)],\n                            target: \"distributor\"\n                        },\n                        onError: {\n                            target: 'welcome',\n                            actions: (context, event) => console.log(event.data)\n                        }\n                    }\n                },\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n\n                            { cond: (context) => context.option === 'todo_on'|| context.option === 'timer_on', \n                            target: [\"#root.dm3.denial\", \"idle\"],\n                            },\n\n                            { cond: (context) => context.option === 'timer_on' || context.option === 'timer_off',\n                            target: [\"#root.dm2.denial\", \"idle\"] \n                            },\n\n                            { cond: (context) => context.option === 'appointment_on', \n                            target: [\"#root.dm1.who\", \"idle\"]\n                            },\n\n                            { cond: (context) => context.option === 'smart_on',\n                                target: [\"#root.dm4.welcome\", \"idle\"]\n                            },\n\n                            { cond: (context) => context.option === 'help_on',\n                                target: \"help\"\n                            },\n\n                            { cond: (context) => context.option === 'appointment_off',\n                                target: \"other\"\n                            }\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Understood.`\n                            })),\n                        }\n                    },\n                },\n                // ...\n                help: {\n                    on: {\n                        RECOGNISED: [\n                            {\n                                cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                actions: assign((context) => { return { approval: true } }),\n                                target: \"welcome\"\n                            },\n                            {\n                                cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                actions: assign((context) => { return { approval: false} }),\n                                target: \"goodbye\"\n                            },\n                        ]  \n                    },\n                            ...promptAndAsk(\"Would you like to start over?\")\n                },\n                // ...\n                other: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"help\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }    \n                    },\n                            ...promptAndAsk(\"You chose a function which has not been developed.\")\n                },\n                goodbye: {\n                    states: {\n                        prompt: {\n                            entry: say(\"Goodbye.\")\n                        }    \n                    }\n                }\n            }\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        dm3: {\n        ...dmMachine3\n        },\n        // ____________\n        dm4: {\n        ...dmMachine4\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                },\n            }    \n        }\n    }\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n    });\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://ap-ti-do.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}