{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { say } from \"./index\"; // import { nluRequest } from './index'\n// import { Endings } from './index'\n\nconst url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  }\n}; // const openInNewTab: any(user_input: string) {\n//   window.open(url_grammar[user_input]),\n// }\n\nfunction openInNewTab(user_input) {\n  return window.open(url_grammar[user_input].url, '_blank');\n} // function openInNewTab(input_user: string) => void {\n//     // let context = url;\n//     // let newRelativeUrl = router.createUrlTree([namedRoute]);\n//     // let baseUrl = window.location.href.replace(router.url, '');\n//     window.open(baseUrl + newRelativeUrl, '_blank');\n// }\n\n\nexport const dmMachine2 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    negative: {\n      initial: \"first_prompt\",\n      // ...\n      on: {\n        ENDSPEECH: \"ask_genre\"\n      },\n      states: {\n        first_prompt: {\n          entry: say(\"Let's listen to some music!\")\n        }\n      }\n    },\n    ask_genre: {\n      initial: \"second_prompt\",\n      on: {\n        RECOGNISED: [{\n          // cond: (context) => grammar[context.recResult].person !== undefined,\n          cond: context => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}),\n          // It checks if url is in grammar\n          actions: assign(context => {\n            return {\n              url: url_grammar[context.recResult].url\n            };\n          }),\n          // The computer keeps the information in the object context\n          target: \"genre\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        second_prompt: {\n          entry: say('What genre would you like to listen to?'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        },\n        nomatch: {\n          entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    games: {},\n    entertain: {},\n    genre: {\n      initial: 'third_prompt',\n      states: {\n        third_prompt: {\n          entry: send(context => _objectSpread({}, openInNewTab(context.url)))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmNegative.ts"],"names":["send","assign","say","url_grammar","url","openInNewTab","user_input","window","open","dmMachine2","initial","states","idle","negative","on","ENDSPEECH","first_prompt","entry","ask_genre","RECOGNISED","cond","context","recResult","undefined","actions","target","second_prompt","ask","nomatch","games","entertain","genre","third_prompt"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk } from \"./index\";\n\n// import { nluRequest } from './index'\n// import { Endings } from './index'\n\nconst url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' },\n}\n\n// const openInNewTab: any(user_input: string) {\n//   window.open(url_grammar[user_input]),\n// }\n\nfunction openInNewTab(user_input: string): any{ \n  return (window.open(url_grammar[user_input].url, '_blank'))\n}\n\n\n// function openInNewTab(input_user: string) => void {\n//     // let context = url;\n//     // let newRelativeUrl = router.createUrlTree([namedRoute]);\n//     // let baseUrl = window.location.href.replace(router.url, '');\n\n//     window.open(baseUrl + newRelativeUrl, '_blank');\n// }\n\n\nexport const dmMachine2: MachineConfig<SDSContext, any, SDSEvent> = ({\n  initial: 'idle',\n  states: {\n      // ...\n      idle: {},\n      negative: {\n        initial: \"first_prompt\",\n        // ...\n        on: { ENDSPEECH: \"ask_genre\" },\n            states: { \n                first_prompt: { entry: say(\"Let's listen to some music!\") },\n              }\n            },\n      ask_genre: {\n        initial: \"second_prompt\",\n        on: {\n          RECOGNISED: [{\n              // cond: (context) => grammar[context.recResult].person !== undefined,\n              cond: (context) => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}), // It checks if url is in grammar\n              actions: assign((context) => { return { url: url_grammar[context.recResult].url } }), // The computer keeps the information in the object context\n              target: \"genre\"\n          },\n          { target: \".nomatch\" }]\n      },\n      states: {\n        second_prompt: {\n            entry: say('What genre would you like to listen to?'),\n            on: { ENDSPEECH: \"ask\" }\n            },\n        ask: {\n            entry: send('LISTEN')\n          },\n        nomatch: {\n          entry: say('I am sorry, I cannot play that genre for you. Please choose another genre'),\n          on: { ENDSPEECH: \"ask\"}\n        }\n      }\n      },\n      games: {},\n      entertain: {},\n      genre: {\n        initial: 'third_prompt',\n        states: {\n          third_prompt: {\n            entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                      ...openInNewTab(context.url)\n                        // type: \"SPEAK\",\n                        // value: `OK. Do you want to listen to $(context.genre)?`\n                    })),\n          }\n        }\n      }\n      }})\n    "]},"metadata":{},"sourceType":"module"}