{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk } from \"./index\"; // import { list } from \"./todo_list\"\n// export function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//             invoke: {\n//                 id: 'rasa',\n//                 src: (context, event) => nluRequest(context.option),\n//                 onDone: {\n//                     actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n//                     (context: SDSContext, event: any) => console.log(event.data)],\n//                     target: ondone\n//                 },\n//                 onError: {\n//                     target: onerror,\n//                     actions: (context, event) => console.log(event.data)}\n// }})}\n// export function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: \"prompt\",\n//                 on: {\n//                     ENDSPEECH: [\n//                             {cond: (context) => context.option === cond1, target: target1},\n//                             {cond: (context) => context.option === cond2, target: target2},\n//                             { target: elses }] \n//                     },\n//                 states: {\n//                     prompt: {\n//                         entry: send(({type: \"SPEAK\", value: saythis})),\n//                     }\n//                 }\n// })}\n// const yes_no: { [index: string]: {approval?:  boolean } } = \n//          {  \"of course\": { approval: true },\n//             \"yes of course\": { approval: true },\n//             \"yes\": { approval: true },\n//             \"yeah\": { approval: true },\n//             \"yup\": { approval: true },\n//             \"sure\": { approval: true },\n//             // --\n//             \"no\": { approval: false },\n//             \"nah\": { approval: false },\n//             \"nope\": { approval: false },\n//             \"no way\": { approval: false },\n//             \"not sure\": { approval: false },\n//             \"of course not\": { approval: false}\n//         }\n\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: // target: '#root.dm1.query1',\n            // actions: assign((context) => { return { option: context.recResult } }),\n            [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"summary_whole\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"time\"\n            }, // {cond: (context) => context.recResult === \"help\", target: \".help\" },\n            {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Then what would you like to do?\")) // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n\n      }\n    },\n    query1: _objectSpread({}, Queries('conditional1', \"#root.initial_welcome.help\")),\n    conditional1: _objectSpread({}, Conditional('agreement', \"create_do\", 'disagreement', \"if_ideas\", \"others\", \"Cool.\")),\n    // {\n    //     initial: \"prompt\",\n    //     on: {\n    //         ENDSPEECH: [\n    //                 {cond: (context) => context.option === 'agreement', target: \"create_do\"},\n    //                 {cond: (context) => context.option === 'disagreement', target: \"if_ideas\"},\n    //                 { target: \"others\" }] \n    //         },\n    //     states: {\n    //         prompt: {\n    //             entry: send(({type: \"SPEAK\", value: `Cool.`})),\n    //         }\n    //     }\n    // },\n    // ....\n    query3: _objectSpread({}, Queries('distributor', \"#root.initial_welcome.help\")),\n    distributor: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'games',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'music',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'enterntain_me',\n          target: \"leftovers\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ok.\"\n          })\n        }\n      }\n    },\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ummm, you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest1'\n          }\n        }\n      }\n    },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"to_do\",\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    query2: _objectSpread({}, Queries('conditional2', \"#root.initial_welcome.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", \"Ok.\")),\n    // conditional2: {\n    //     initial: \"prompt\",\n    //     on: {\n    //         ENDSPEECH: [\n    //                 {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n    //                 {cond: (context) => context.option === 'disagreement', target: \"#root.dm1.positive.quest2\"},\n    //                 { target: \"others\" }] \n    //         },\n    //     states: {\n    //         prompt: {\n    //             entry: send(({type: \"SPEAK\", value: `Ok.`})),\n    //         }\n    //     }\n    // },\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Congratulations on your accomplishment! Here's a reward\"\n          })),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']\n          }\n        }\n      }\n    },\n    leftovers: {}\n  }\n}; // const fs = require('fs');\n// let writeStream = fs.createWriteStream('todo_list.txt');\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n// // close the stream\n// writeStream.end();","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","grammar","promptAndAsk","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","recResult","undefined","approval","actions","target","quest2","option","query1","conditional1","query3","distributor","ENDSPEECH","prompt","entry","type","value","others","create_do","task","to_do","if_ideas","query2","conditional2","create_ideas","idea","done","leftovers"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\n// import { list } from \"./todo_list\"\n\n\n// export function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//             invoke: {\n//                 id: 'rasa',\n//                 src: (context, event) => nluRequest(context.option),\n//                 onDone: {\n//                     actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n//                     (context: SDSContext, event: any) => console.log(event.data)],\n//                     target: ondone\n//                 },\n//                 onError: {\n//                     target: onerror,\n//                     actions: (context, event) => console.log(event.data)}\n// }})}\n\n// export function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: \"prompt\",\n//                 on: {\n//                     ENDSPEECH: [\n//                             {cond: (context) => context.option === cond1, target: target1},\n//                             {cond: (context) => context.option === cond2, target: target2},\n//                             { target: elses }] \n                        \n//                     },\n//                 states: {\n//                     prompt: {\n//                         entry: send(({type: \"SPEAK\", value: saythis})),\n//                     }\n//                 }\n// })}\n\n\n// const yes_no: { [index: string]: {approval?:  boolean } } = \n//          {  \"of course\": { approval: true },\n//             \"yes of course\": { approval: true },\n//             \"yes\": { approval: true },\n//             \"yeah\": { approval: true },\n//             \"yup\": { approval: true },\n//             \"sure\": { approval: true },\n//             // --\n//             \"no\": { approval: false },\n//             \"nah\": { approval: false },\n//             \"nope\": { approval: false },\n//             \"no way\": { approval: false },\n//             \"not sure\": { approval: false },\n//             \"of course not\": { approval: false}\n\n//         }\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                        on: {\n                            RECOGNISED: \n                                // target: '#root.dm1.query1',\n                                // actions: assign((context) => { return { option: context.recResult } }),\n                                [\n                                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                    actions: assign((context) => { return { approval: true } }),\n                                    target: \"summary_whole\"},\n                \n                                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                    actions: assign((context) => { return { approval: false} }),\n                                    target: \"time\"},\n                \n                                    // {cond: (context) => context.recResult === \"help\", target: \".help\" },\n                \n                                    { target: \".nomatch\" }\n                                ]\n                            },\n                        ...promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    },\n                    quest2: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query3',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Then what would you like to do?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    }\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n             }},\n            query1: {...Queries('conditional1', \"#root.initial_welcome.help\")},\n            conditional1: {...Conditional('agreement', \"create_do\", 'disagreement', \"if_ideas\", \"others\", `Cool.`)},\n            // {\n            //     initial: \"prompt\",\n            //     on: {\n            //         ENDSPEECH: [\n            //                 {cond: (context) => context.option === 'agreement', target: \"create_do\"},\n            //                 {cond: (context) => context.option === 'disagreement', target: \"if_ideas\"},\n            //                 { target: \"others\" }] \n                        \n            //         },\n            //     states: {\n            //         prompt: {\n            //             entry: send(({type: \"SPEAK\", value: `Cool.`})),\n            //         }\n            //     }\n            // },\n            // ....\n            query3: {...Queries('distributor', \"#root.initial_welcome.help\")},\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'games', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'music', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'enterntain_me', target: \"leftovers\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"Ummm, you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n                            }\n                        }\n            },\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"to_do\",\n                        actions: assign((context) => { return { task: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                             on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n            //             {cond: (context) => context.option === 'disagreement', target: \"quest2\"},\n            //             // { target: \"others\" }] \n            //         ]\n            //             // target: \"#root.dm1.query1\",\n            //             // actions: assign((context) => { return { option: context.recResult } }),\n            //         }},\n            //     ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            query2: {...Queries('conditional2',\"#root.initial_welcome.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", `Ok.`)},\n            // conditional2: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         ENDSPEECH: [\n            //                 {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n            //                 {cond: (context) => context.option === 'disagreement', target: \"#root.dm1.positive.quest2\"},\n            //                 { target: \"others\" }] \n                        \n            //         },\n            //     states: {\n            //         prompt: {\n            //             entry: send(({type: \"SPEAK\", value: `Ok.`})),\n            //         }\n            //     }\n            // },\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:\"Congratulations on your accomplishment! Here's a reward\" })),\n                             on: { ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']}\n                    }\n                }\n            },\n            leftovers: {}\n}})\n\n\n// const fs = require('fs');\n\n// let writeStream = fs.createWriteStream('todo_list.txt');\n\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n\n// // close the stream\n// writeStream.end();\n\n\n"]},"metadata":{},"sourceType":"module"}