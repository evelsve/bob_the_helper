{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    initial_welcome: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'prompt'\n          }\n        },\n        // ...\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What do you want to do?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        // ...\n        ask: {\n          entry: listen(),\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult.includes('appointment'),\n              target: [\"#root.dm1.who\", \"idle\"]\n            }, {\n              cond: context => context.recResult.includes('to-do') || context.recResult.includes('to do'),\n              target: [\"#root.dm3.denial\", \"idle\"]\n            }, {\n              cond: context => context.recResult.includes('timer'),\n              target: [\"#root.dm2.denial\", \"idle\"]\n            }, {\n              target: \"nomatch\"\n            }]\n          }\n        },\n        // ...\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        } // ...\n\n      }\n    },\n    // ____________\n    dm0: _objectSpread({}, dmMachine1),\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    dm3: _objectSpread({}, dmMachine3),\n    // ____________\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      // changeColour: asEffect((context) => {\n      //     console.log('Thinking...');\n      //     document.body.style.background = context.recResult;\n      // }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      }) // speak: asEffect((context) => {\n      //       console.log('Speaking...');\n      //       speak({text: context.ttsAgenda })\n      // }),\n\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dashboard.heroku.com/apps/app-lab-2';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 257,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","inspect","dmMachine1","dmMachine2","dmMachine3","url","iframe","useSpeechSynthesis","useSpeechRecognition","say","text","_context","type","value","listen","machine","id","states","initial_welcome","initial","idle","on","CLICK","prompt","entry","context","ENDSPEECH","ask","RECOGNISED","cond","recResult","includes","target","nomatch","dm0","dm1","dm2","dm3","asrtts","LISTEN","SPEAK","actions","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, Action, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\nimport { dmMachine0 } from \"./dmRasa\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n\n        initial_welcome: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        CLICK: 'prompt'\n                    }\n                },\n                // ...\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What do you want to do?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                // ...\n                ask: {\n                    entry: listen(),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                cond: (context) => context.recResult.includes('appointment'),\n                                target: [\"#root.dm1.who\", \"idle\"]\n                            },\n                            {\n                                cond: (context) => context.recResult.includes('to-do') || context.recResult.includes('to do'),\n                                target: [\"#root.dm3.denial\", \"idle\"]\n                            },\n                            {\n                                cond: (context) => context.recResult.includes('timer'),\n                                target: [\"#root.dm2.denial\", \"idle\"]\n                            },\n                            { target: \"nomatch\" }\n                        ],\n                    },\n                },\n                // ...\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                // ...\n            },\n        },\n        // ____________\n        dm0: {\n        ...dmMachine1\n        },\n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        dm3: {\n        ...dmMachine3\n        },\n        // ____________\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        },\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            // changeColour: asEffect((context) => {\n            //     console.log('Thinking...');\n            //     document.body.style.background = context.recResult;\n            // }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n            // speak: asEffect((context) => {\n\t        //       console.log('Speaking...');\n            //       speak({text: context.ttsAgenda })\n            // }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dashboard.heroku.com/apps/app-lab-2'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"]},"metadata":{},"sourceType":"module"}