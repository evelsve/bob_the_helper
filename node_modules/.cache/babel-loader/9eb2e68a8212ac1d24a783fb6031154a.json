{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/mood-admin/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, send, assign } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\"; // auto-open this asshole: https://cors-anywhere.herokuapp.com/corsdemo\n\nimport { dmMachine1 } from \"./dmPositive\";\nimport { dmMachine2 } from \"./dmNegative\"; // NOTE: We created separate grammars for the machines to \n// find answers in the most efficient way possible\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const grammar = {\n  \"of course\": {\n    approval: true\n  },\n  \"yes of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  // --\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  },\n  \"no way\": {\n    approval: false\n  },\n  \"not sure\": {\n    approval: false\n  },\n  \"of course not\": {\n    approval: false\n  }\n};\nexport const url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  } // ...          \n\n};\nexport const finished = {\n  \"finished\": {\n    finished: true\n  },\n  \"done\": {\n    finished: true\n  },\n  \"I've done the task\": {\n    finished: true\n  },\n  \"I'm finished\": {\n    finished: true\n  } // ...          \n\n}; // window.open(\"https://cors-anywhere.herokuapp.com/corsdemo\")\n// window.open(\"https://statecharts.io/inspect\")\n\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n}); // NOTE: created as much universal functions as possible\n\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nexport function promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\nexport function promptHelpBye(prompt, idled) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      },\n      help: {\n        entry: say(\"We may be miscommunicating.\"),\n        on: {\n          ENDSPEECH: [idled, \"#root.init.help\"]\n        }\n      },\n      goodbye: {\n        entry: say(\"\"),\n        on: {\n          ENDSPEECH: [idled, \"#root.init.goodbye\"]\n        }\n      }\n    }\n  };\n}\nexport function Endings(saythis, on_end) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: send({\n          type: \"SPEAK\",\n          value: saythis\n        }),\n        on: {\n          ENDSPEECH: on_end\n        }\n      }\n    }\n  };\n}\n_c = Endings;\nexport function Queries(ondone, onerror) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n_c2 = Queries;\nexport function Conditional(cond1, target1, cond2, target2, elses, idles, saythis) {\n  return {\n    initial: \"prompt\",\n    on: {\n      ENDSPEECH: [{\n        cond: context => context.option === cond1,\n        target: target1\n      }, {\n        cond: context => context.option === cond2,\n        target: target2\n      }, {\n        cond: context => context.option === 'help',\n        target: [idles, \"#root.init.help\"]\n      }, {\n        cond: context => context.option === 'bye',\n        target: [idles, \"#root.init.goodbye\"]\n      }, {\n        target: elses\n      }]\n    },\n    states: {\n      prompt: {\n        entry: send({\n          type: \"SPEAK\",\n          value: saythis\n        })\n      }\n    }\n  };\n}\n_c3 = Conditional;\nconst saySnippet = send(context => ({\n  type: \"SPEAK\",\n  value: \"\".concat(context.snippet)\n}));\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    init: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        // ...\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Good morning. How are you?\")),\n        query: _objectSpread({}, Queries(\"distributor\", 'welcome')),\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'positive',\n              target: [\"#root.dm1.positive\", \"idle\"]\n            }, {\n              cond: context => context.option === 'negative',\n              target: [\"#root.dm2.negative\", \"idle\"]\n            }, {\n              cond: context => context.option === 'todo',\n              target: [\"#root.dm1.create_do\", \"idle\"]\n            }, // REMINDER: delete answer after retraining\n            {\n              cond: context => context.option === 'ideas',\n              target: [\"#root.dm1.create_ideas\", \"idle\"]\n            }, {\n              cond: context => context.option === 'answer',\n              target: \"bob\"\n            }, {\n              cond: context => context.option === 'bob',\n              target: \"bob\"\n            }, {\n              cond: context => context.option === 'neutral',\n              target: \"neutral\"\n            }, {\n              cond: context => context.option === 'music',\n              target: [\"#root.dm2.negative.choose_music\", \"idle\"]\n            }, {\n              cond: context => context.option === 'games',\n              target: [\"#root.dm2.negative.choose_game\", \"idle\"]\n            }, {\n              cond: context => context.option === 'entertain',\n              target: [\"#root.dm2.negative.load_entertainment\", \"idle\"]\n            }, {\n              cond: context => context.option === 'help',\n              target: \"help\"\n            }, {\n              target: \"goodbye\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say('Ok.')\n            }\n          }\n        },\n        // ...\n        // answer: {\n        //     on: {\n        //         RECOGNISED: {\n        //             target: \"query\",\n        //             actions: assign((context) => { return { option: context.recResult } }),\n        //         }},\n        //     ...promptAndAsk(\"I am good, thank you. Tell me what you'd like to do.\")\n        // },\n        // ...\n        bob: _objectSpread({\n          // NOTE:\n          // This part could be developed more, into a seperate machine\n          // where the user could try out the limits of adaptivity of this DS\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"I am Bob the Helper. I am limited. Tell me what you'd like to do.\")),\n        // ...\n        neutral: _objectSpread({\n          // NOTE: \n          // We are aware that this is not efficient.\n          // We tried this part to see how the machines interact between themselves. \n          // For educational purposes only.\n          on: {\n            RECOGNISED: {\n              target: \"#root.dm2.negative.choose_music\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"You seem lost. What about listening to some music?\")),\n        // ...\n        help: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: \"bob\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: \".goodbye\"\n            }, {\n              cond: context => context.option === 'help',\n              target: \"help\"\n            }, {\n              target: \"goodbye\"\n            }]\n          }\n        }, promptHelpBye(\"I feel lost. Let's start over?\", \"#root.init\")),\n        //     // ...\n        goodbye: _objectSpread({}, Endings(\"Happy to help out. See you later.\", \"#root.init\"))\n      }\n    },\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click on me\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c4 = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      changeColour: asEffect(context => {\n        console.log('Repainting...');\n        document.body.style.background = context.recResult;\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c5 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mood-admin.herokuapp.com/model/parse';\nexport const nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 433,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Endings\");\n$RefreshReg$(_c2, \"Queries\");\n$RefreshReg$(_c3, \"Conditional\");\n$RefreshReg$(_c4, \"ReactiveButton\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/index.tsx"],"names":["React","ReactDOM","Machine","send","assign","useMachine","asEffect","useSpeechSynthesis","useSpeechRecognition","inspect","dmMachine1","dmMachine2","grammar","approval","url_grammar","url","finished","iframe","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","promptHelpBye","idled","help","goodbye","Endings","saythis","on_end","Queries","ondone","onerror","invoke","id","src","context","event","nluRequest","option","onDone","actions","data","intent","name","console","log","target","onError","Conditional","cond1","target1","cond2","target2","elses","idles","cond","saySnippet","snippet","machine","init","idle","CLICK","welcome","RECOGNISED","recResult","query","distributor","bob","neutral","undefined","dm1","dm2","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","changeColour","document","body","style","background","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","then","json","rootElement","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\";\n\n// auto-open this asshole: https://cors-anywhere.herokuapp.com/corsdemo\n\nimport { dmMachine1 } from \"./dmPositive\";\nimport { dmMachine2 } from \"./dmNegative\";\n\n\n\n\n// NOTE: We created separate grammars for the machines to \n// find answers in the most efficient way possible\nexport const grammar: { [index: string]: {approval?:  boolean } } = \n        {  \"of course\": { approval: true },\n        \"yes of course\": { approval: true },\n        \"yes\": { approval: true },\n        \"yeah\": { approval: true },\n        \"yup\": { approval: true },\n        \"sure\": { approval: true },\n        // --\n        \"no\": { approval: false },\n        \"nah\": { approval: false },\n        \"nope\": { approval: false },\n        \"no way\": { approval: false },\n        \"not sure\": { approval: false },\n        \"of course not\": { approval: false}\n\n        }\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n        {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n        \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n        \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n        \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n        \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n        \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n        \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n        \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n        // ...          \n}\n\n\nexport const finished: { [index: string]: {finished?:  boolean } } = \n        {  \"finished\": { finished: true },\n           \"done\": { finished: true },\n           \"I've done the task\": { finished: true },\n           \"I'm finished\": { finished: true }\n           // ...          \n}\n\n\n// window.open(\"https://cors-anywhere.herokuapp.com/corsdemo\")\n// window.open(\"https://statecharts.io/inspect\")\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\n// NOTE: created as much universal functions as possible\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')}\n        }\n    })\n}\n\nexport function promptHelpBye(prompt: string, idled: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')\n            },\n            help: {\n                entry: say(\"We may be miscommunicating.\"),\n                on: { ENDSPEECH: [idled,\"#root.init.help\"] }\n            },\n            goodbye:{\n                entry: say(\"\"),\n                on: { ENDSPEECH: [idled,\"#root.init.goodbye\" ] }\n            }\n    }}\n)}\n\n\nexport function Endings(saythis: string, on_end:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({        \n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: send(({type: \"SPEAK\",\n                    value: saythis})),\n                 on: { ENDSPEECH: on_end }\n            }\n        }    \n    }\n)}\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n                }\n            }\n)}\n\nexport function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, idles: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === cond1, target: target1},\n                            {cond: (context) => context.option === cond2, target: target2},\n                            {cond: (context) => context.option === 'help', target: [idles,\"#root.init.help\"]},\n                            {cond: (context) => context.option === 'bye', target: [idles,\"#root.init.goodbye\"]},\n                            { target: elses }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: saythis})),\n                    }\n                }\n            }\n)}\n\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n        init: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {on: {CLICK: 'welcome'}},\n                // ...\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"Good morning. How are you?\")\n                },\n                query: {...Queries(\"distributor\",'welcome')},\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n                            {cond: (context) => context.option === 'positive', target: [\"#root.dm1.positive\", \"idle\"]},\n                            {cond: (context) => context.option === 'negative', target: [\"#root.dm2.negative\", \"idle\"]},\n                            {cond: (context) => context.option === 'todo', target: [\"#root.dm1.create_do\", \"idle\"]},\n                            // REMINDER: delete answer after retraining\n                            {cond: (context) => context.option === 'ideas', target: [\"#root.dm1.create_ideas\", \"idle\"]},\n                            {cond: (context) => context.option === 'answer', target: \"bob\"}, \n                            {cond: (context) => context.option === 'bob', target: \"bob\"},\n                            {cond: (context) => context.option === 'neutral', target: \"neutral\"},\n                            {cond: (context) => context.option === 'music', target: [\"#root.dm2.negative.choose_music\", \"idle\"]},\n                            {cond: (context) => context.option === 'games', target: [\"#root.dm2.negative.choose_game\", \"idle\"]},\n                            {cond: (context) => context.option === 'entertain', target: [\"#root.dm2.negative.load_entertainment\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'help', target: \"help\"},\n\n                            {target: \"goodbye\"} ]\n                        },\n                    states: {\n                        prompt: {\n                            entry: say('Ok.')\n                        }\n                    }\n                },\n                // ...\n                // answer: {\n                //     on: {\n                //         RECOGNISED: {\n                //             target: \"query\",\n                //             actions: assign((context) => { return { option: context.recResult } }),\n                //         }},\n                //     ...promptAndAsk(\"I am good, thank you. Tell me what you'd like to do.\")\n                // },\n                // ...\n                bob: {\n                // NOTE:\n                // This part could be developed more, into a seperate machine\n                // where the user could try out the limits of adaptivity of this DS\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"I am Bob the Helper. I am limited. Tell me what you'd like to do.\")\n                },\n                // ...\n                neutral: {\n                // NOTE: \n                // We are aware that this is not efficient.\n                // We tried this part to see how the machines interact between themselves. \n                // For educational purposes only.\n                    on: {\n                        RECOGNISED: {\n                            target: \"#root.dm2.negative.choose_music\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"You seem lost. What about listening to some music?\")\n                },\n                // ...\n                help: {\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"bob\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \".goodbye\"},\n                        \n                            {cond: (context) => context.option === 'help', target: \"help\"},\n\n                            {target: \"goodbye\"}]  \n                    },\n                ...promptHelpBye(\"I feel lost. Let's start over?\", \"#root.init\")\n                },\n            //     // ...\n                goodbye: {...Endings(\"Happy to help out. See you later.\",\"#root.init\")}\n            },\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        }\n    }\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n});\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    ...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    \n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click on me\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mood-admin.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}