{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { promptAndAsk, nluRequest } from \"./index\";\nexport function Queries(ondone, onerror, option1, target1, option2, target2, option3, target3, othertarget) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    },\n    states: {\n      ondone: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: [{\n            cond: context => context.option === option1,\n            target: target1\n          }, {\n            cond: context => context.option === option2,\n            target: target2\n          }, {\n            cond: context => context.option === option3,\n            target: target3\n          }, {\n            target: othertarget\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"Ok.\"\n            }))\n          }\n        }\n      }\n    }\n  };\n}\n_c = Queries;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: _objectSpread({\n      initial: \"quest\",\n      states: {\n        quest: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Would you like to do a chore?\")) // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n        // query1: {\n        //     invoke: {\n        //         id: 'rasa',\n        //         src: (context, event) => nluRequest(context.option),\n        //         onDone: {\n        //             actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n        //             (context: SDSContext, event: any) => console.log(event.data)],\n        //             target: \"distributor\"\n        //         },\n        //         onError: {\n        //             target: \"#root.initial_welcome.help\",\n        //             actions: (context, event) => console.log(event.data)}\n        //     }\n        // },\n        // // ...\n        // distributor1: {\n        //     initial: \"prompt\",\n        //     on: {\n        //         ENDSPEECH: [\n        //             {cond: (context) => context.option === 'agreement', target: \"to_do\"},\n        //             {cond: (context) => context.option === 'disagreement', target: \"ideas\"},\n        //             { target: \"others\" }]\n        //         },\n        //     states: {\n        //             entry: send((context) => ({type: \"SPEAK\", value: `Ok.`})),\n        //         }\n        //     }\n\n      }\n    }, Queries('distributor1', \"#root.initial_welcome.help\", 'agreement', 'to_do', 'disagreement', 'ideas', 'help', '#root.initial_welcome.help', 'others')),\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"I suppose you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest'\n          }\n        }\n      }\n    },\n    // ...\n    to_do: {// initial: \"prompt\",\n      // on: {\n      //     ENDSPEECH: [\n      //         '#root.dm1.idle']\n      //     },\n      //     states: {\n      //         prompt: {\n      //             entry: send(({\n      //                 type: \"SPEAK\",\n      //                 value:\"I suppose you said something strange\" })),\n      //              on: { ENDSPEECH: '#root.dm1.positive.quest'}\n      //             }\n      //         }\n    },\n    // ...\n    ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"How about working on your ideas?\"))\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Queries\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","promptAndAsk","nluRequest","Queries","ondone","onerror","option1","target1","option2","target2","option3","target3","othertarget","invoke","id","src","context","event","option","onDone","actions","data","intent","name","console","log","target","onError","states","initial","on","ENDSPEECH","cond","prompt","entry","type","value","dmMachine1","idle","positive","quest","RECOGNISED","recResult","others","to_do","ideas"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\nimport { list } from \"./todo_list\"\n\n\n\nexport function Queries(ondone: string, onerror:string, option1:string, target1:string, option2:string, \n    target2:string, option3:string, target3:string, othertarget:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n            },\n            states:{\n            ondone:{\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    {cond: (context) => context.option === option1, target: target1},\n                    {cond: (context) => context.option === option2, target: target2},\n                    {cond: (context) => context.option === option3, target: target3},\n                    { target: othertarget }]\n                    \n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({type: \"SPEAK\", value: `Ok.`})),\n                }}\n    }}})}\n\n\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest\",\n            states: {\n                quest: {\n                        on: {\n                            RECOGNISED: {\n                                target: \"query\",\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Would you like to do a chore?\")\n                    },\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n            // query1: {\n            //     invoke: {\n            //         id: 'rasa',\n            //         src: (context, event) => nluRequest(context.option),\n            //         onDone: {\n            //             actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n            //             (context: SDSContext, event: any) => console.log(event.data)],\n            //             target: \"distributor\"\n            //         },\n            //         onError: {\n            //             target: \"#root.initial_welcome.help\",\n            //             actions: (context, event) => console.log(event.data)}\n            //     }\n            // },\n            // // ...\n            // distributor1: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: (context) => context.option === 'agreement', target: \"to_do\"},\n            //             {cond: (context) => context.option === 'disagreement', target: \"ideas\"},\n            //             { target: \"others\" }]\n                        \n            //         },\n            //     states: {\n            //             entry: send((context) => ({type: \"SPEAK\", value: `Ok.`})),\n            //         }\n            //     }\n            },\n            ...Queries('distributor1', \"#root.initial_welcome.help\", 'agreement', 'to_do', 'disagreement', 'ideas', 'help', '#root.initial_welcome.help', 'others')\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"I suppose you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                            }\n                        }\n            },\n            // ...\n            to_do: {\n                // initial: \"prompt\",\n                // on: {\n                //     ENDSPEECH: [\n                //         '#root.dm1.idle']\n                //     },\n                //     states: {\n                //         prompt: {\n                //             entry: send(({\n                //                 type: \"SPEAK\",\n                //                 value:\"I suppose you said something strange\" })),\n                //              on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                //             }\n                //         }\n\n            },\n            // ...\n            ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: \"query\",\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"How about working on your ideas?\")\n            }\n\n\n        }\n})\n"]},"metadata":{},"sourceType":"module"}