{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, promptAndAsk, promptHelpBye, say, grammar } from \"./index\";\nexport const url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  } // ...          \n\n};\nconst help_commands = [\"help\", \"I don't know\", \"help me\", \"I need help\", \"what does this mean\", \"wait what\", \"what do you mean\"];\nexport function Prompt_Nomatch_Timeout(prompt, no_match, timeout = 5000) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: timeout,\n          id: 'timeout'\n        })]\n      },\n      nomatch: {\n        entry: say(no_match),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n_c = Prompt_Nomatch_Timeout;\nexport const gram = {\n  \"finished\": {\n    finished: true\n  },\n  \"done\": {\n    finished: true\n  },\n  \"I've done the task\": {\n    finished: true\n  } // ...          \n\n};\nlet num = 0;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        // .... // ...\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              target: \"#root.dm1.create_do\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              target: \"#root.dm1.if_ideas\"\n            }]\n          }\n        }, promptAndAsk(\"I suppose you could do something productive. Do you agree?\")),\n        // .... // ...\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"So what would you like to do?\"))\n      }\n    },\n    // ....\n    query1: _objectSpread({}, Queries('conditional1', \"#root.init.help\")),\n    // ....\n    conditional1: _objectSpread({}, Conditional('agree', \"create_do\", 'disagree', \"#root.dm1.if_ideas\", \"#root.dm1.others\", '#root.dm2.idle', \"Ok.\")),\n    // ....\n    query3: _objectSpread({}, Queries(\"#root.init.distributor\", \"#root.init.help\")),\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: \"to_do\"\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            delay: 12000,\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.wait'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    // ....\n    query2: _objectSpread({}, Queries('conditional2', \"#root.init.help\")),\n    // ....\n    conditional2: _objectSpread({}, Conditional('agree', \"create_ideas\", 'disagree', \"#root.dm1.positive.quest2\", \"#root.dm1.others\", '#root.dm2.idle', \"Cool.\")),\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You should work on your idea of \".concat(context.idea, \".\")\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.wait'\n          }\n        }\n      }\n    },\n    // ...\n    wait: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => gram[context.recResult] !== undefined && gram[context.recResult].finished === true,\n          target: \"done\"\n        }, {\n          cond: context => gram[context.recResult] !== undefined && gram[context.recResult].finished === false,\n          target: \"wait\"\n        }, {\n          target: 'wait'\n        }]\n      }\n    }, promptHelpBye(\"Say 'finished', when you're done\", \"#root.init\")),\n    // ...\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: '#root.dm1.idle'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Congratulations on your accomplishment!\"),\n          on: {\n            ENDSPEECH: '#root.goodbbye'\n          }\n        }\n      }\n    },\n    // ...\n    others: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: '#root.goodbbye'},\n      states: {\n        prompt: {\n          entry: say(\"mmm, you said something strange\"),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest2'\n          }\n        }\n      }\n    }\n  }\n}; // done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n// annoy:{\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//             target: \"done\"},\n//             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//             target: \".wait\"}],\n//         // WAIT: '.wait'\n//         }\n//     },\n// ...\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: [\n//             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n//             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n//             {target: \".wait\"}], \n//         WAIT: '.prompt'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Have you done your task yet?\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n//         },\n//         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n//         wait: {\n//             entry: [\n//                 say('Hm.')\n//             ],\n//             on: {\n//                 ENDSPEECH: [\n//                     {cond: () => (num++) <= 2, target: 'prompt'},\n//                     {target: '#root.dm1.done'}\n//                 ]\n//             }\n//         }\n//     }\n// },\n// ----\n// quest1: {\n//     on: {\n//         RECOGNISED: [\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n//                 actions: assign((context) => { return { approval: true } }),\n//                 target: \"#root.dm1.create_do\"},\n//                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n//                 actions: assign((context) => { return { approval: false} }),\n//                 target: \"#root.dm1.if_ideas\"},\n//                 {target: \"#root.dm1.done.others\"}\n//                 // {cond: (context) => context.option === 'help', target: '.help'}\n//                 ]\n//         },\n//         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n//         },\\\n// ------\n// done: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n//                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n//         }, \n//             others: {\n//                 entry: say(\"Ummm, you said something strange\"),\n//                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n//                 }\n//         }\n//     }   \n// ------\n// idea: {\n//     initial: \"prompt\",\n//     // on: {ENDSPEECH: ['#root.dm1.idle']},\n//         states: {\n//             prompt: {\n//                 entry: send((context) => ({\n//                     type: \"SPEAK\",\n//                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n//                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n//             // },\n//     //         elevator: {\n//     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n//     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n//                 }\n//     }\n// }\n// ------\n// annoy: {\n//     initial: \"prompt\",\n//     on: {\n//         RECOGNISED: {\n//             target: \"conditional3\",\n//             actions: assign((context) => { return { option: context.recResult } }),\n//         },\n//         WAIT: 'wait'\n//     },\n//     states: {\n//         prompt: {\n//             entry: say(\"Let me know when you're done.\"),\n//             on: { ENDSPEECH: \"ask\" }\n//         },\n//         ask: {\n//             entry: [\n//                 send('LISTEN'),\n//                 send('WAIT', {delay: 10000})\n//             ]\n//         }\n//     }\n// },\n// ...\n// wait: {\n//     entry: [say('Have you done your task yet?')],\n//     on: {\n//         ENDSPEECH: [\n//             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n//             {target: '#root.dm1.idea_wait'}\n//         ]\n//     }\n// },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n// -----\n// ...\n// full_annoy:{\n//     initial: 'annoy',\n//     on: { \n//         // RECOGNISED: {\n//         //         cond: (context) => help_commands.includes(context.recResult),\n//         //         target: '#root.init.help'\n//         //             },\n//         MAXSPEECH: [\n//             { \n//                 cond: (context) => context.count < 5,\n//                 target: '#root.dm1.idea_wait'},\n//                 {cond: (context) => context.count == null,\n//                 actions: assign((context)=>{return {count: Number(0)}}),\n//                 target: '#root.dm1.maxspeech'}],\n//             },\n//     states:{\n//         hist:{type: 'history'},\n//         // .... // ...\n//         annoy: {\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n//                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n//                     target: \"#root.dm1.done\"}]\n//                 // },\n//                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n//                 //     target: \".nomatch\" }]\n//             },\n//             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n//         }\n// },\n// // ....\n// },\n// // ... \n// maxspeech:{\n//     initial: 'prompt',\n//     on: {\n//         ENDSPEECH: {\n//             actions: assign((context)=> {return {count: context.count+1 }}),\n//             target: 'full_annoy.hist'\n//                 }\n//             },\n//             // target: 'fill_appointment_info.hist'\n//         states: {\n//             prompt: {entry: say('I AM A STUPID BOT ')}\n//     }\n// },\n// ...\n// ..\n//     wait: {\n//         initial: 'prompt',\n//         on: { ENDSPEECH: '#root.dm1.annoy'},\n//         states: {\n//             prompt: {\n//                 entry: say(\"M.\"),\n//                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n//             },\n//             // ask: {\n//             //     entry: [\n//             //         send('LISTEN'),\n//             //         send('WAIT', {delay: 10000})\n//             //     ]}\n//             }\n// },\n//     // ...\n//     annoy: {\n//         initial: \"prompt\",\n//         on: {\n//             RECOGNISED: {\n//                 target: \"conditional3\",\n//                 actions: assign((context) => { return { option: context.recResult } }),\n//             },\n//             WAIT: 'wait'\n//         },\n//         states: {\n//             prompt: {\n//                 entry: say(\"Have you finished your task?\"),\n//                 on: { ENDSPEECH: \"ask\" }\n//             },\n//             ask: {\n//                 entry: [\n//                     send('LISTEN'),\n//                     send('WAIT', {delay: 10000})\n//                 ]\n//             }\n//         }\n//     },\n// conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},\n\nvar _c;\n\n$RefreshReg$(_c, \"Prompt_Nomatch_Timeout\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","promptAndAsk","promptHelpBye","say","grammar","url_grammar","url","help_commands","Prompt_Nomatch_Timeout","prompt","no_match","timeout","initial","states","entry","on","ENDSPEECH","ask","delay","id","nomatch","gram","finished","num","dmMachine1","idle","positive","quest1","RECOGNISED","cond","context","recResult","undefined","approval","target","quest2","actions","option","query1","conditional1","query3","create_do","task","to_do","type","value","if_ideas","query2","conditional2","create_ideas","idea","wait","done","others"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, promptAndAsk, Endings, promptHelpBye, say, grammar } from \"./index\";\n\n\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n            // ...          \n}\n\nconst help_commands = [\"help\", \"I don't know\", \"help me\", \"I need help\", \"what does this mean\", \"wait what\", \"what do you mean\"]\n\nexport function Prompt_Nomatch_Timeout(prompt: string, no_match:string, timeout=5000): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: timeout , id: 'timeout'})]\n            },\n            nomatch: {\n                entry: say(no_match),\n                on: { ENDSPEECH: \"prompt\" }\n            }}})\n}\n\nexport const gram: { [index: string]: {finished?:  boolean } } = \n         {  \"finished\": { finished: true },\n            \"done\": { finished: true },\n            \"I've done the task\": { finished: true }\n            // ...          \n}\n\nlet num = 0\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                // .... // ...\n                quest1: {\n                    on: {\n                        RECOGNISED: \n                            [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"#root.dm1.create_do\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"#root.dm1.if_ideas\"}\n                            ]\n                        },\n                    ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                },\n                // .... // ...\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            // ....\n            query1: {...Queries('conditional1',\"#root.init.help\")},\n            // ....\n            conditional1: {...Conditional('agree', \"create_do\", 'disagree', \"#root.dm1.if_ideas\", \"#root.dm1.others\", '#root.dm2.idle', `Ok.`)},\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({delay:12000,\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'},  \n                        }\n                    }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ....\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            // ....\n            conditional2: {...Conditional('agree', \"create_ideas\", 'disagree', \"#root.dm1.positive.quest2\", \"#root.dm1.others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}.` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'}\n                            }\n                }\n            },\n            // ...\n            wait: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => gram[context.recResult] !== undefined && gram[context.recResult].finished === true,\n                        target: \"done\"},\n\n                        {cond: (context) => gram[context.recResult] !== undefined && gram[context.recResult].finished === false,\n                        target: \"wait\"},\n                        {target: 'wait'}]  \n                },\n            ...promptHelpBye(\"Say 'finished', when you're done\", \"#root.init\")\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                on: {ENDSPEECH: '#root.dm1.idle'},\n                    states: {\n                        prompt: {\n                            entry: say(\"Congratulations on your accomplishment!\"),\n                            on: { ENDSPEECH: '#root.goodbbye'},\n                        }}\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: '#root.goodbbye'},\n                    states: {\n                        prompt: {\n                            entry: say(\"mmm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'},\n                        }\n                    }\n            }\n    }}\n)\n\n\n\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n\n          // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n\n            //             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n                        \n            //             {target: \".wait\"}], \n\n            //         WAIT: '.prompt'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Have you done your task yet?\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n            //         },\n            //         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n            //         wait: {\n            //             entry: [\n            //                 say('Hm.')\n            //             ],\n            //             on: {\n            //                 ENDSPEECH: [\n            //                     {cond: () => (num++) <= 2, target: 'prompt'},\n            //                     {target: '#root.dm1.done'}\n            //                 ]\n            //             }\n            //         }\n            //     }\n            // },\n\n\n            // ----\n\n            // quest1: {\n                //     on: {\n                //         RECOGNISED: [\n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                //                 actions: assign((context) => { return { approval: true } }),\n                //                 target: \"#root.dm1.create_do\"},\n            \n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                //                 actions: assign((context) => { return { approval: false} }),\n                //                 target: \"#root.dm1.if_ideas\"},\n\n                //                 {target: \"#root.dm1.done.others\"}\n\n                //                 // {cond: (context) => context.option === 'help', target: '.help'}\n                //                 ]\n                //         },\n                //         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n                //         },\\\n\n\n\n                // ------\n\n                // done: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                //                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                //         }, \n                //             others: {\n                //                 entry: say(\"Ummm, you said something strange\"),\n                //                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                //                 }\n                //         }\n                //     }   \n\n\n                // ------\n\n\n                // idea: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: send((context) => ({\n                //                     type: \"SPEAK\",\n                //                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n                //                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n                //             // },\n                //     //         elevator: {\n                //     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n                //     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n                //                 }\n                //     }\n                // }\n\n                // ------\n\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: {\n            //             target: \"conditional3\",\n            //             actions: assign((context) => { return { option: context.recResult } }),\n            //         },\n            //         WAIT: 'wait'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Let me know when you're done.\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [\n            //                 send('LISTEN'),\n            //                 send('WAIT', {delay: 10000})\n            //             ]\n            //         }\n            //     }\n            // },\n            // ...\n            // wait: {\n                \n            //     entry: [say('Have you done your task yet?')],\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n            //             {target: '#root.dm1.idea_wait'}\n            //         ]\n            //     }\n            // },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n\n\n            // -----\n\n                // ...\n                // full_annoy:{\n                //     initial: 'annoy',\n                //     on: { \n                //         // RECOGNISED: {\n                //         //         cond: (context) => help_commands.includes(context.recResult),\n                //         //         target: '#root.init.help'\n                //         //             },\n    \n                //         MAXSPEECH: [\n                //             { \n                //                 cond: (context) => context.count < 5,\n                //                 target: '#root.dm1.idea_wait'},\n    \n                //                 {cond: (context) => context.count == null,\n                //                 actions: assign((context)=>{return {count: Number(0)}}),\n                //                 target: '#root.dm1.maxspeech'}],\n                //             },\n                //     states:{\n                //         hist:{type: 'history'},\n                //         // .... // ...\n                //         annoy: {\n                //             on: {\n                //                 RECOGNISED: [{\n                //                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n                //                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n                //                     target: \"#root.dm1.done\"}]\n        \n                //                 // },\n                //                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n                //                 //     target: \".nomatch\" }]\n                //             },\n                //             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n                //         }\n                // },\n                // // ....\n                // },\n                // // ... \n                // maxspeech:{\n                //     initial: 'prompt',\n                //     on: {\n                //         ENDSPEECH: {\n                //             actions: assign((context)=> {return {count: context.count+1 }}),\n                //             target: 'full_annoy.hist'\n                //                 }\n                //             },\n                //             // target: 'fill_appointment_info.hist'\n                //         states: {\n                //             prompt: {entry: say('I AM A STUPID BOT ')}\n                //     }\n                // },\n\n                // ...\n\n                            // ..\n        //     wait: {\n        //         initial: 'prompt',\n        //         on: { ENDSPEECH: '#root.dm1.annoy'},\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"M.\"),\n        //                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n        //             },\n        //             // ask: {\n        //             //     entry: [\n        //             //         send('LISTEN'),\n        //             //         send('WAIT', {delay: 10000})\n        //             //     ]}\n        //             }\n        // },\n        //     // ...\n        //     annoy: {\n        //         initial: \"prompt\",\n        //         on: {\n        //             RECOGNISED: {\n        //                 target: \"conditional3\",\n        //                 actions: assign((context) => { return { option: context.recResult } }),\n        //             },\n        //             WAIT: 'wait'\n        //         },\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"Have you finished your task?\"),\n        //                 on: { ENDSPEECH: \"ask\" }\n        //             },\n        //             ask: {\n        //                 entry: [\n        //                     send('LISTEN'),\n        //                     send('WAIT', {delay: 10000})\n        //                 ]\n        //             }\n        //         }\n        //     },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},"]},"metadata":{},"sourceType":"module"}