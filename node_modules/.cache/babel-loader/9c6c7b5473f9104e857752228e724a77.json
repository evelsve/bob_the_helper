{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, say } from \"./index\";\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"#root.dm1.create_do\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"#root.dm1.if_ideas\"\n            } // {cond: (context) => context.option === 'help', target: '.help'}\n            ]\n          }\n        }, promptAndAsk(\"I suppose you could do something productive. Do you agree?\", '#root.dm2.idle')),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Then what would you like to do?\", '#root.dm2.idle'))\n      }\n    },\n    // ....\n    query3: _objectSpread({}, Queries('distributor', \"#root.init.help\")),\n    distributor: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'games',\n          target: ['#root.dm2.idle', \"#root.dm2.games\"]\n        }, {\n          cond: context => context.option === 'music',\n          target: ['#root.dm2.idle', \"#root.dm2.music\"]\n        }, {\n          cond: context => context.option === 'enterntain_me',\n          target: ['#root.dm2.idle', \"#root.dm2.entertain\"]\n        }, {\n          cond: context => context.option === 'help',\n          target: ['#root.dm2.idle', \"#root.init.help\"]\n        }, {\n          target: \"#root.dm1.distributor.others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Understood.\")\n        },\n        others: {\n          entry: say(\"Ummm, you said something strange\"),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest1'\n          }\n        }\n      }\n    },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: \"to_do\"\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\", '#root.dm2.idle')),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.annoy'\n          }\n        }\n      }\n    },\n    // ...\n    annoy: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: say(\"Have you done your task yet?\"),\n          on: {\n            ENDSPEECH: '#root.dm1.annoy'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\", '#root.dm2.idle')),\n    // ...\n    query2: _objectSpread({}, Queries('conditional2', \"#root.init.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", '#root.dm2.idle', \"Cool.\")),\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\", '#root.dm2.idle')),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You should work on your idea of \".concat(context.idea, \". Let me play some music while you are at it.\")\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","grammar","promptAndAsk","say","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","recResult","undefined","approval","actions","target","quest2","option","query3","distributor","ENDSPEECH","prompt","entry","others","create_do","task","to_do","type","value","annoy","if_ideas","query2","conditional2","create_ideas","idea","done"],"mappings":";AAAA,SAAwBA,IAAxB,EAA8BC,MAA9B,QAA4C,QAA5C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,YAAxC,EAAiFC,GAAjF,QAA4F,SAA5F;AAEA,OAAO,MAAMC,UAAoD,GAAI;AACjEC,EAAAA,OAAO,EAAE,MADwD;AAEjEC,EAAAA,MAAM,EAAE;AACJ;AACAC,IAAAA,IAAI,EAAE,EAFF;AAGJ;AACAC,IAAAA,QAAQ,EAAE;AACNH,MAAAA,OAAO,EAAE,QADH;AAENC,MAAAA,MAAM,EAAE;AACJG,QAAAA,MAAM;AACFC,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE,CACJ;AAACC,cAAAA,IAAI,EAAGC,OAAD,IAAaZ,OAAO,CAACY,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA4Cd,OAAO,CAACY,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,IAAxG;AACAC,cAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,uBAAO;AAAEG,kBAAAA,QAAQ,EAAE;AAAZ,iBAAP;AAA2B,eAA3C,CADf;AAEAE,cAAAA,MAAM,EAAE;AAFR,aADI,EAKJ;AAACN,cAAAA,IAAI,EAAGC,OAAD,IAAaZ,OAAO,CAACY,OAAO,CAACC,SAAT,CAAP,KAA+BC,SAA/B,IAA4Cd,OAAO,CAACY,OAAO,CAACC,SAAT,CAAP,CAA2BE,QAA3B,KAAwC,KAAxG;AACAC,cAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,uBAAO;AAAEG,kBAAAA,QAAQ,EAAE;AAAZ,iBAAP;AAA2B,eAA3C,CADf;AAEAE,cAAAA,MAAM,EAAE;AAFR,aALI,CASJ;AATI;AADZ;AADF,WAcKhB,YAAY,CAAC,4DAAD,EAA+D,gBAA/D,CAdjB,CADF;AAiBJiB,QAAAA,MAAM;AACFT,UAAAA,EAAE,EAAE;AACAC,YAAAA,UAAU,EAAE;AAERO,cAAAA,MAAM,EAAE,kBAFA;AAGRD,cAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,uBAAO;AAAEO,kBAAAA,MAAM,EAAEP,OAAO,CAACC;AAAlB,iBAAP;AAAsC,eAAtD;AAHP;AADZ;AADF,WAOKZ,YAAY,CAAC,iCAAD,EAAoC,gBAApC,CAPjB;AAjBF;AAFF,KAJN;AAkCA;AACAmB,IAAAA,MAAM,oBAAMtB,OAAO,CAAC,aAAD,EAAgB,iBAAhB,CAAb,CAnCN;AAoCAuB,IAAAA,WAAW,EAAE;AACTjB,MAAAA,OAAO,EAAE,QADA;AAETK,MAAAA,EAAE,EAAE;AACAa,QAAAA,SAAS,EAAE,CACH;AAACX,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,OAAvC;AAAgDF,UAAAA,MAAM,EAAE,CAAC,gBAAD,EAAkB,iBAAlB;AAAxD,SADG,EAEH;AAACN,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,OAAvC;AAAgDF,UAAAA,MAAM,EAAE,CAAC,gBAAD,EAAkB,iBAAlB;AAAxD,SAFG,EAGH;AAACN,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,eAAvC;AAAwDF,UAAAA,MAAM,EAAE,CAAC,gBAAD,EAAkB,qBAAlB;AAAhE,SAHG,EAIH;AAACN,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACO,MAAR,KAAmB,MAAvC;AAA+CF,UAAAA,MAAM,EAAE,CAAC,gBAAD,EAAkB,iBAAlB;AAAvD,SAJG,EAKH;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALG;AADX,OAFK;AAUTZ,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,GAAG,CAAC,aAAD;AADN,SADJ;AAIJuB,QAAAA,MAAM,EAAE;AACJD,UAAAA,KAAK,EAAEtB,GAAG,CAAC,kCAAD,CADN;AAEJO,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAFA;AAJJ;AAVC,KApCb;AAwDA;AACAI,IAAAA,SAAS;AACLtB,MAAAA,OAAO,EAAE,QADJ;AAELK,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRM,UAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,mBAAO;AAAEe,cAAAA,IAAI,EAAEf,OAAO,CAACC;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERI,UAAAA,MAAM,EAAE;AAFA;AADZ;AAFC,OAOEhB,YAAY,CAAC,4CAAD,EAA+C,gBAA/C,CAPd,CAzDT;AAkEA;AACA2B,IAAAA,KAAK,EAAE;AACHxB,MAAAA,OAAO,EAAE,QADN;AAEHC,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE5B,IAAI,CAAEgB,OAAD,KAAc;AACtBiB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,qDAA6ClB,OAAO,CAACe,IAArD;AAFiB,WAAd,CAAD,CADP;AAIAlB,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAJJ;AADJ;AAFL,KAnEP;AA6EA;AACAS,IAAAA,KAAK,EAAC;AACF3B,MAAAA,OAAO,EAAE,QADP;AAEFC,MAAAA,MAAM,EAAE;AACAkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,GAAG,gCADN;AAEJO,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAFA;AADR;AAFN,KA9EN;AAsFA;AACAU,IAAAA,QAAQ;AACJvB,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRO,UAAAA,MAAM,EAAE,kBADA;AAERD,UAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,mBAAO;AAAEO,cAAAA,MAAM,EAAEP,OAAO,CAACC;AAAlB,aAAP;AAAsC,WAAtD;AAFP;AADZ;AADA,OAMDZ,YAAY,CAAC,uCAAD,EAA0C,gBAA1C,CANX,CAvFR;AA+FA;AACAgC,IAAAA,MAAM,oBAAMnC,OAAO,CAAC,cAAD,EAAgB,iBAAhB,CAAb,CAhGN;AAiGAoC,IAAAA,YAAY,oBAAMnC,WAAW,CAAC,WAAD,EAAc,cAAd,EAA8B,cAA9B,EAA8C,2BAA9C,EAA2E,QAA3E,EAAqF,gBAArF,UAAjB,CAjGZ;AAkGA;AACAoC,IAAAA,YAAY;AACR/B,MAAAA,OAAO,EAAE,QADD;AAERK,MAAAA,EAAE,EAAE;AACAC,QAAAA,UAAU,EAAE;AACRO,UAAAA,MAAM,EAAE,MADA;AAERD,UAAAA,OAAO,EAAEnB,MAAM,CAAEe,OAAD,IAAa;AAAE,mBAAO;AAAEwB,cAAAA,IAAI,EAAExB,OAAO,CAACC;AAAhB,aAAP;AAAoC,WAApD;AAFP;AADZ;AAFI,OAODZ,YAAY,CAAC,oBAAD,EAAuB,gBAAvB,CAPX,CAnGZ;AA4GA;AACAmC,IAAAA,IAAI,EAAE;AACFhC,MAAAA,OAAO,EAAE,QADP;AAEF;AACIC,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE5B,IAAI,CAAEgB,OAAD,KAAc;AACtBiB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,4CAAoClB,OAAO,CAACwB,IAA5C;AAFiB,WAAd,CAAD,CADP;AAIJ3B,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE;AAAb;AAJA;AADJ;AAHV,KA7GN;AAyHA;AACAe,IAAAA,IAAI,EAAE;AACFjC,MAAAA,OAAO,EAAE,QADP;AAEF;AACIC,MAAAA,MAAM,EAAE;AACJkB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,GAAG,CAAC,yDAAD,CADN;AAEJO,UAAAA,EAAE,EAAE;AAAEa,YAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,yBAAnB;AAAb;AAFA;AADJ;AAHV;AA1HN;AAFyD,CAA9D","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, nluRequest, misUnderstood, say } from \"./index\";\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                    on: {\n                        RECOGNISED: [\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                actions: assign((context) => { return { approval: true } }),\n                                target: \"#root.dm1.create_do\"},\n            \n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                actions: assign((context) => { return { approval: false} }),\n                                target: \"#root.dm1.if_ideas\"},\n\n                                // {cond: (context) => context.option === 'help', target: '.help'}\n                                ]\n                        },\n                        ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\", '#root.dm2.idle')\n                        },\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"Then what would you like to do?\", '#root.dm2.idle')\n                    }\n                }\n            },\n            // ....\n            query3: {...Queries('distributor', \"#root.init.help\")},\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'games', target: ['#root.dm2.idle',\"#root.dm2.games\"]},\n                            {cond: (context) => context.option === 'music', target: ['#root.dm2.idle',\"#root.dm2.music\"]},\n                            {cond: (context) => context.option === 'enterntain_me', target: ['#root.dm2.idle',\"#root.dm2.entertain\"]},\n                            {cond: (context) => context.option === 'help', target: ['#root.dm2.idle',\"#root.init.help\"]},\n                            { target: \"#root.dm1.distributor.others\" }] \n                    },\n                states: {\n                    prompt: {\n                        entry: say(\"Understood.\"),\n                    },\n                    others: {\n                        entry: say(\"Ummm, you said something strange\"),\n                        on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n                        }\n                }\n            },\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\", '#root.dm2.idle')\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.annoy'}\n                        }}\n            },\n            // ...\n            annoy:{\n                initial: \"prompt\",\n                states: {\n                        prompt: {\n                            entry: say(`Have you done your task yet?`),\n                            on: { ENDSPEECH: '#root.dm1.annoy'}\n                    }}\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\", '#root.dm2.idle')\n            },\n            // ...\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\", '#root.dm2.idle')\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}. Let me play some music while you are at it.` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                            on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                    }\n                }\n            }         \n}})\n\n\n\n"]},"metadata":{},"sourceType":"module"}