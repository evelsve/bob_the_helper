{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\"; // import { MachineConfig } from \"xstate\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, send, assign } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst saySnippet = send(context => ({\n  type: \"SPEAK\",\n  value: \"\".concat(context.snippet)\n}));\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    initial_welcome: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"What would you like to do?\")),\n        // ...\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (context, event) => console.log(event.data)],\n              target: \"distributor\"\n            },\n            onError: {\n              target: 'welcome',\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'todo',\n              target: [\"#root.dm3.denial\", \"idle\"]\n            }, {\n              target: [\"#root.dm2.denial\", \"idle\"],\n              cond: context => context.option === 'timer'\n            }, {\n              target: [\"#root.dm1.who\", \"idle\"],\n              cond: context => context.option === 'appointment'\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Great.\"\n              }))\n            }\n          }\n        }\n      }\n    },\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    dm3: _objectSpread({}, dmMachine3),\n    // ____________\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dashboard.heroku.com/apps/app-lab-2';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 276,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","send","assign","useMachine","asEffect","inspect","dmMachine1","dmMachine2","dmMachine3","url","iframe","useSpeechSynthesis","useSpeechRecognition","say","text","_context","type","value","listen","saySnippet","context","snippet","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","machine","id","initial_welcome","idle","CLICK","welcome","RECOGNISED","target","actions","option","recResult","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","distributor","cond","dm1","dm2","dm3","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\n// import { MachineConfig } from \"xstate\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\n\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n\n        initial_welcome: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        CLICK: 'welcome'\n                    }\n                },\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }    \n                    },\n                            ...promptAndAsk(\"What would you like to do?\")\n                },\n                // ...\n                query: {\n                    invoke: {\n                        id: 'rasa',\n                        src: (context, event) => nluRequest(context.option),\n                        onDone: {\n                            actions: [assign((context, event) => { return  {option: event.data.intent.name} }), (context: SDSContext, event: any) => console.log(event.data)],\n                            target: \"distributor\"\n        \n                        },\n                        onError: {\n                            target: 'welcome',\n                            actions: (context, event) => console.log(event.data)\n                        }\n                    }\n                },\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n\n                            { cond: (context) => context.option === 'todo', \n                            target: [\"#root.dm3.denial\", \"idle\"],\n                            },\n\n                            { target: [\"#root.dm2.denial\", \"idle\"], cond: (context) => context.option === 'timer' },\n                            { target: [\"#root.dm1.who\", \"idle\"], cond: (context) => context.option === 'appointment' }\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Great.`\n                            })),\n                        }\n                    },\n                },    \n            },\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        dm3: {\n        ...dmMachine3\n        },\n        // ____________\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        },\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n    });\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dashboard.heroku.com/apps/app-lab-2'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}