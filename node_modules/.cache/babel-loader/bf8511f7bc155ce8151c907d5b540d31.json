{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { say, listen } from \"./index\"; // import { grammar } from  \"./choices\";\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Peter\": {\n    person: \"Peter Horter\"\n  },\n  \"Jack\": {\n    person: \"Jack Tomerson\"\n  },\n  \"Tom\": {\n    person: \"Tom Peterson\"\n  },\n  \"Jill\": {\n    person: \"Jill Panele\"\n  },\n  \"Jane\": {\n    person: \"Jane Mayer\"\n  },\n  \"Anna\": {\n    person: \"Anna Pana\"\n  },\n  \"Lora\": {\n    person: \"Lora Cat\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday next week\": {\n    day: \"Monday next week\"\n  },\n  \"on Tuesday next week\": {\n    day: \"Tuesday next week\"\n  },\n  \"on Wednesday next week\": {\n    day: \"Wednesday next week\"\n  },\n  \"on Thursday next week\": {\n    day: \"Thursday next week\"\n  },\n  \"on Friday next week\": {\n    day: \"Friday next week\"\n  },\n  \"on Saturday next week\": {\n    day: \"Saturday next week\"\n  },\n  \"on Sunday next week\": {\n    day: \"Sunday next week\"\n  },\n  \"8\": {\n    time: \"eight\"\n  },\n  \"9\": {\n    time: \"nine\"\n  },\n  \"10\": {\n    time: \"ten\"\n  },\n  \"11\": {\n    time: \"eleven\"\n  },\n  \"at noon\": {\n    time: \"twelve\"\n  },\n  \"12\": {\n    time: \"twelve\"\n  },\n  \"1\": {\n    time: \"thirteen\"\n  },\n  \"2\": {\n    time: \"fourteen\"\n  },\n  \"3\": {\n    time: \"fifteen\"\n  },\n  \"4\": {\n    time: \"sixteen\"\n  },\n  \"5\": {\n    time: \"seventeen\"\n  },\n  \"6\": {\n    time: \"six\"\n  },\n  \"7\": {\n    time: \"seven\"\n  },\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n};\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"approval\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" it is. On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    approval: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"summary_whole\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Great. \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"summary_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What time is your meeting?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    summary_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    summary_whole: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"created\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I do not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // ...\n    created: {\n      initial: \"prompt\",\n      states: {\n        idle: {},\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appoinment has been created.\"\n          })),\n          on: {\n            ENDSPEECH: \"#root.initial_welcome.help\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","listen","grammar","person","day","time","approval","dmMachine1","initial","states","idle","who","on","RECOGNISED","cond","context","recResult","actions","target","prompt","entry","ENDSPEECH","ask","nomatch","type","value","undefined","summary_time","summary_whole","created"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen} from \"./index\";\n// import { grammar } from  \"./choices\";\n\nconst grammar: { \n    [index: string]: {\n        appointment?: string,\n        to_do?: string,\n        timer?: string,\n        person?: string,\n        day?: string,\n        time?: string,\n        approval?:  boolean,\n    }} =  {\n            \"John\": { person: \"John Appleseed\" },\n            \"Peter\": { person: \"Peter Horter\" },\n            \"Jack\": { person: \"Jack Tomerson\" },\n            \"Tom\": { person: \"Tom Peterson\" },\n            \"Jill\": { person: \"Jill Panele\" },\n            \"Jane\": { person: \"Jane Mayer\" },\n            \"Anna\": { person: \"Anna Pana\" },\n            \"Lora\": { person: \"Lora Cat\" },\n\n            \"on Monday\": { day: \"Monday\" },\n            \"on Tuesday\": { day: \"Tuesday\" },\n            \"on Wednesday\": { day: \"Wednesday\" },\n            \"on Thursday\": { day: \"Thursday\" },\n            \"on Friday\": { day: \"Friday\" },\n            \"on Saturday\": { day: \"Saturday\" },\n            \"on Sunday\": { day: \"Sunday\" },\n\n            \"on Monday next week\": { day: \"Monday next week\" },\n            \"on Tuesday next week\": { day: \"Tuesday next week\" },\n            \"on Wednesday next week\": { day: \"Wednesday next week\" },\n            \"on Thursday next week\": { day: \"Thursday next week\" },\n            \"on Friday next week\": { day: \"Friday next week\" },\n            \"on Saturday next week\": { day: \"Saturday next week\" },\n            \"on Sunday next week\": { day: \"Sunday next week\" },\n\n            \"8\": { time: \"eight\" },\n            \"9\": { time: \"nine\" },\n            \"10\": { time: \"ten\" },\n            \"11\": { time: \"eleven\" },\n            \"at noon\": { time: \"twelve\" },\n            \"12\": { time: \"twelve\" },\n            \"1\": { time: \"thirteen\" },\n            \"2\": { time: \"fourteen\" },\n            \"3\": { time: \"fifteen\" },\n            \"4\": { time: \"sixteen\" },\n            \"5\": { time: \"seventeen\" },\n            \"6\": { time: \"six\" },\n            \"7\": { time: \"seven\" },\n\n            \"of course\": { approval: true },\n            \"yes\": { approval: true },\n            \"yeah\": { approval: true },\n            \"yup\": { approval: true },\n            \"sure\": { approval: true },\n            \"no\": { approval: false },\n            \"nah\": { approval: false },\n            \"nope\": { approval: false }}\n\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        // ...\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                        target: \"approval\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} it is. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        // ...\n        approval: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                    actions: assign((context) => { return { approval: true } }),\n                    target: \"summary_whole\"},\n\n                    {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                    actions: assign((context) => { return { approval: false} }),\n                    target: \"time\"},\n\n                    { target: \".nomatch\" }\n                    ]\n                },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Great. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        // ...\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                        target: \"summary_time\"\n                    },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        // ...\n        summary_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        actions: assign((context) => { return { approval: true } }),\n                        target: \"created\"\n                    },\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        actions: assign((context) => { return { approval: false } }),\n                        target: \"who\"\n                    },\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        // ...\n        summary_whole: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        actions: assign((context) => { return { approval: true } }),\n                        target: \"created\"\n                    },\n                    {\n                        cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        actions: assign((context) => { return { approval: false } }),\n                        target: \"who\"\n                    },\n                { target: \".nomatch\" }\n            ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }    \n        },\n        // ...\n        created: {\n            initial: \"prompt\",\n            states: {\n                idle: {},\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appoinment has been created.`\n                    })),\n                     on: { ENDSPEECH: \"#root.initial_welcome.help\" }\n                    }\n                }    \n            }\n    }   \n})\n"]},"metadata":{},"sourceType":"module"}