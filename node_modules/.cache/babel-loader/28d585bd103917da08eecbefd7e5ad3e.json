{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { promptAndAsk, nluRequest } from \"./index\"; // import { list } from \"./todo_list\"\n\nexport function Queries(ondone, onerror) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n_c = Queries;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest\",\n      states: {\n        quest: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query1',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Would you like to do a chore?\")) // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n\n      }\n    },\n    query1: _objectSpread({}, Queries('distributor1', \"#root.initial_welcome.help\")),\n    distributor1: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'agreement',\n          target: \"to_do\"\n        }, {\n          cond: context => context.option === 'disagreement',\n          target: \"ideas\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Cool.\"\n          }))\n        }\n      }\n    },\n    // others: {\n    //     initial: \"prompt\",\n    //     on: {\n    //         RECOGNISED: [\n    //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n    //             actions: assign((context) => { return { approval: true } }),\n    //             target: \"created\"},\n    //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n    //             actions: assign((context) => { return { approval: false } }),\n    //             target: \"who\"},\n    //             {cond: (context) => context.recResult === \"help\",\n    //             target: \".help\" },\n    //         { target: \".nomatch\" }\n    //     ]\n    //     },\n    //     states: {\n    //         prompt: {\n    //             entry: send((context) => ({\n    //                 type: \"SPEAK\",\n    //                 value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n    //             })),\n    //             on: { ENDSPEECH: \"ask\" }\n    //         },\n    //         ask: {\n    //             entry: listen()\n    //         },\n    //         // help: {\n    //             // entry: say(\"We may be miscommunicating. Let's take a step back\"),\n    //             // on: { ENDSPEECH: \"#root.dm1.approval\" }\n    //         // }\n    // }\n    // },\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"I suppose you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest'\n          }\n        }\n      }\n    },\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"These are the things you can choose to work on.\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest'\n          }\n        }\n      }\n    },\n    // ...\n    ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: \"#root.dm1.query1\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"How about working on your ideas?\"))\n  }\n};\n\nconst fss = require('fs');\n\nlet writeStream = fss.createWriteStream('todo_list.txt'); // write some data with a base64 encoding\n\nwriteStream.write('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64'); // the finish event is emitted when all data has been flushed from the stream\n\nwriteStream.on('listen', () => {\n  console.log('to file!!');\n}); // close the stream\n\nwriteStream.end();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queries\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","promptAndAsk","nluRequest","Queries","ondone","onerror","invoke","id","src","context","event","option","onDone","actions","data","intent","name","console","log","target","onError","dmMachine1","initial","states","idle","positive","quest","on","RECOGNISED","recResult","query1","distributor1","ENDSPEECH","cond","prompt","entry","type","value","others","to_do","ideas","fss","require","writeStream","createWriteStream","write","end"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\n// import { list } from \"./todo_list\"\nimport * as fs from \"fs\"\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n}})}\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest\",\n            states: {\n                quest: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query1',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Would you like to do a chore?\")\n                    }\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n        }},\n            query1: { \n                ...Queries('distributor1', \"#root.initial_welcome.help\")\n            },\n            distributor1: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'agreement', target: \"to_do\"},\n                            {cond: (context) => context.option === 'disagreement', target: \"ideas\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({type: \"SPEAK\", value: `Cool.`})),\n                    }\n                }\n            },\n            // others: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             actions: assign((context) => { return { approval: true } }),\n            //             target: \"created\"},\n    \n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             actions: assign((context) => { return { approval: false } }),\n            //             target: \"who\"},\n    \n            //             {cond: (context) => context.recResult === \"help\",\n            //             target: \".help\" },\n    \n            //         { target: \".nomatch\" }\n            //     ]\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: send((context) => ({\n            //                 type: \"SPEAK\",\n            //                 value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n            //             })),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: listen()\n            //         },\n            //         // help: {\n            //             // entry: say(\"We may be miscommunicating. Let's take a step back\"),\n            //             // on: { ENDSPEECH: \"#root.dm1.approval\" }\n            //         // }\n                // }\n            // },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"I suppose you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                            }\n                        }\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"These are the things you can choose to work on.\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                            }\n                        }\n\n            },\n            // ...\n            ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: \"#root.dm1.query1\",\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"How about working on your ideas?\")\n            }\n\n\n        }})\n\n\nconst fss = require('fs');\n\nlet writeStream = fss.createWriteStream('todo_list.txt');\n\n// write some data with a base64 encoding\nwriteStream.write('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// the finish event is emitted when all data has been flushed from the stream\nwriteStream.on('listen', () => {\n    console.log('to file!!');\n});\n\n// close the stream\nwriteStream.end();\n\n\n"]},"metadata":{},"sourceType":"module"}