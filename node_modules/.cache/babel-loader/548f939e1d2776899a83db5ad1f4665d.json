{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { promptAndAsk, nluRequest } from \"./index\"; // import { list } from \"./todo_list\"\n\nexport function Queries(ondone, onerror) {\n  return {\n    invoke: {\n      id: 'rasa',\n      src: (context, event) => nluRequest(context.option),\n      onDone: {\n        actions: [assign((context, event) => {\n          return {\n            option: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)],\n        target: ondone\n      },\n      onError: {\n        target: onerror,\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n_c = Queries;\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query1',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Then what would you like to do?\")) // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n\n      }\n    },\n    query1: _objectSpread({}, Queries('conditional1', \"#root.initial_welcome.help\")),\n    conditional1: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'agreement',\n          target: \"create_do\"\n        }, {\n          cond: context => context.option === 'disagreement',\n          target: \"if_ideas\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ok.\"\n          })\n        }\n      }\n    },\n    // ....\n    query3: _objectSpread({}, Queries('conditional1', \"#root.initial_welcome.help\")),\n    distributor: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'games',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'music',\n          target: \"leftovers\"\n        }, {\n          cond: context => context.option === 'enterntain_me',\n          target: \"leftovers\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ok.\"\n          })\n        }\n      }\n    },\n    // ...\n    others: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ummm, you said something strange\"\n          }),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest1'\n          }\n        }\n      }\n    },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"to_do\",\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    query2: _objectSpread({}, Queries('conditional2', \"#root.initial_welcome.help\")),\n    conditional2: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.option === 'agreement',\n          target: \"create_ideas\"\n        }, {\n          cond: context => context.option === 'disagreement',\n          target: \"quest2\"\n        }, {\n          target: \"others\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send({\n            type: \"SPEAK\",\n            value: \"Ok.\"\n          })\n        }\n      }\n    },\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: ['#root.dm1.idle']\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Congratulations on your accomplishment! Here's a reward\"\n          })),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']\n          }\n        }\n      }\n    },\n    leftovers: {}\n  }\n}; // const fs = require('fs');\n// let writeStream = fs.createWriteStream('todo_list.txt');\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n// // close the stream\n// writeStream.end();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queries\");","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","promptAndAsk","nluRequest","Queries","ondone","onerror","invoke","id","src","context","event","option","onDone","actions","data","intent","name","console","log","target","onError","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","recResult","quest2","query1","conditional1","ENDSPEECH","cond","prompt","entry","type","value","query3","distributor","others","create_do","task","to_do","if_ideas","query2","conditional2","create_ideas","idea","done","leftovers"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\n// import { list } from \"./todo_list\"\n\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n}})}\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query1',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"As you are in a good mood, I suppose you could do something productive. Do you agree?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    },\n                    quest2: {\n                        on: {\n                            RECOGNISED: {\n                                target: '#root.dm1.query3',\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Then what would you like to do?\")\n                        // NOTE: TEXT COULD BE IMPROVED\n                    }\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n             }},\n            query1: {...Queries('conditional1', \"#root.initial_welcome.help\")},\n            conditional1: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'agreement', target: \"create_do\"},\n                            {cond: (context) => context.option === 'disagreement', target: \"if_ideas\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ....\n            query3: {...Queries('conditional1', \"#root.initial_welcome.help\")},\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'games', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'music', target: \"leftovers\"},\n                            {cond: (context) => context.option === 'enterntain_me', target: \"leftovers\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"Ummm, you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n                            }\n                        }\n            },\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"to_do\",\n                        actions: assign((context) => { return { task: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                             on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n            //             {cond: (context) => context.option === 'disagreement', target: \"quest2\"},\n            //             // { target: \"others\" }] \n            //         ]\n            //             // target: \"#root.dm1.query1\",\n            //             // actions: assign((context) => { return { option: context.recResult } }),\n            //         }},\n            //     ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            query2: {...Queries('conditional2',\"#root.initial_welcome.help\")},\n            conditional2: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === 'agreement', target: \"create_ideas\"},\n                            {cond: (context) => context.option === 'disagreement', target: \"quest2\"},\n                            { target: \"others\" }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: ['#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:\"Congratulations on your accomplishment! Here's a reward\" })),\n                             on: { ENDSPEECH: ['#root.dm1.idle', '#root.initial_welcome.goodbye']}\n                    }\n                }\n            },\n            leftovers: {}\n}})\n\n\n// const fs = require('fs');\n\n// let writeStream = fs.createWriteStream('todo_list.txt');\n\n// // write some data with a base64 encoding\n// writeStream.append('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// // the finish event is emitted when all data has been flushed from the stream\n// writeStream.on('finished', () => {\n//     console.log('to file!!');\n// });\n\n// // close the stream\n// writeStream.end();\n\n\n"]},"metadata":{},"sourceType":"module"}