{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, say } from \"./index\";\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest1\",\n      states: {\n        quest1: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"#root.dm1.create_do\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"#root.dm1.if_ideas\"\n            }, {\n              target: \"#root.dm1.done.others\"\n            } // {cond: (context) => context.option === 'help', target: '.help'}\n            ]\n          }\n        }, promptAndAsk(\"I suppose you could do something productive. Do you agree?\")),\n        quest2: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: '#root.dm1.query3',\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"So what would you like to do?\"))\n      }\n    },\n    // ....\n    query3: _objectSpread({}, Queries(\"#root.init.distributor\", \"#root.init.help\")),\n    // NOT USED\n    // distributor: {\n    // initial: \"prompt\",\n    // on: {\n    //     ENDSPEECH: [\n    //             {cond: (context) => context.option === 'create', target: ['#root.dm2.idle',\"#root.dm2.games\"]},\n    //             {cond: (context) => context.option === 'music', target: ['#root.dm2.idle',\"#root.dm2.music\"]},\n    //             {cond: (context) => context.option === 'enterntain_me', target: ['#root.dm2.idle',\"#root.dm2.entertain\"]},\n    //             {cond: (context) => context.option === 'games', target: ['#root.dm2.idle',\"#root.dm2.games\"]},\n    //             {cond: (context) => context.option === 'music', target: ['#root.dm2.idle',\"#root.dm2.music\"]},\n    //             {cond: (context) => context.option === 'enterntain_me', target: ['#root.dm2.idle',\"#root.dm2.entertain\"]},\n    //             {cond: (context) => context.option === 'help', target: ['#root.dm2.idle',\"#root.init.help\"]},\n    //             { target: \"#root.dm1.distributor.others\" }] \n    //     },\n    //     states: {\n    //         prompt: {\n    //             entry: say(\"Understood.\"),\n    //         },\n    //         others: {\n    //             entry: say(\"Ummm, you said something strange\"),\n    //             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n    //             }\n    //     }\n    // },\n    //...\n    create_do: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: \"to_do\"\n        }\n      }\n    }, promptAndAsk(\"Tell me the things you have to accomplish.\")),\n    // ...\n    to_do: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Now go and complete the following tasks: \".concat(context.task)\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.annoy'\n          }\n        }\n      }\n    },\n    // ...\n    // annoy:{\n    //     initial: \"prompt\",\n    //     on: {\n    //         RECOGNISED: [\n    //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n    //             target: \"done\"},\n    //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n    //             target: \".wait\"}],\n    //         // WAIT: '.wait'\n    //         }\n    //     },\n    // ...\n    annoy: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          target: \"done\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          target: \".ask\"\n        }],\n        WAIT: '.wait'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Have you done your task yet?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [send('LISTEN'), send('WAIT', {\n            delay: 3000\n          })]\n        },\n        wait: {\n          entry: [say('Sorry, I did not get your input!')],\n          on: {\n            ENDSPEECH: [// {cond: () => (counter++) <= 2, target: 'prompt'},\n            {\n              target: 'prompt'\n            }]\n          }\n        }\n      }\n    },\n    // ...\n    if_ideas: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: '#root.dm1.query2',\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Then how about working on your ideas?\")),\n    // ...\n    query2: _objectSpread({}, Queries('conditional2', \"#root.init.help\")),\n    conditional2: _objectSpread({}, Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"#root.dm1.done.others\", '#root.dm2.idle', \"Cool.\")),\n    // ...\n    create_ideas: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"idea\",\n          actions: assign(context => {\n            return {\n              idea: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"Tell me your idea.\")),\n    // ...\n    idea: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You should work on your idea of \".concat(context.idea, \". Let me play some music while you are at it.\")\n          })),\n          on: {\n            ENDSPEECH: '#root.dm1.done'\n          }\n        }\n      }\n    },\n    // ...\n    done: {\n      initial: \"prompt\",\n      // on: {ENDSPEECH: ['#root.dm1.idle']},\n      states: {\n        prompt: {\n          entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n          on: {\n            ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']\n          }\n        },\n        others: {\n          entry: say(\"Ummm, you said something strange\"),\n          on: {\n            ENDSPEECH: '#root.dm1.positive.quest2'\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","Queries","Conditional","grammar","promptAndAsk","say","dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","recResult","undefined","approval","actions","target","quest2","option","query3","create_do","task","to_do","prompt","entry","type","value","ENDSPEECH","annoy","WAIT","ask","delay","wait","if_ideas","query2","conditional2","create_ideas","idea","done","others"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, Conditional, grammar, promptAndAsk, promptHelpBye, say } from \"./index\";\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                quest1: {\n                    on: {\n                        RECOGNISED: [\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                actions: assign((context) => { return { approval: true } }),\n                                target: \"#root.dm1.create_do\"},\n            \n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                actions: assign((context) => { return { approval: false} }),\n                                target: \"#root.dm1.if_ideas\"},\n\n                                {target: \"#root.dm1.done.others\"}\n\n                                // {cond: (context) => context.option === 'help', target: '.help'}\n                                ]\n                        },\n                        ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                        },\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n\n\n            // NOT USED\n            // distributor: {\n                // initial: \"prompt\",\n                // on: {\n                //     ENDSPEECH: [\n                //             {cond: (context) => context.option === 'create', target: ['#root.dm2.idle',\"#root.dm2.games\"]},\n                //             {cond: (context) => context.option === 'music', target: ['#root.dm2.idle',\"#root.dm2.music\"]},\n                //             {cond: (context) => context.option === 'enterntain_me', target: ['#root.dm2.idle',\"#root.dm2.entertain\"]},\n                //             {cond: (context) => context.option === 'games', target: ['#root.dm2.idle',\"#root.dm2.games\"]},\n                //             {cond: (context) => context.option === 'music', target: ['#root.dm2.idle',\"#root.dm2.music\"]},\n                //             {cond: (context) => context.option === 'enterntain_me', target: ['#root.dm2.idle',\"#root.dm2.entertain\"]},\n                //             {cond: (context) => context.option === 'help', target: ['#root.dm2.idle',\"#root.init.help\"]},\n                //             { target: \"#root.dm1.distributor.others\" }] \n                //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Understood.\"),\n            //         },\n            //         others: {\n            //             entry: say(\"Ummm, you said something strange\"),\n            //             on: { ENDSPEECH: '#root.dm1.positive.quest1'}\n            //             }\n            //     }\n            // },\n\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptAndAsk(\"Tell me the things you have to accomplish.\")\n                },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.annoy'}\n                        }}\n            },\n            // ...\n            // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            annoy: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                        target: \"done\"},\n\n                        {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                        target: \".ask\"}], \n                    \n                    WAIT: '.wait'\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"Have you done your task yet?\"),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: [ send('LISTEN'), send('WAIT', {delay: 3000})]\n                    },\n                    wait: {\n                        entry: [\n                            say('Sorry, I did not get your input!')\n                        ],\n                        on: {\n                            ENDSPEECH: [\n                                // {cond: () => (counter++) <= 2, target: 'prompt'},\n                                {target: 'prompt'}\n                            ]\n                        }\n                    }\n                }\n            },\n            // ...\n            if_ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ...\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            conditional2: {...Conditional('agreement', \"create_ideas\", 'disagreement', \"#root.dm1.positive.quest2\", \"#root.dm1.done.others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}. Let me play some music while you are at it.` })),\n                            on: { ENDSPEECH: '#root.dm1.done'}\n                    }\n                }\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                            on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                    }, \n                        others: {\n                            entry: say(\"Ummm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                            }\n                    }\n                }         \n}})\n\n\n\n"]},"metadata":{},"sourceType":"module"}