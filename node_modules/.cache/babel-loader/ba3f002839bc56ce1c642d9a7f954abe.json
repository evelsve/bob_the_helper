{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { promptAndAsk, nluRequest } from \"./index\";\nexport const dmMachine1 = {\n  initial: 'idle',\n  states: {\n    // ...\n    idle: {},\n    // ...\n    positive: {\n      initial: \"quest\",\n      states: {\n        quest: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Would you like to do a chore?\")),\n        // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (context, event) => console.log(event.data)],\n              target: \"distributor\"\n            },\n            onError: {\n              target: \"#root.initial_welcome.help\",\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'agreement',\n              target: \"to_do\"\n            }, {\n              cond: context => context.option === 'disagreement',\n              target: \"ideas\"\n            }, {\n              target: \"others\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Ok.\"\n              }))\n            }\n          }\n        },\n        // ...\n        others: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: ['#root.dm1.idle']\n          },\n          states: {\n            prompt: {\n              entry: send({\n                type: \"SPEAK\",\n                value: \"I suppose you said something strange\"\n              }),\n              on: {\n                ENDSPEECH: '#root.dm1.positive.quest'\n              }\n            }\n          }\n        },\n        // ...\n        to_do: {// initial: \"prompt\",\n          // on: {\n          //     ENDSPEECH: [\n          //         '#root.dm1.idle']\n          //     },\n          //     states: {\n          //         prompt: {\n          //             entry: send(({\n          //                 type: \"SPEAK\",\n          //                 value:\"I suppose you said something strange\" })),\n          //              on: { ENDSPEECH: '#root.dm1.positive.quest'}\n          //             }\n          //         }\n        },\n        // ...\n        ideas: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Hwo about working on an idea?\"))\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmPositive.ts"],"names":["send","assign","promptAndAsk","nluRequest","dmMachine1","initial","states","idle","positive","quest","on","RECOGNISED","target","actions","context","option","recResult","query","invoke","id","src","event","onDone","data","intent","name","console","log","onError","distributor","ENDSPEECH","cond","prompt","entry","type","value","others","to_do","ideas"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, nluRequest, misUnderstood } from \"./index\";\nimport { list } from \"./todo_list\"\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest\",\n            states: {\n                quest: {\n                        on: {\n                            RECOGNISED: {\n                                target: \"query\",\n                                actions: assign((context) => { return { option: context.recResult } }),\n                            }},\n                        ...promptAndAsk(\"Would you like to do a chore?\")\n                    },\n            // ...misUnderstood(`Would you like to do a chore?`,  [\"#root.dm1.idle\", \"#root.initial_welcome.help\"])\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.option),\n                    onDone: {\n                        actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                        (context: SDSContext, event: any) => console.log(event.data)],\n                        target: \"distributor\"\n                    },\n                    onError: {\n                        target: \"#root.initial_welcome.help\",\n                        actions: (context, event) => console.log(event.data)}\n                }\n            },\n            // ...\n            distributor: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        {cond: (context) => context.option === 'agreement', target: \"to_do\"},\n                    \n                        {cond: (context) => context.option === 'disagreement', target: \"ideas\"},\n                        \n                        { target: \"others\" }]\n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({type: \"SPEAK\", value: `Ok.`})),\n                    }\n                }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                        '#root.dm1.idle']\n                    },\n                    states: {\n                        prompt: {\n                            entry: send(({\n                                type: \"SPEAK\",\n                                value:\"I suppose you said something strange\" })),\n                             on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                            }\n                        }\n            },\n            // ...\n            to_do: {\n                // initial: \"prompt\",\n                // on: {\n                //     ENDSPEECH: [\n                //         '#root.dm1.idle']\n                //     },\n                //     states: {\n                //         prompt: {\n                //             entry: send(({\n                //                 type: \"SPEAK\",\n                //                 value:\"I suppose you said something strange\" })),\n                //              on: { ENDSPEECH: '#root.dm1.positive.quest'}\n                //             }\n                //         }\n\n            },\n            // ...\n            ideas: {\n                on: {\n                    RECOGNISED: {\n                        target: \"query\",\n                        actions: assign((context) => { return { option: context.recResult } }),\n                    }},\n                ...promptAndAsk(\"Hwo about working on an idea?\")\n            }\n        }\n}}})\n"]},"metadata":{},"sourceType":"module"}