{"ast":null,"code":"import _objectSpread from \"/Users/evelsve/repos/mood-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { say, grammar } from \"./index\"; // import { nluRequest } from './index'\n// import { Endings } from './index'\n\nexport const url_grammar = {\n  \"rock\": {\n    url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ'\n  },\n  \"metal\": {\n    url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut'\n  },\n  \"punk\": {\n    url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9'\n  },\n  \"rap\": {\n    url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss'\n  },\n  \"lo-fi\": {\n    url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'\n  },\n  \"house\": {\n    url: 'https://www.youtube.com/watch?v=cna6C24AJkU'\n  },\n  \"techno\": {\n    url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ'\n  },\n  \"country\": {\n    url: 'https://www.youtube.com/watch?v=kI24NNjz2j8'\n  } // ...\n\n};\nconst game_grammar = {\n  \"shooting\": {\n    game: \"https://www.miniclip.com/games/genre-5/shoot-em-up/en/\"\n  },\n  \"arcade\": {\n    game: \"https://www.miniclip.com/games/genre-517/arcade/en/\"\n  },\n  \"racing\": {\n    game: \"https://www.miniclip.com/games/genre-477/racing/en/\"\n  }\n};\nexport function openInNewTab(user_input) {\n  return window.open(user_input, '_blank');\n}\nexport const dmMachine2 = {\n  initial: 'idle',\n  states: {\n    idle: {},\n    negative: {\n      initial: \"music\",\n      states: {\n        music: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"#root.dm2.negative.choose_music\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"#root.dm2.negative.ask_game\"\n            }, {\n              target: \"#root.dm2.negative.music.ask_again\"\n            } // {target: \"#root.dm1.done.others\"}\n            // {cond: (context) => context.option === 'help', target: '.help'}\n            ]\n          },\n          states: {\n            prompt: {\n              entry: say(\"I am sorry to hear that. Would you like to listen to some music?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: send('LISTEN')\n            },\n            ask_again: {\n              entry: say('I am sorry, I could not understand you. Please repeat.'),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        }\n      }\n    },\n    choose_music: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}),\n          // It checks if url is in grammar\n          actions: assign(context => {\n            return {\n              url: url_grammar[context.recResult].url\n            };\n          }),\n          // The computer keeps the information in the object context\n          target: \"#root.dm2.negative.load_music\"\n        }, {\n          target: \"#root.dm2.negative.choose_music.ask_again\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Great, let's dance our troubles away! Which genre would you like to listen to?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        },\n        ask_again: {\n          entry: say('I am sorry, I could not understand you. Please repeat.'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    load_music: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say('Loading music for you! Dance your troubles away. I hope you feel better homie.'),\n          on: {\n            ENDSPEECH: 'play'\n          }\n        },\n        play: {\n          entry: send(context => _objectSpread({}, openInNewTab(context.url))),\n          on: {\n            ENDSPEECH: \"#root.dm2.idle\"\n          }\n        }\n      }\n    },\n    ask_game: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"#root.dm2.negative.choose_game\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"#root.dm2.negative.entertainment\"\n        }, {\n          target: \"#root.dm2.negative.ask_game.ask_again\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Okay then. Let's play a game instead, what do you think?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        },\n        ask_again: {\n          entry: say('I am sorry, I could not understand you. Please repeat.'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    choose_game: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => game_grammar[context.recResult] !== undefined && \"game\" in (game_grammar[context.recResult] || {}),\n          // It checks if url is in grammar\n          actions: assign(context => {\n            return {\n              game: game_grammar[context.recResult].game\n            };\n          }),\n          // The computer keeps the information in the object context\n          target: \"#root.dm2.negative.load_game\"\n        }, {\n          target: \"#root.dm2.negative.choose_game.ask_again\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Nice! You choose to play an arcade, shooting or racing game!\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        },\n        ask_again: {\n          entry: say('I am sorry, I could not understand you. Please repeat.'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    load_game: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say('Loading game for you! I hope you feel better my G.'),\n          on: {\n            ENDSPEECH: 'play'\n          }\n        },\n        play: {\n          entry: send(context => _objectSpread({}, openInNewTab(context.game))),\n          on: {\n            ENDSPEECH: \"#root.dm2.idle\"\n          }\n        }\n      }\n    },\n    entertainment: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: [{\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n          actions: assign(context => {\n            return {\n              approval: true\n            };\n          }),\n          target: \"#root.dm2.negative.load_entertainment\"\n        }, {\n          cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n          actions: assign(context => {\n            return {\n              approval: false\n            };\n          }),\n          target: \"#root.dm2.negative.final_state\"\n        }, {\n          target: \"#root.dm2.negative.entertainment.ask_again\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Then would you like some random entertainment?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        },\n        ask_again: {\n          entry: say('I am sorry, I could not understand you. Please repeat.'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    load_entertainment: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say('Loading entertainment for you! I hope you feel better my G'),\n          on: {\n            ENDSPEECH: 'play'\n          }\n        },\n        play: {\n          entry: send(context => _objectSpread({}, openInNewTab('https://theuselessweb.com'))),\n          on: {\n            ENDSPEECH: \"#root.dm2.idle\"\n          }\n        }\n      }\n    },\n    final_state: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say('Okay! I hope you find another way to feel better!'),\n          on: {\n            ENDSPEECH: '#root.dm2.idle'\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evelsve/repos/mood-admin/src/dmNegative.ts"],"names":["send","assign","say","grammar","url_grammar","url","game_grammar","game","openInNewTab","user_input","window","open","dmMachine2","initial","states","idle","negative","music","on","RECOGNISED","cond","context","recResult","undefined","approval","actions","target","prompt","entry","ENDSPEECH","ask","ask_again","choose_music","load_music","play","ask_game","choose_game","load_game","entertainment","load_entertainment","final_state"],"mappings":"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","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, grammar } from \"./index\";\n\n// import { nluRequest } from './index'\n// import { Endings } from './index'\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n            // ...\n            \n}\n\nconst game_grammar: { [index: string]: {game: string} } =\n\n{\n    \"shooting\": {game: \"https://www.miniclip.com/games/genre-5/shoot-em-up/en/\"},\n    \"arcade\": {game: \"https://www.miniclip.com/games/genre-517/arcade/en/\"},\n    \"racing\": {game: \"https://www.miniclip.com/games/genre-477/racing/en/\"},\n}\n\nexport function openInNewTab(user_input: string): any{ \n  return (window.open(user_input, '_blank'))\n}\n\nexport const dmMachine2: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n\n        idle: {},\n        negative: {\n            initial: \"music\",\n            states: {\n\n                music: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                actions: assign((context) => { return { approval: true } }),\n                                target: \"#root.dm2.negative.choose_music\"},\n            \n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                actions: assign((context) => { return { approval: false} }),\n                                target: \"#root.dm2.negative.ask_game\"},\n                                {target: \"#root.dm2.negative.music.ask_again\"}\n\n                                // {target: \"#root.dm1.done.others\"}\n\n                                // {cond: (context) => context.option === 'help', target: '.help'}\n                                ]\n                        },\n                        states: {\n                            prompt: {\n                                entry: say(\"I am sorry to hear that. Would you like to listen to some music?\"),\n                                on: {ENDSPEECH : \"ask\"}\n                            },\n                            ask: {\n                                entry: send('LISTEN')\n                            },\n                            ask_again: {\n                                entry: say('I am sorry, I could not understand you. Please repeat.'),\n                                on: { ENDSPEECH: \"ask\"}\n                            }\n                        }\n                        }}},\n\n                choose_music: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}), // It checks if url is in grammar\n                            actions: assign((context) => { return { url: url_grammar[context.recResult].url } }), // The computer keeps the information in the object context\n                            target: \"#root.dm2.negative.load_music\"},\n                            {target: \"#root.dm2.negative.choose_music.ask_again\"}\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(\"Great, let's dance our troubles away! Which genre would you like to listen to?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                        }\n                    }\n                },\n                load_music: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Loading music for you! Dance your troubles away. I hope you feel better homie.'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab(context.url)\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n\n                ask_game: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            actions: assign((context) => { return { approval: true } }),\n                            target: \"#root.dm2.negative.choose_game\"},\n        \n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            actions: assign((context) => { return { approval: false} }),\n                            target: \"#root.dm2.negative.entertainment\"},\n                            {target: \"#root.dm2.negative.ask_game.ask_again\"}]\n                    },\n                states: {\n                    prompt: {\n                        entry: say(\"Okay then. Let's play a game instead, what do you think?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                    }\n                }\n                },\n\n                choose_game: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => game_grammar[context.recResult] !== undefined && \"game\" in (game_grammar[context.recResult] || {}), // It checks if url is in grammar\n                            actions: assign((context) => { return { game: game_grammar[context.recResult].game } }), // The computer keeps the information in the object context\n                            target: \"#root.dm2.negative.load_game\"},\n                            {target: \"#root.dm2.negative.choose_game.ask_again\"}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(\"Nice! You choose to play an arcade, shooting or racing game!\"),\n                                on: {ENDSPEECH : \"ask\"}\n                            },\n                            ask: {\n                                entry: send('LISTEN')\n                            },\n                            ask_again: {\n                                entry: say('I am sorry, I could not understand you. Please repeat.'),\n                                on: { ENDSPEECH: \"ask\"}\n                        }\n                    }\n                },\n\n                load_game: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Loading game for you! I hope you feel better my G.'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab(context.game)\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n\n                entertainment: {\n                    initial: 'prompt',\n                    on: {\n                        ENDSPEECH: [{cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            actions: assign((context) => { return { approval: true } }),\n                            target: \"#root.dm2.negative.load_entertainment\"},\n        \n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            actions: assign((context) => { return { approval: false} }),\n                            target: \"#root.dm2.negative.final_state\"},\n                            {target: \"#root.dm2.negative.entertainment.ask_again\"}]\n                    },\n                states: {\n                    prompt: {\n                        entry: say(\"Then would you like some random entertainment?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                    }\n                }\n                },\n                load_entertainment: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Loading entertainment for you! I hope you feel better my G'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab('https://theuselessweb.com')\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n                final_state: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Okay! I hope you find another way to feel better!'),\n                            on: { ENDSPEECH: '#root.dm2.idle'}\n                        },\n                }\n            } \n        } \n} )"]},"metadata":{},"sourceType":"module"}