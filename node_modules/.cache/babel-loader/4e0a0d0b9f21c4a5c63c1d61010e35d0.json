{"ast":null,"code":"import _slicedToArray from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/evelsve/repos/react-xstate-colourchanger/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, send, assign } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\"; // Welcome to the machines\n\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\nimport { dmMachine4 } from \"./dmSmartHome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n}); // FOR ABSTRACTING\n\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nexport function promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\nexport function misUnderstood(saythis, on_help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(saythis),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"Sorry, I do not understand.\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(\"We may be miscommunicating. Let's take a step back\"),\n        on: {\n          ENDSPEECH: on_help\n        }\n      }\n    }\n  };\n}\nexport function Endings(saythis, on_end) {\n  return {\n    initial: \"prompt\",\n    states: {\n      idle: {},\n      prompt: {\n        entry: say(saythis),\n        on: {\n          ENDSPEECH: on_end\n        }\n      }\n    }\n  };\n}\n_c = Endings;\nconst saySnippet = send(context => ({\n  type: \"SPEAK\",\n  value: \"\".concat(context.snippet)\n})); //  GRAMMAR\n\nconst grammar = {\n  \"of course\": {\n    approval: true\n  },\n  \"yes\": {\n    approval: true\n  },\n  \"yeah\": {\n    approval: true\n  },\n  \"yup\": {\n    approval: true\n  },\n  \"sure\": {\n    approval: true\n  },\n  \"no\": {\n    approval: false\n  },\n  \"nah\": {\n    approval: false\n  },\n  \"nope\": {\n    approval: false\n  }\n}; //  MAIN MACHINE\n\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    // ____________\n    initial_welcome: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        // ...\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  option: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"What do you want to do?\")),\n        // ...\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, _event) => nluRequest(context.option),\n            onDone: {\n              actions: [assign((_context, event) => {\n                return {\n                  option: event.data.intent.name\n                };\n              }), (_context, event) => console.log(event.data)],\n              target: \"distributor\"\n            },\n            onError: {\n              target: 'welcome',\n              actions: (_context, event) => console.log(event.data)\n            }\n          }\n        },\n        // ...\n        distributor: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.option === 'todo_on' || context.option === 'todo_off',\n              target: [\"#root.dm3.denial\", \"idle\"]\n            }, {\n              cond: context => context.option === 'timer_on' || context.option === 'timer_off',\n              target: [\"#root.dm2.denial\", \"idle\"]\n            }, {\n              cond: context => context.option === 'appointment_on',\n              target: [\"#root.dm1.who\", \"idle\"]\n            }, {\n              cond: context => context.option === 'smart_on',\n              target: [\"#root.dm4.welcome\", \"idle\"]\n            }, {\n              cond: context => context.option === 'help_on',\n              target: \"help\"\n            }, {\n              cond: context => context.option === 'appointment_off',\n              target: \"other\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(_context => ({\n                type: \"SPEAK\",\n                value: \"Understood.\"\n              }))\n            }\n          }\n        },\n        // ...\n        help: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n              actions: assign(_context => {\n                return {\n                  approval: true\n                };\n              }),\n              target: \"welcome\"\n            }, {\n              cond: context => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n              actions: assign(_context => {\n                return {\n                  approval: false\n                };\n              }),\n              target: \"goodbye\"\n            }]\n          }\n        }, promptAndAsk(\"Would you like to start over?\")),\n        // ...\n        other: _objectSpread({}, Endings(\"This function has not been developed\", \"#root.initial_welcome.help\")),\n        // ...\n        goodbye: _objectSpread({}, Endings(\"Thank you for using Bot Chatbotterson. Goodbye.\", \"#root.initial_welcome\"))\n      }\n    },\n    // ____________\n    dm1: _objectSpread({}, dmMachine1),\n    // ____________\n    dm2: _objectSpread({}, dmMachine2),\n    // ____________\n    dm3: _objectSpread({}, dmMachine3),\n    // ____________\n    dm4: _objectSpread({}, dmMachine4),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        // ...\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        // ...\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        // ...\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c2 = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c3 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://ap-ti-do.herokuapp.com/model/parse';\nexport const nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 336,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Endings\");\n$RefreshReg$(_c2, \"ReactiveButton\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/evelsve/repos/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","send","assign","useMachine","asEffect","useSpeechSynthesis","useSpeechRecognition","inspect","dmMachine1","dmMachine2","dmMachine3","dmMachine4","url","iframe","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","misUnderstood","saythis","on_help","nomatch","help","Endings","on_end","idle","saySnippet","context","snippet","grammar","approval","machine","id","initial_welcome","CLICK","welcome","RECOGNISED","target","actions","option","recResult","query","invoke","src","_event","nluRequest","onDone","event","data","intent","name","console","log","onError","distributor","cond","undefined","other","goodbye","dm1","dm2","dm3","dm4","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\";\n// Welcome to the machines\nimport { dmMachine1 } from \"./dmAppointment\";\nimport { dmMachine2 } from \"./dmTimer\";\nimport { dmMachine3 } from \"./dmToDo\";\nimport { dmMachine4 } from \"./dmSmartHome\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n// FOR ABSTRACTING\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')}}\n    })\n}\n\nexport function misUnderstood(saythis: string, on_help:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n        prompt: {\n            entry: say(saythis),\n            on: { ENDSPEECH: \"ask\" }\n        },\n        ask: { \n            entry: listen()\n        },\n        nomatch: {\n            entry: say(\"Sorry, I do not understand.\"),\n            on: { ENDSPEECH: \"prompt\" }\n        },\n        help: {\n            entry: say(\"We may be miscommunicating. Let's take a step back\"),\n            on: { ENDSPEECH: on_help }\n        }\n    }}\n)}\n\nexport function Endings(saythis: string, on_end:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({        \n        initial: \"prompt\",\n        states: {\n            idle: {},\n            prompt: {\n                entry: say(saythis),\n                on: { ENDSPEECH: on_end }}\n            }    \n        })}\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\n//  GRAMMAR\n\nconst grammar: { [index: string]: {approval?:  boolean } } = \n{  \"of course\": { approval: true },\n    \"yes\": { approval: true },\n    \"yeah\": { approval: true },\n    \"yup\": { approval: true },\n    \"sure\": { approval: true },\n    \"no\": { approval: false },\n    \"nah\": { approval: false },\n    \"nope\": { approval: false }}\n\n\n\n//  MAIN MACHINE\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n        initial_welcome: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {on: {CLICK: 'welcome'}},\n                // ...\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"What do you want to do?\")\n                },\n                // ...\n                query: {\n                    invoke: {\n                        id: 'rasa',\n                        src: (context, _event) => nluRequest(context.option),\n                        onDone: {\n                            actions: [assign((_context, event) => { return  {option: event.data.intent.name} }), \n                            (_context: SDSContext, event: any) => console.log(event.data)],\n                            target: \"distributor\"\n                        },\n                        onError: {\n                            target: 'welcome',\n                            actions: (_context, event) => console.log(event.data)}\n                    }\n                },\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n                            {cond: (context) => context.option === 'todo_on'|| context.option === 'todo_off', target: [\"#root.dm3.denial\", \"idle\"] },\n                            {cond: (context) => context.option === 'timer_on' || context.option === 'timer_off', target: [\"#root.dm2.denial\", \"idle\"] },\n                            {cond: (context) => context.option === 'appointment_on', target: [\"#root.dm1.who\", \"idle\"]},\n                            {cond: (context) => context.option === 'smart_on', target: [\"#root.dm4.welcome\", \"idle\"]},\n                            {cond: (context) => context.option === 'help_on', target: \"help\"},\n                            {cond: (context) => context.option === 'appointment_off', target: \"other\"}]\n                        },\n                    states: {\n                        prompt: {\n                            entry: send((_context) => ({type: \"SPEAK\", value: `Understood.`})),\n                        }\n                    }\n                },\n                // ...\n                help: {\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            actions: assign((_context) => { return { approval: true } }),\n                            target: \"welcome\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            actions: assign((_context) => { return { approval: false} }),\n                            target: \"goodbye\"},]  \n                    },\n                ...promptAndAsk(\"Would you like to start over?\")\n                },\n                // ...\n                other: {...Endings(\"This function has not been developed\", \"#root.initial_welcome.help\")\n                },\n                // ...\n                goodbye: {...Endings(\"Thank you for using Bot Chatbotterson. Goodbye.\",\"#root.initial_welcome\")}\n            },\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        dm3: {\n        ...dmMachine3\n        },\n        // ____________\n        dm4: {\n        ...dmMachine4\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        }\n    }\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n    });\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://ap-ti-do.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}