{"version":3,"sources":["dmPositive.ts","dmNegative.ts","index.tsx"],"names":["dmMachine1","initial","states","idle","positive","quest1","on","RECOGNISED","cond","context","undefined","grammar","recResult","approval","target","bye","promptAndAsk","quest2","actions","assign","option","query1","Queries","conditional1","Conditional","query3","create_do","task","promptHelpBye","to_do","prompt","entry","send","type","value","ENDSPEECH","if_ideas","query2","conditional2","create_ideas","idea","wait","finished","done","say","others","url_grammar","url","game_grammar","game","openInNewTab","user_input","window","open","dmMachine2","negative","music","ask","ask_again","choose_music","load_music","play","ask_game","choose_game","load_game","entertainment","load_entertainment","final_state","text","_context","listen","idled","help","goodbye","Endings","saythis","on_end","ondone","onerror","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","cond1","target1","cond2","target2","elses","idles","inspect","iframe","snippet","machine","Machine","init","CLICK","welcome","query","distributor","bob","neutral","dm1","dm2","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.39ac922a.chunk.js","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\nimport { Queries, bye, Conditional, promptAndAsk, finished, promptHelpBye, say, grammar } from \"./index\";\n\n\n\n\n\n\n// export function promptHelpBye(prompt: string, idled: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: say(prompt),\n//                 on: { ENDSPEECH: 'ask' }\n//             },\n//             ask: {entry: send('LISTEN')\n//             },\n//             help: {\n//                 entry: say(\"We may be miscommunicating.\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.help\"] }\n//             },\n//             goodbye:{\n//                 entry: say(\"\"),\n//                 on: { ENDSPEECH: [idled,\"#root.init.goodbye\" ] }\n//             }\n//     }}\n// )}\n\n\n\n\n\nlet num = 0\n\nexport const dmMachine1: MachineConfig<SDSContext, any, SDSEvent> = ({\n    // NOTE: regarding the queries:\n    // There are more efficient ways to implement them, however, \n    // Yet we decided to have a grammar as well as querying in order to see\n    // which implementation will yield better results\n    initial: 'idle',\n    states: {\n        // ...\n        idle: {},\n        // ...\n        positive: {\n            initial: \"quest1\",\n            states: {\n                // .... // ...\n                quest1: {\n                    on: {\n                        RECOGNISED: \n                            [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"#root.dm1.create_do\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"#root.dm1.if_ideas\"},\n\n                            {cond: (context) => bye[context.recResult] !== undefined && bye[context.recResult].bye === false,\n                            target: \"#root.dm1.if_ideas\"},\n\n                            // {cond: (context) => context.option === 'help', target: \".help\"},\n                            // {cond: (context) => context.option === 'bye', target: \".goodbye\"},\n                            {target:'#root.dm1.others'}\n                            ]\n                        },\n                    ...promptAndAsk(\"I suppose you could do something productive. Do you agree?\")\n                },\n                // .... // ...\n                quest2: {\n                    on: {\n                        RECOGNISED: {\n                            target: '#root.dm1.query3',\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                        ...promptAndAsk(\"So what would you like to do?\")\n                    }\n                }\n            },\n            // ....\n            query1: {...Queries('conditional1',\"#root.init.help\")},\n            // ....\n            conditional1: {...Conditional('agree', \"create_do\", 'disagree', \"#root.dm1.if_ideas\", \"#root.dm1.others\", '#root.dm1.idle', `Ok.`)},\n            // ....\n            query3: {...Queries(\"#root.init.distributor\", \"#root.init.help\")},\n            //...\n            create_do:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: \n                        {actions: assign((context) => { return { task: context.recResult } }),\n                        target: \"to_do\"}\n                    },\n                    ...promptHelpBye(\"Tell me the things you have to accomplish.\", '#root.dm1.idle')\n            },\n            // ...\n            to_do: {\n                initial: \"prompt\",\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value:`Now go and complete the following tasks: ${context.task}` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'},  \n                        }\n                    }\n            },\n            // ...\n            if_ideas: {\n                // Note to self: help/bye implemented (uses conditional)\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm1.query2',\n                        actions: assign((context) => { return { option: context.recResult } })},\n                        \n                        {target:'#root.dm1.others'}\n                    ]},\n                ...promptAndAsk(\"Then how about working on your ideas?\")\n            },\n            // ....\n            query2: {...Queries('conditional2',\"#root.init.help\")},\n            // ....\n            conditional2: {...Conditional('agree', \"create_ideas\", 'disagree', \"#root.dm1.positive.quest2\", \"#root.dm1.others\", '#root.dm2.idle', `Cool.`)},\n            // ...\n            create_ideas:{\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: {\n                        target: \"idea\",\n                        actions: assign((context) => { return { idea: context.recResult } }),\n                    }},\n                    ...promptAndAsk(\"Tell me your idea.\")\n                },\n            // ...\n            idea: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: ['#root.dm1.idle']},\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value:`You should work on your idea of ${context.idea}.` })),\n                            on: { ENDSPEECH: '#root.dm1.wait'}\n                            }\n                }\n            },\n            // ...\n            wait: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => finished[context.recResult] !== undefined && finished[context.recResult].finished === true,\n                        target: \"done\"},\n\n                        {cond: (context) => finished[context.recResult] !== undefined && finished[context.recResult].finished === false,\n                        target: \"wait\"},\n                        {target: 'wait'}]  \n                },\n            ...promptAndAsk(\"Say 'finished', when you're done\")\n            },\n            // ...\n            done: {\n                initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: say(\"Good job. Time to relax.\"),\n                            on: { ENDSPEECH: {target: '#root.dm1.positive.quest2'}},\n                        }\n                    }\n            },\n            // ...\n            others: {\n                initial: \"prompt\",\n                // on: {ENDSPEECH: '#root.goodbbye'},\n                    states: {\n                        prompt: {\n                            entry: say(\"Umm, you said something strange\"),\n                            on: { ENDSPEECH: '#root.dm1.positive.quest2'},\n                        }\n                    }\n            }\n    }}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ONLY DRAFTS\n\n\n\n\n// done: {...Endings(\"Congratulations on your accomplishment!\",\"#root.init\")},\n\n          // annoy:{\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n            //             target: \"done\"},\n\n            //             {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n            //             target: \".wait\"}],\n                    \n            //         // WAIT: '.wait'\n\n            //         }\n            //     },\n\n             // ...\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: [\n            //             {cond: (context) => context.option === 'agrreement', target: \"done\"},\n\n            //             {cond: (context) => context.option === 'disagreement', target: \".wait\"},\n                        \n            //             {target: \".wait\"}], \n\n            //         WAIT: '.prompt'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Have you done your task yet?\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [ send('LISTEN'), send('WAIT', {delay: 5000})]\n            //         },\n            //         // wait2: {entry: [ send('WAIT', {delay: 3000})]},\n            //         wait: {\n            //             entry: [\n            //                 say('Hm.')\n            //             ],\n            //             on: {\n            //                 ENDSPEECH: [\n            //                     {cond: () => (num++) <= 2, target: 'prompt'},\n            //                     {target: '#root.dm1.done'}\n            //                 ]\n            //             }\n            //         }\n            //     }\n            // },\n\n\n            // ----\n\n            // quest1: {\n                //     on: {\n                //         RECOGNISED: [\n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                //                 actions: assign((context) => { return { approval: true } }),\n                //                 target: \"#root.dm1.create_do\"},\n            \n                //                 {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                //                 actions: assign((context) => { return { approval: false} }),\n                //                 target: \"#root.dm1.if_ideas\"},\n\n                //                 {target: \"#root.dm1.done.others\"}\n\n                //                 // {cond: (context) => context.option === 'help', target: '.help'}\n                //                 ]\n                //         },\n                //         ...promptHelpBye(\"I suppose you could do something productive. Do you agree?\")\n                //         },\\\n\n\n\n                // ------\n\n                // done: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: say(\"Congratulations on your accomplishment! Here's a reward\"),\n                //                 on: { ENDSPEECH: ['#root.dm1.idle', '#root.init.help.goodbye']}\n                //         }, \n                //             others: {\n                //                 entry: say(\"Ummm, you said something strange\"),\n                //                 on: { ENDSPEECH: '#root.dm1.positive.quest2'}\n                //                 }\n                //         }\n                //     }   \n\n\n                // ------\n\n\n                // idea: {\n                //     initial: \"prompt\",\n                //     // on: {ENDSPEECH: ['#root.dm1.idle']},\n                //         states: {\n                //             prompt: {\n                //                 entry: send((context) => ({\n                //                     type: \"SPEAK\",\n                //                     value:`You should work on your idea of ${context.idea}. Say 'finished', when you're done` })),\n                //                 on: { ENDSPEECH: ['#root.dm1.idea_wait']}\n                //             // },\n                //     //         elevator: {\n                //     //             entry: send(openInNewTab('https://www.youtube.com/watch?v=VBlFHuCzPgY&t=3s&ab_channel=AntoineB')),\n                //     //             on: { ENDSPEECH: '#root.dm1.idea_wait'}\n                //                 }\n                //     }\n                // }\n\n                // ------\n\n            // annoy: {\n            //     initial: \"prompt\",\n            //     on: {\n            //         RECOGNISED: {\n            //             target: \"conditional3\",\n            //             actions: assign((context) => { return { option: context.recResult } }),\n            //         },\n            //         WAIT: 'wait'\n            //     },\n            //     states: {\n            //         prompt: {\n            //             entry: say(\"Let me know when you're done.\"),\n            //             on: { ENDSPEECH: \"ask\" }\n            //         },\n            //         ask: {\n            //             entry: [\n            //                 send('LISTEN'),\n            //                 send('WAIT', {delay: 10000})\n            //             ]\n            //         }\n            //     }\n            // },\n            // ...\n            // wait: {\n                \n            //     entry: [say('Have you done your task yet?')],\n            //     on: {\n            //         ENDSPEECH: [\n            //             {cond: () => (num++, 1) <= 5, target: 'conditional3'},\n            //             {target: '#root.dm1.idea_wait'}\n            //         ]\n            //     }\n            // },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.annoy\", \"#root.dm1.annoy\", '#root.dm1.idle', `Mhm.`)},\n\n\n            // -----\n\n                // ...\n                // full_annoy:{\n                //     initial: 'annoy',\n                //     on: { \n                //         // RECOGNISED: {\n                //         //         cond: (context) => help_commands.includes(context.recResult),\n                //         //         target: '#root.init.help'\n                //         //             },\n    \n                //         MAXSPEECH: [\n                //             { \n                //                 cond: (context) => context.count < 5,\n                //                 target: '#root.dm1.idea_wait'},\n    \n                //                 {cond: (context) => context.count == null,\n                //                 actions: assign((context)=>{return {count: Number(0)}}),\n                //                 target: '#root.dm1.maxspeech'}],\n                //             },\n                //     states:{\n                //         hist:{type: 'history'},\n                //         // .... // ...\n                //         annoy: {\n                //             on: {\n                //                 RECOGNISED: [{\n                //                     cond: (context) => \"finished\" in (gram[context.recResult] || {}),\n                //                     actions: assign((context) => { return { finished: gram[context.recResult].finished } }),\n                //                     target: \"#root.dm1.done\"}]\n        \n                //                 // },\n                //                 // { cond: (context) => !(help_commands.includes(context.recResult)),\n                //                 //     target: \".nomatch\" }]\n                //             },\n                //             ...Prompt_Nomatch_Timeout('Have you done your task yet?', \"Sorry I don't understand\"),\n                //         }\n                // },\n                // // ....\n                // },\n                // // ... \n                // maxspeech:{\n                //     initial: 'prompt',\n                //     on: {\n                //         ENDSPEECH: {\n                //             actions: assign((context)=> {return {count: context.count+1 }}),\n                //             target: 'full_annoy.hist'\n                //                 }\n                //             },\n                //             // target: 'fill_appointment_info.hist'\n                //         states: {\n                //             prompt: {entry: say('I AM A STUPID BOT ')}\n                //     }\n                // },\n\n                // ...\n\n                            // ..\n        //     wait: {\n        //         initial: 'prompt',\n        //         on: { ENDSPEECH: '#root.dm1.annoy'},\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"M.\"),\n        //                 // on: { ENDSPEECH: \"#root.dm1.annoy\" }\n        //             },\n        //             // ask: {\n        //             //     entry: [\n        //             //         send('LISTEN'),\n        //             //         send('WAIT', {delay: 10000})\n        //             //     ]}\n        //             }\n        // },\n        //     // ...\n        //     annoy: {\n        //         initial: \"prompt\",\n        //         on: {\n        //             RECOGNISED: {\n        //                 target: \"conditional3\",\n        //                 actions: assign((context) => { return { option: context.recResult } }),\n        //             },\n        //             WAIT: 'wait'\n        //         },\n        //         states: {\n        //             prompt: {\n        //                 entry: say(\"Have you finished your task?\"),\n        //                 on: { ENDSPEECH: \"ask\" }\n        //             },\n        //             ask: {\n        //                 entry: [\n        //                     send('LISTEN'),\n        //                     send('WAIT', {delay: 10000})\n        //                 ]\n        //             }\n        //         }\n        //     },\n            // conditional3: {...Conditional('agreement', \"#root.dm1.done\", 'disagreement', \"#root.dm1.wait\", \"#root.dm1.annoy\", '#root.dm1.idle', `Oh`)},","import { MachineConfig, send, assign } from \"xstate\";\nimport {say, listen, promptAndAsk, grammar } from \"./index\";\n\n// import { nluRequest } from './index'\n// import { Endings } from './index'\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n         {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n            \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n            \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n            \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n            \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n            \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n            \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n            \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n            // ...\n            \n}\n\nconst game_grammar: { [index: string]: {game: string} } =\n\n{\n    \"shooting\": {game: \"https://www.miniclip.com/games/genre-5/shoot-em-up/en/\"},\n    \"arcade\": {game: \"https://www.miniclip.com/games/genre-517/arcade/en/\"},\n    \"racing\": {game: \"https://www.miniclip.com/games/genre-477/racing/en/\"},\n}\n\nexport function openInNewTab(user_input: string): any{ \n  return (window.open(user_input, '_blank'))\n}\n\nexport const dmMachine2: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n\n        idle: {},\n        negative: {\n            initial: \"music\",\n            states: {\n\n                music: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                                actions: assign((context) => { return { approval: true } }),\n                                target: \"#root.dm2.negative.choose_music\"},\n            \n                                {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                                actions: assign((context) => { return { approval: false} }),\n                                target: \"#root.dm2.negative.ask_game\"},\n                                {target: \"#root.dm2.negative.music.ask_again\"}\n\n                                // {target: \"#root.dm1.done.others\"}\n\n                                // {cond: (context) => context.option === 'help', target: '.help'}\n                                ]\n                        },\n                        states: {\n                            prompt: {\n                                entry: say(\"I am sorry to hear that. Would you like to listen to some music?\"),\n                                on: {ENDSPEECH : \"ask\"}\n                            },\n                            ask: {\n                                entry: send('LISTEN')\n                            },\n                            ask_again: {\n                                entry: say('I am sorry, I could not understand you. Please repeat.'),\n                                on: { ENDSPEECH: \"ask\"}\n                            }\n                        }\n                        },\n\n                choose_music: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => url_grammar[context.recResult] !== undefined && \"url\" in (url_grammar[context.recResult] || {}), // It checks if url is in grammar\n                            actions: assign((context) => { return { url: url_grammar[context.recResult].url } }), // The computer keeps the information in the object context\n                            target: \"#root.dm2.negative.load_music\"},\n                            {target: \"#root.dm2.negative.choose_music.ask_again\"}\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(\"Which genre would you like to listen to?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                        }\n                    }\n                },\n                load_music: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Music is in the new tab. Dance, dance, dance!'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab(context.url)\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n\n                ask_game: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            actions: assign((context) => { return { approval: true } }),\n                            target: \"#root.dm2.negative.choose_game\"},\n        \n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            actions: assign((context) => { return { approval: false} }),\n                            target: \"#root.dm2.negative.entertainment\"},\n                            {target: \"#root.dm2.negative.ask_game.ask_again\"}]\n                    },\n                states: {\n                    prompt: {\n                        entry: say(\"Okay then. Let's play a game instead, what do you think?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                    }\n                }\n                },\n\n                choose_game: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => game_grammar[context.recResult] !== undefined && \"game\" in (game_grammar[context.recResult] || {}), // It checks if url is in grammar\n                            actions: assign((context) => { return { game: game_grammar[context.recResult].game } }), // The computer keeps the information in the object context\n                            target: \"#root.dm2.negative.load_game\"},\n                            {target: \"#root.dm2.negative.choose_game.ask_again\"}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(\"You can choose to play an arcade, shooting or racing game!\"),\n                                on: {ENDSPEECH : \"ask\"}\n                            },\n                            ask: {\n                                entry: send('LISTEN')\n                            },\n                            ask_again: {\n                                entry: say('I am sorry, I could not understand you. Please repeat.'),\n                                on: { ENDSPEECH: \"ask\"}\n                        }\n                    }\n                },\n\n                load_game: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('The game is in a new tab'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab(context.game)\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n\n                entertainment: {\n                    initial: 'prompt',\n                    on: {\n                        ENDSPEECH: [{cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            actions: assign((context) => { return { approval: true } }),\n                            target: \"#root.dm2.negative.load_entertainment\"},\n        \n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            actions: assign((context) => { return { approval: false} }),\n                            target: \"#root.dm2.negative.final_state\"},\n                            {target: \"#root.dm2.negative.entertainment.ask_again\"}]\n                    },\n                states: {\n                    prompt: {\n                        entry: say(\"Ok, would you like some random entertainment?\"),\n                            on: {ENDSPEECH : \"ask\"}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                        ask_again: {\n                            entry: say('I am sorry, I could not understand you. Please repeat.'),\n                            on: { ENDSPEECH: \"ask\"}\n                    }\n                }\n                },\n                load_entertainment: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('The entertainement is in a new tab'),\n                            on: { ENDSPEECH: 'play'}\n                        },\n                        play: {\n                            entry: send((context) => ({\n                                ...openInNewTab('https://theuselessweb.com')\n                            })),\n                            on: { ENDSPEECH: \"#root.dm2.idle\"}\n                        }\n                    },   \n                },\n                final_state: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: say('Understood. Let me know if you need anything'),\n                            on: { ENDSPEECH: '#root.dm2.idle'}\n                        },\n                }\n            } \n        } \n    } }\n} )","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { MachineConfig, Machine, send, Action, assign, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { inspect } from \"@xstate/inspect\";\n\n// auto-open this asshole: https://cors-anywhere.herokuapp.com/corsdemo\n\nimport { dmMachine1 } from \"./dmPositive\";\nimport { dmMachine2 } from \"./dmNegative\";\n\n\n\n\n// NOTE: We created separate grammars for the machines to \n// find answers in the most efficient way possible\nexport const grammar: { [index: string]: {approval?:  boolean } } = \n        {  \"of course\": { approval: true },\n        \"yes of course\": { approval: true },\n        \"yes\": { approval: true },\n        \"yeah\": { approval: true },\n        \"yup\": { approval: true },\n        \"sure\": { approval: true },\n        // --\n        \"no\": { approval: false },\n        \"nah\": { approval: false },\n        \"nope\": { approval: false },\n        \"no way\": { approval: false },\n        \"not sure\": { approval: false },\n        \"of course not\": { approval: false}\n\n        }\n\nexport const url_grammar: { [index: string]: {url:  string } } = \n        {  \"rock\": { url: 'https://www.youtube.com/watch?v=A0QkGThnKNQ' },\n        \"metal\": { url: 'https://www.youtube.com/watch?v=xnKhsTXoKCI&list=PLhQCJTkrHOwSX8LUnIMgaTq3chP1tiTut' },\n        \"punk\": { url: 'https://www.youtube.com/watch?v=xPxsS_-LTe0&list=PLvP_6uwiamDS23WxoCfqY4LBOXF_yF1l9' },\n        \"rap\": { url: 'https://www.youtube.com/watch?v=5qm8PH4xAss&list=PLvuMfxvpAQrkzez9insKS8cGPU74sK1Ss' },\n        \"lo-fi\": { url: 'https://www.youtube.com/watch?v=5qap5aO4i9A'},\n        \"house\": { url: 'https://www.youtube.com/watch?v=cna6C24AJkU' },\n        \"techno\": { url: 'https://www.youtube.com/watch?v=bC9_OKu6nBQ' },\n        \"country\": { url: 'https://www.youtube.com/watch?v=kI24NNjz2j8' }\n        // ...          \n}\n\n\nexport const finished: { [index: string]: {finished?:  boolean } } = \n        {  \"finished\": { finished: true },\n           \"done\": { finished: true },\n           \"I've done the task\": { finished: true },\n           \"I'm finished\": { finished: true }\n           // ...          \n}\n\nexport const bye: { [index: string]: {bye?:  boolean } } = \n        {  \"quit\": { bye: true },\n           \"turn off\": { bye: true },\n           \"bye\": { bye: true },\n           \"goodbye\": { bye: true }\n           // ...          \n}\n\n// window.open(\"https://cors-anywhere.herokuapp.com/corsdemo\")\n// window.open(\"https://statecharts.io/inspect\")\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\n// NOTE: created as much universal functions as possible\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')}\n        }\n    })\n}\n\nexport function promptHelpBye(prompt: string, idled: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {entry: send('LISTEN')\n            },\n            help: {\n                entry: say(\"We may be miscommunicating.\"),\n                on: { ENDSPEECH: [idled,\"#root.init.help\"] }\n            },\n            goodbye:{\n                entry: say(\"\"),\n                on: { ENDSPEECH: [idled,\"#root.init.goodbye\" ] }\n            }\n    }}\n)}\n\n\nexport function Endings(saythis: string, on_end:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({        \n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: send(({type: \"SPEAK\",\n                    value: saythis})),\n                 on: { ENDSPEECH: on_end }\n            }\n        }    \n    }\n)}\n\nexport function Queries(ondone: string, onerror:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }), \n                    (context: SDSContext, event: any) => console.log(event.data)],\n                    target: ondone\n                },\n                onError: {\n                    target: onerror,\n                    actions: (context, event) => console.log(event.data)}\n                }\n            }\n)}\n\nexport function Conditional(cond1: string, target1: string, cond2: string, target2: string, elses: string, idles: string, saythis: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [\n                            {cond: (context) => context.option === cond1, target: target1},\n                            {cond: (context) => context.option === cond2, target: target2},\n                            {cond: (context) => context.option === 'help', target: [idles,\"#root.init.help\"]},\n                            {cond: (context) => context.option === 'bye', target: [idles,\"#root.init.goodbye\"]},\n                            { target: elses }] \n                        \n                    },\n                states: {\n                    prompt: {\n                        entry: send(({type: \"SPEAK\", value: saythis})),\n                    }\n                }\n            }\n)}\n\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        // ____________\n        init: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {on: {CLICK: 'welcome'}},\n                // ...\n                welcome: {\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"Good morning. How are you?\")\n                },\n                query: {...Queries(\"distributor\",'welcome')},\n                // ...\n                distributor: {\n                    initial: \"prompt\",\n                    on: {\n                        ENDSPEECH: [\n                            {cond: (context) => context.option === 'positive', target: [\"#root.dm1.positive\", \"idle\"]},\n                            {cond: (context) => context.option === 'negative', target: [\"#root.dm2.negative\", \"idle\"]},\n                            {cond: (context) => context.option === 'todo', target: [\"#root.dm1.create_do\", \"idle\"]},\n                            // REMINDER: delete answer after retraining\n                            {cond: (context) => context.option === 'ideas', target: [\"#root.dm1.create_ideas\", \"idle\"]},\n                            {cond: (context) => context.option === 'answer', target: \"bob\"}, \n                            {cond: (context) => context.option === 'bob', target: \"bob\"},\n                            {cond: (context) => context.option === 'neutral', target: \"neutral\"},\n                            {cond: (context) => context.option === 'music', target: [\"#root.dm2.negative.choose_music\", \"idle\"]},\n                            {cond: (context) => context.option === 'games', target: [\"#root.dm2.negative.choose_game\", \"idle\"]},\n                            {cond: (context) => context.option === 'entertain', target: [\"#root.dm2.negative.load_entertainment\", \"idle\"]},\n\n                            {cond: (context) => context.option === 'help', target: \"help\"},\n\n                            {target: \"goodbye\"} ]\n                        },\n                    states: {\n                        prompt: {\n                            entry: say('Ok.')\n                        }\n                    }\n                },\n                // ...\n                bob: {\n                // NOTE:\n                // This part could be developed more, into a seperate machine\n                // where the user could try out the limits of adaptivity of this DS\n                    on: {\n                        RECOGNISED: {\n                            target: \"query\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"I am Bob the Helper. I am limited. Tell me what you'd like to do.\")\n                },\n                // ...\n                neutral: {\n                // NOTE: \n                // We are aware that this is not efficient.\n                // We tried this part to see how the machines interact between themselves. \n                // For educational purposes only.\n                    on: {\n                        RECOGNISED: {\n                            target: \"#root.dm2.negative.choose_music\",\n                            actions: assign((context) => { return { option: context.recResult } }),\n                        }},\n                    ...promptAndAsk(\"You seem lost. What about listening to some music?\")\n                },\n                // ...\n                help: {\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === true,\n                            target: \"bob\"},\n\n                            {cond: (context) => grammar[context.recResult] !== undefined && grammar[context.recResult].approval === false,\n                            target: \"goodbye\"},\n\n                            {target: \"bob\"}]  \n                    },\n                ...promptAndAsk(\"I feel lost. Would you like to start over?\")\n                },\n            //     // ...\n                goodbye: {...Endings(\"Happy to help out. See you later.\",\"#root.init\")}\n            },\n        },            \n        // ____________\n        dm1: {\n        ...dmMachine1\n        },\n        // ____________\n        dm2: {\n        ...dmMachine2\n        },\n        // ____________\n        asrtts: {\n            initial: 'idle',\n            states: {\n                // ...\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                // ...\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \t        progress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                // ...\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }    \n        }\n    }\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        }\n});\n\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    ...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    \n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click on me\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n        },\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mood-admin.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"],"sourceRoot":""}